<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sulimin-nb.github.io/"/>
  <updated>2020-07-20T03:07:57.179Z</updated>
  <id>https://sulimin-nb.github.io/</id>
  
  <author>
    <name>sulimin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文阅读2</title>
    <link href="https://sulimin-nb.github.io/article/1d82fc97.html"/>
    <id>https://sulimin-nb.github.io/article/1d82fc97.html</id>
    <published>2020-07-19T09:49:00.000Z</published>
    <updated>2020-07-20T03:07:57.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prototypical-Networks-for-Few-shot-Learning"><a href="#Prototypical-Networks-for-Few-shot-Learning" class="headerlink" title="Prototypical Networks for Few-shot Learning"></a>Prototypical Networks for Few-shot Learning</h1><p><img src="/article/1d82fc97/image-20200719181649169.png" srcset="/img/loading.gif" alt="image-20200719181649169"></p><p><img src="/article/1d82fc97/image-20200719181614391.png" srcset="/img/loading.gif" alt="image-20200719181614391"></p><h1 id="Transferrable-Prototypical-Networks-for-Unsupervised-Domain-Adaptation"><a href="#Transferrable-Prototypical-Networks-for-Unsupervised-Domain-Adaptation" class="headerlink" title="Transferrable Prototypical Networks for Unsupervised Domain Adaptation"></a>Transferrable Prototypical Networks for Unsupervised Domain Adaptation</h1><p><img src="/article/1d82fc97/tempsnip.png" srcset="/img/loading.gif" alt="tempsnip"></p><p><strong>motivation:</strong></p><p><img src="/article/1d82fc97/image-20200720103101415.png" srcset="/img/loading.gif" alt="image-20200720103101415"></p><p><strong>design:</strong></p><p><img src="/article/1d82fc97/image-20200720103210812.png" srcset="/img/loading.gif" alt="image-20200720103210812"></p><p><img src="/article/1d82fc97/image-20200720103352834.png" srcset="/img/loading.gif" alt="image-20200720103352834"></p><p><img src="/article/1d82fc97/image-20200720103521702.png" srcset="/img/loading.gif" alt="image-20200720103521702"></p><p>相较于域级别而言，类级别的MMD更加地细粒度(fine-grained更细致)。</p><p><img src="/article/1d82fc97/image-20200720104021744.png" srcset="/img/loading.gif" alt="image-20200720104021744"></p><p><strong>motivation:</strong></p><p><img src="/article/1d82fc97/image-20200720104121465.png" srcset="/img/loading.gif" alt="image-20200720104121465"></p><p><strong>design:</strong></p><p><img src="/article/1d82fc97/image-20200720104403499.png" srcset="/img/loading.gif" alt="image-20200720104403499"></p><p><img src="/article/1d82fc97/image-20200720104647122.png" srcset="/img/loading.gif" alt="image-20200720104647122"></p><p>不同于单独匹配不同域之间的每个类的prototype，task-specific adaptation同时匹配所有类的prototypes。力求每个样本的类分布的score distributions相似.</p><p><img src="/article/1d82fc97/image-20200720105117126.png" srcset="/img/loading.gif" alt="image-20200720105117126"></p><p><strong>Optimization:</strong><br>源域上的监督学习</p><p><img src="/article/1d82fc97/image-20200720105431189.png" srcset="/img/loading.gif" alt="image-20200720105431189"></p><p><img src="/article/1d82fc97/image-20200720105531478.png" srcset="/img/loading.gif" alt="image-20200720105531478"></p><p><strong>Training Procedure:</strong></p><p><img src="/article/1d82fc97/image-20200720105706495.png" srcset="/img/loading.gif" alt="image-20200720105706495"></p><p><strong>推理阶段(测试阶段)：</strong></p><p><img src="/article/1d82fc97/image-20200720110755325.png" srcset="/img/loading.gif" alt="image-20200720110755325"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prototypical-Networks-for-Few-shot-Learning&quot;&gt;&lt;a href=&quot;#Prototypical-Networks-for-Few-shot-Learning&quot; class=&quot;headerlink&quot; title=&quot;Protot
      
    
    </summary>
    
    
      <category term="linc实验室" scheme="https://sulimin-nb.github.io/categories/linc%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="论文阅读" scheme="https://sulimin-nb.github.io/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>leetcode200-岛屿数量</title>
    <link href="https://sulimin-nb.github.io/article/708439c3.html"/>
    <id>https://sulimin-nb.github.io/article/708439c3.html</id>
    <published>2020-07-19T07:21:17.000Z</published>
    <updated>2020-07-19T10:33:46.369Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="深度优先搜索，广度优先搜索" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode127-单词接龙</title>
    <link href="https://sulimin-nb.github.io/article/1c7950e9.html"/>
    <id>https://sulimin-nb.github.io/article/1c7950e9.html</id>
    <published>2020-07-19T07:20:13.000Z</published>
    <updated>2020-07-19T10:33:53.742Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="深度优先搜索，广度优先搜索" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode126-单词接龙II</title>
    <link href="https://sulimin-nb.github.io/article/25dd8b3e.html"/>
    <id>https://sulimin-nb.github.io/article/25dd8b3e.html</id>
    <published>2020-07-19T07:19:28.000Z</published>
    <updated>2020-07-19T10:33:41.584Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="深度优先搜索，广度优先搜索" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode22-括号生成</title>
    <link href="https://sulimin-nb.github.io/article/68fd8ba2.html"/>
    <id>https://sulimin-nb.github.io/article/68fd8ba2.html</id>
    <published>2020-07-19T06:34:03.000Z</published>
    <updated>2020-07-19T09:50:09.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode20-括号生成"><a href="#leetcode20-括号生成" class="headerlink" title="leetcode20.括号生成"></a>leetcode20.括号生成</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><p><strong>示例：</strong></p><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">3</span>输出：[       <span class="hljs-string">"((()))"</span>,       <span class="hljs-string">"(()())"</span>,       <span class="hljs-string">"(())()"</span>,       <span class="hljs-string">"()(())"</span>,       <span class="hljs-string">"()()()"</span>     ]</code></pre><h2 id="一：暴力法"><a href="#一：暴力法" class="headerlink" title="一：暴力法"></a>一：暴力法</h2><p><strong>思路</strong></p><p>我们可以生成所有 $2^{2n}$ 个 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 字符构成的序列，然后我们检查每一个是否有效即可。</p><p><strong>算法</strong></p><p>为了生成所有序列，我们可以使用递归。长度为 <code>n</code> 的序列就是在长度为 <code>n-1</code> 的序列前加一个 <code>&#39;(&#39;</code> 或 <code>&#39;)&#39;</code>。</p><p>为了检查序列是否有效，我们遍历这个序列，并使用一个变量 <code>balance</code> 表示左括号的数量减去右括号的数量。如果在遍历过程中 <code>balance</code> 的值小于零，或者结束时 <code>balance</code> 的值不为零，那么该序列就是无效的，否则它是有效的。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(self, n: int)</span> -&gt; List[str]:</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate</span><span class="hljs-params">(A)</span>:</span>            <span class="hljs-keyword">if</span> len(A) == <span class="hljs-number">2</span>*n:                <span class="hljs-keyword">if</span> valid(A):                    ans.append(<span class="hljs-string">""</span>.join(A))            <span class="hljs-keyword">else</span>:                A.append(<span class="hljs-string">'('</span>)                generate(A)                A.pop()                A.append(<span class="hljs-string">')'</span>)                generate(A)                A.pop()        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">valid</span><span class="hljs-params">(A)</span>:</span>            bal = <span class="hljs-number">0</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> A:                <span class="hljs-keyword">if</span> c == <span class="hljs-string">'('</span>: bal += <span class="hljs-number">1</span>                <span class="hljs-keyword">else</span>: bal -= <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> bal &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">return</span> bal == <span class="hljs-number">0</span>        ans = []        generate([])        <span class="hljs-keyword">return</span> ans</code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：$O(2^{2n}n)$，对于 $2^{2n}$ 个序列中的每一个，我们用于建立和验证该序列的复杂度为 $O(n)$。</li></ul><p>空间复杂度：$O(n)$，除了答案数组之外，我们所需要的空间取决于递归栈的深度，每一层递归函数需要 $O(1)$ 的空间，最多递归 $2n$ 层，因此空间复杂度为 $O(n)$。</p><h2 id="方法二：回溯法"><a href="#方法二：回溯法" class="headerlink" title="方法二：回溯法"></a>方法二：回溯法</h2><p><strong>思路和算法</strong></p><p>方法一还有改进的余地，可以只在序列仍然保持有效时添加 <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>，而不是像 <a href="#方法一：暴力法">方法一</a> 那样每次添加。我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点。<br>如果左括号数量不大于 $n$，可以放一个左括号。如果右括号数量小于左括号的数量，我们可以放一个右括号。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(self, n)</span>:</span>        ans = []        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(S, left, right)</span>:</span>            <span class="hljs-keyword">if</span> len(S) == <span class="hljs-number">2</span> * n:                ans.append(<span class="hljs-string">''</span>.join(S))                <span class="hljs-keyword">return</span>            <span class="hljs-keyword">if</span> left &lt; n:                S.append(<span class="hljs-string">'('</span>)                backtrack(S, left+<span class="hljs-number">1</span>, right)                S.pop()            <span class="hljs-keyword">if</span> right &lt; left:                S.append(<span class="hljs-string">')'</span>)                backtrack(S, left, right+<span class="hljs-number">1</span>)                S.pop()        backtrack([], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> ans</code></pre><p><strong>复杂度分析</strong></p><p>复杂度分析依赖于理解 <code>generateParenthesis(n)</code> 中有多少个元素。事实证明这是第 $n$ 个卡特兰数 $\dfrac{1}{n+1}\dbinom{2n}{n}$ ，这是由 $\dfrac{4^n}{n\sqrt{n}}$ 渐近界定的。</p><ul><li>时间复杂度：时间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$，在回溯过程中，每个答案需要 $O(n)$ 的时间复制到答案数组中。</li><li>空间复杂度：$O(n)$，除了答案数组之外，我们所需要的空间取决于递归栈的深度，每一层递归函数需要 $O(1)$ 的空间，最多递归 $2n$ 层，因此空间复杂度为 $O(n)$。</li></ul><h2 id="方法三：按括号序列的长度递归"><a href="#方法三：按括号序列的长度递归" class="headerlink" title="方法三：按括号序列的长度递归"></a>方法三：按括号序列的长度递归</h2><p><strong>思路与算法</strong></p><p>任何一个括号序列都一定是由 <code>(</code> 开头，并且第一个 <code>(</code> 一定有一个唯一与之对应的 <code>)</code>。这样一来，每一个括号序列可以用 <code>(a)b</code> 来表示，其中 <code>a</code> 与 <code>b</code> 分别是一个合法的括号序列（可以为空）。</p><p>那么，要生成所有长度为 <code>2 * n</code> 的括号序列，我们定义一个函数 <code>generate(n)</code> 来返回所有可能的括号序列。那么在函数 <code>generate(n)</code> 的过程中：</p><p>我们需要枚举与第一个 <code>(</code> 对应的 ) 的位置 <code>2 * i + 1</code>；<br>递归调用 <code>generate(i)</code> 即可计算 a 的所有可能性；<br>递归调用 <code>generate(n - i - 1)</code> 即可计算 b 的所有可能性；<br>遍历 <code>a</code> 与 <code>b</code> 的所有可能性并拼接，即可得到所有长度为 <code>2 * n</code> 的括号序列。<br>为了节省计算时间，我们在每次 <code>generate(i)</code> 函数返回之前，把返回值存储起来，下次再调用 <code>generate(i)</code> 时可以直接返回，不需要再递归计算。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><span class="hljs-meta">    @lru_cache(None)</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(self, n: int)</span> -&gt; List[str]:</span>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> [<span class="hljs-string">''</span>]        ans = []        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> range(n):            <span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> self.generateParenthesis(c):                <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> self.generateParenthesis(n<span class="hljs-number">-1</span>-c):                    ans.append(<span class="hljs-string">'(&#123;&#125;)&#123;&#125;'</span>.format(left, right))        <span class="hljs-keyword">return</span> ans</code></pre><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$，该分析与 方法二 类似。</p></li><li><p>空间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$，此方法除答案数组外，中间过程中会存储与答案数组同样数量级的临时数组，是我们所需要的空间复杂度。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;leetcode20-括号生成&quot;&gt;&lt;a href=&quot;#leetcode20-括号生成&quot; class=&quot;headerlink&quot; title=&quot;leetcode20.括号生成&quot;&gt;&lt;/a&gt;leetcode20.括号生成&lt;/h1&gt;&lt;p&gt;数字 n 代表生成括号的对数，请你设
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="深度优先搜索，广度优先搜索" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode433-最小基因变化</title>
    <link href="https://sulimin-nb.github.io/article/e3f6d653.html"/>
    <id>https://sulimin-nb.github.io/article/e3f6d653.html</id>
    <published>2020-07-19T05:21:24.000Z</published>
    <updated>2020-07-19T09:50:09.457Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="深度优先搜索，广度优先搜索" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>nlp</title>
    <link href="https://sulimin-nb.github.io/article/6b3bc2e7.html"/>
    <id>https://sulimin-nb.github.io/article/6b3bc2e7.html</id>
    <published>2020-07-17T08:14:00.000Z</published>
    <updated>2020-07-19T15:37:26.589Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">You must enter the password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="80f20397b22cf838dc793b6245d26df9b83197b349949ce5fc455021b02a6807"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      This blog is encrypted.
    
    </summary>
    
    
      <category term="自然语言处理" scheme="https://sulimin-nb.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="自然语言处理" scheme="https://sulimin-nb.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>算法-卡特兰数</title>
    <link href="https://sulimin-nb.github.io/article/f37649e5.html"/>
    <id>https://sulimin-nb.github.io/article/f37649e5.html</id>
    <published>2020-07-16T18:21:11.000Z</published>
    <updated>2020-07-17T08:01:22.372Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode785-判断二分图</title>
    <link href="https://sulimin-nb.github.io/article/fba1bed.html"/>
    <id>https://sulimin-nb.github.io/article/fba1bed.html</id>
    <published>2020-07-16T10:01:30.000Z</published>
    <updated>2020-07-17T08:04:10.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="785-判断二分图"><a href="#785-判断二分图" class="headerlink" title="785.判断二分图"></a>785.判断二分图</h1><p>给定一个无向图<code>graph</code>，当这个图为二分图时返回<code>true</code>。</p><p>如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。</p><p><code>graph</code>将会以邻接表方式给出，<code>graph[i]</code>表示图中与节点i相连的所有节点。每个节点都是一个在<code>0</code>到<code>graph.length-1</code>之间的整数。这图中没有自环和平行边： <code>graph[i]</code>中不存在<code>i</code>，并且<code>graph[i]</code>中没有重复的值。</p><pre><code class="hljs angelscript">示例 <span class="hljs-number">1</span>:输入: [[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]]输出: <span class="hljs-literal">true</span>解释: 无向图如下:<span class="hljs-number">0</span>---<span class="hljs-number">-1</span>|    ||    |<span class="hljs-number">3</span>---<span class="hljs-number">-2</span>我们可以将节点分成两组: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125; 和 &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;。</code></pre><pre><code class="hljs angelscript">示例 <span class="hljs-number">2</span>:输入: [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>], [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]]输出: <span class="hljs-literal">false</span>解释: 无向图如下:<span class="hljs-number">0</span>---<span class="hljs-number">-1</span>| \  ||  \ |<span class="hljs-number">3</span>---<span class="hljs-number">-2</span>我们不能将节点分割成两个独立的子集。</code></pre><p><strong>注意:</strong></p><ul><li><code>graph</code> 的长度范围为 <code>[1, 100]</code>。</li><li><code>graph[i]</code> 中的元素的范围为 <code>[0, graph.length - 1]</code>。</li><li><code>graph[i]</code> 不会包含 <code>i</code> 或者有重复的值。</li><li>图是无向的: 如果<code>j</code> 在 <code>graph[i]</code>里边, 那么 <code>i</code> 也会在 <code>graph[j]</code>里边。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于图中的任意两个节点 $u$ 和 $v$，如果它们之间有一条边直接相连，那么 $u$ 和 $v$ 必须属于不同的集合。</p><p>如果给定的无向图连通，那么我们就可以任选一个节点开始，给它染成红色。随后将该节点直接相连的所有节点染成绿色，表示这些节点不能与起始节点属于同一个集合。我们再将这些绿色节点直接相连的所有节点染成红色，以此类推，直到无向图中的每个节点均被染色。</p><p>如果我们能够成功染色，那么红色和绿色的节点各属于一个集合，这个无向图就是一个二分图；如果我们未能成功染色，即在染色的过程中，某一时刻访问到了一个已经染色的节点，并且它的颜色与我们将要给它染上的颜色不相同(即一条边上两个节点同色)，也就说明这个无向图不是一个二分图。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ul><li><p>我们任选一个节点开始，将其染成红色，并从该节点开始对整个无向图进行遍历；</p></li><li><p>在遍历的过程中，如果我们通过节点 u 遍历到了节点 v（即 u 和 v 在图中有一条边直接相连），那么会有两种情况：</p><ul><li>如果 v 未被染色，那么我们将其染成与 u 不同的颜色，并对 v 直接相连的节点进行遍历；</li><li>如果 v 被染色，并且颜色与 u 相同，那么说明给定的无向图不是二分图。我们可以直接退出遍历并返回 $\text{False}$ 作为答案。</li></ul></li></ul><p>当遍历结束时，说明给定的无向图是二分图，返回 $\text{True}$ 作为答案。</p><p>注意：题目中给定的无向图不一定保证连通，因此我们需要遍历每个节点，直至每一个节点都被染色，或确定答案为False为止。每次遍历开始时，任选一个未被染色的节点，将所有与该节点直接或间接相连的节点进行染色。</p><p>我们可以使用「深度优先搜索」或「广度优先搜索」对无向图进行遍历。</p><h2 id="方法一：深度优先搜索"><a href="#方法一：深度优先搜索" class="headerlink" title="方法一：深度优先搜索"></a>方法一：深度优先搜索</h2><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(self, graph: List[List[int]])</span> -&gt; bool:</span>        <span class="hljs-comment"># 方法一 深度优先搜索</span>        n = len(graph)        uncolored, red, green = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>        color = [<span class="hljs-number">0</span>] * n        valid = <span class="hljs-literal">True</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(curr, c)</span>:</span>            <span class="hljs-keyword">nonlocal</span> valid            color[curr] = c            ncolor = green <span class="hljs-keyword">if</span> color[curr] == red <span class="hljs-keyword">else</span> red            <span class="hljs-keyword">for</span> neighbor <span class="hljs-keyword">in</span> graph[curr]:                <span class="hljs-keyword">if</span> color[neighbor] == uncolored:                    dfs(neighbor, ncolor)                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> valid:                        <span class="hljs-keyword">return</span>                <span class="hljs-keyword">elif</span> color[neighbor] != ncolor:                    valid = <span class="hljs-literal">False</span>                    <span class="hljs-keyword">return</span>            <span class="hljs-keyword">return</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):            <span class="hljs-keyword">if</span> color[i] == uncolored:                dfs(i, red)                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> valid:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre><h2 id="方法二：广度优先搜索"><a href="#方法二：广度优先搜索" class="headerlink" title="方法二：广度优先搜索"></a>方法二：广度优先搜索</h2><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(self, graph: List[List[int]])</span> -&gt; bool:</span>        <span class="hljs-comment"># 方法二 广度优先搜索        </span>        n = len(graph)        uncolored, red, green = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>        color = [<span class="hljs-number">0</span>] * n        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):            <span class="hljs-keyword">if</span> color[i] == uncolored:                color[i] = red                queue = collections.deque([i])                <span class="hljs-keyword">while</span> queue:                    curr = queue.popleft()                    ncolor = green <span class="hljs-keyword">if</span> color[curr] == red <span class="hljs-keyword">else</span> red                    <span class="hljs-keyword">for</span> neighbor <span class="hljs-keyword">in</span> graph[curr]:                        <span class="hljs-keyword">if</span> color[neighbor] == uncolored:                            color[neighbor] = ncolor                            queue.append(neighbor)                        <span class="hljs-keyword">elif</span> color[neighbor] != ncolor:                            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span>  <span class="hljs-literal">True</span></code></pre><h2 id="方法三：并查集"><a href="#方法三：并查集" class="headerlink" title="方法三：并查集"></a>方法三：并查集</h2><p>二分图中，每个顶点的所有邻接点都应该属于同一个集合，且捕鱼顶点处于同一个集合，所以可以使用并查集解决这个问题。遍历图中每个顶点，将当前顶点的所有邻接点进行合并，并判断这些邻接点中是否存在某一邻接点意见与当前顶点处于同一个集合中，若是，则说明此无向图不是二分图。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UFS</span>:</span>    <span class="hljs-comment"># 初始化p数组记录父节点，rank数组记录节点深度</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, length)</span>:</span>        self.p = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]        self.rank = [<span class="hljs-number">0</span>] * length    <span class="hljs-comment"># 查找根节点</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">(self, x)</span>:</span>        <span class="hljs-keyword">if</span> self.p[x] != x:            self.p[x] = self.find(self.p[x])        <span class="hljs-keyword">return</span> self.p[x]        <span class="hljs-comment"># 合并两个节点</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">union</span><span class="hljs-params">(self, x, y)</span>:</span>        rx, ry = self.find(x), self.finx(y)        <span class="hljs-keyword">if</span> self.rank[rx] &lt; self.rank[ry]:            self.p[rx] = ry        <span class="hljs-keyword">elif</span> self.rank[rx] &gt; self.rank[ry]:            self.p[ry] = rx        <span class="hljs-keyword">else</span>:            self.p[rx] = ry            self.rank[ry] += <span class="hljs-number">1</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(self, graph)</span>:</span>        ufs = UFS(len(graph))        <span class="hljs-keyword">for</span> i, g <span class="hljs-keyword">in</span> enumerate(graph):            root = ufs.find(i)            <span class="hljs-comment"># 若对面节点的根节点和当前节点根节点相同，返回False</span>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(g)):                <span class="hljs-keyword">if</span> root == ufs.find(g[j]):                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-comment"># 否则就把对面节点都合并起来</span>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(g)):                ufs.union(g[j<span class="hljs-number">-1</span>],g[j])        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre><p>无rank版本</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(self, graph)</span>:</span><span class="hljs-comment"># 第二种并查集</span>        n=len(graph)        boss=[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n)]        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">(x)</span>:</span>            <span class="hljs-keyword">nonlocal</span> boss            <span class="hljs-keyword">if</span> boss[x]!=x:                boss[x]=find(boss[x])            <span class="hljs-keyword">return</span> boss[x]        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(x,y)</span>:</span>            bx=find(x)            by=find(y)            boss[bx]=by        <span class="hljs-keyword">for</span> i, e <span class="hljs-keyword">in</span> enumerate(graph):            fi=find(i)            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> e:                <span class="hljs-keyword">if</span> find(j)==fi:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">if</span> e:                b=e[<span class="hljs-number">0</span>]                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> e[<span class="hljs-number">1</span>:]:                    merge(b,j)        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre><p><strong>补充：</strong><br><span style="color:blue">非局部变量用于未定义局部作用域的嵌套函数。这意味着变量(nonlocal x)既不能在局部作用域内，也不能在全局作用域内(就是说只能在嵌套函数里使用)。<br>我们使用非局部关键字(nonlocal)来创建非局部变量。</span></p><blockquote><p><strong>Note</strong> : If we change the value of a nonlocal variable, the changes appear in the local variable.<br>注意:如果我们改变一个非局部变量的值，这些改变会出现在局部变量中。（nonlocal 表示将变量声明为外层变量（外层函数的局部变量，而且不能是全局变量）。）</p></blockquote><p>详细内容参考<a href="https://blog.csdn.net/HappyRocking/article/details/80115241" target="_blank" rel="noopener">python中global,nonlocal的区别</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://leetcode-cn.com/problems/is-graph-bipartite/solution/pan-duan-er-fen-tu-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a></p><p><a href="https://leetcode-cn.com/problems/is-graph-bipartite/solution/bfs-dfs-bing-cha-ji-san-chong-fang-fa-pan-duan-er-/" target="_blank" rel="noopener">BFS+DFS+并查集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;785-判断二分图&quot;&gt;&lt;a href=&quot;#785-判断二分图&quot; class=&quot;headerlink&quot; title=&quot;785.判断二分图&quot;&gt;&lt;/a&gt;785.判断二分图&lt;/h1&gt;&lt;p&gt;给定一个无向图&lt;code&gt;graph&lt;/code&gt;，当这个图为二分图时返回&lt;code
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="深度优先搜索，广度优先搜索" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="每日一题" scheme="https://sulimin-nb.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>linc-论文阅读1</title>
    <link href="https://sulimin-nb.github.io/article/359b1a5e.html"/>
    <id>https://sulimin-nb.github.io/article/359b1a5e.html</id>
    <published>2020-07-16T08:35:13.000Z</published>
    <updated>2020-07-17T16:26:45.423Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">You must enter the password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f2327b937692dd6410a4186a19f51c5448c34be475a0e3acf2fec0b64d9ddb0c"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      This blog is encrypted.
    
    </summary>
    
    
      <category term="linc实验室" scheme="https://sulimin-nb.github.io/categories/linc%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="论文阅读" scheme="https://sulimin-nb.github.io/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>leetcode102-二叉树的层序遍历</title>
    <link href="https://sulimin-nb.github.io/article/e784d9f0.html"/>
    <id>https://sulimin-nb.github.io/article/e784d9f0.html</id>
    <published>2020-07-15T13:50:36.000Z</published>
    <updated>2020-07-17T08:04:38.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102.二叉树的层序遍历"></a>102.二叉树的层序遍历</h1><p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p><strong>示例：</strong><br>二叉树：<code>[3,9,20,null,null,15,7]</code>,</p><pre><code class="hljs angelscript">  <span class="hljs-number">3</span> / \<span class="hljs-number">9</span>  <span class="hljs-number">20</span>  /  \ <span class="hljs-number">15</span>   <span class="hljs-number">7</span></code></pre><p>返回其层次遍历结果：</p><pre><code class="hljs json">[  [<span class="hljs-number">3</span>],  [<span class="hljs-number">9</span>,<span class="hljs-number">20</span>],  [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]]</code></pre><h2 id="方法一：广度优先搜索"><a href="#方法一：广度优先搜索" class="headerlink" title="方法一：广度优先搜索"></a>方法一：广度优先搜索</h2><p><strong>思路</strong></p><p>层序遍历就是把二叉树分层，然后每一层从左到右遍历：</p><p><img src="/article/e784d9f0/层次遍历.jpg" srcset="/img/loading.gif" alt="二叉树的层序遍历"></p><p>层序遍历要求的输出结果和BFS是不同的。层序遍历要求我们区分每一层，也就是返回二维数组。BFS遍历结果是一个一维数组，无法区分每一层。</p><p><img src="/article/e784d9f0/输出结果对比.jpg" srcset="/img/loading.gif" alt="输出结果对比"></p><p><strong>如何给BFS遍历结果分层？</strong>首先观察BFS遍历过程，结合进队列和出队列的过程：</p><p><img src="/article/e784d9f0/BFS.gif" srcset="/img/loading.gif" alt="BFS"></p><p>截取BFS遍历过程中的某个时刻：</p><p><img src="/article/e784d9f0/时刻图.jpg" srcset="/img/loading.gif" alt="时刻图"></p><p>此时队列中的结点是 3、4、5，分别来自第 1 层和第 2 层。这个时候，第 1 层的结点还没处理结束，第 2 层的结点就压入队列中，导致两层的结点在队列中紧挨在一起，无法区分队列中的结点来自哪一层。</p><p>因此，<span style="color:blue">在每一层遍历开始前，先记录队列中的结点数量 $n$ (也就是这一层的结点数量)</span>，然后处理这一层的 $n$ 个结点：将 $n$个节点的值放入结果集中，将 $n$个节点的孩子放入队列中。</p><p><strong>算法</strong></p><p>广度优先搜索简直和这道题完美适配~</p><ul><li>首先根元素入队</li><li>当队列不为空时<ul><li>求当前队列的长度$s_i$</li><li>依次从队列中取$s_i$个元素进行拓展，结束后进入下一次迭代</li></ul></li></ul><p>这样做正确的理由：参考<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-xu-bian-li-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a></p><p>它和 BFS 的区别在于 BFS 每次只取一个元素拓展，而这里每次取 $s_i$  个元素。在上述过程中的第 $i$ 次迭代就得到了二叉树的第 $i$ 层的 $s_i$  个元素。</p><p><strong>复杂度分析</strong></p><p>记树上所有节点的个数为 $n$。</p><ul><li>时间复杂度： $O(n)$。每个点进队出队各一次，故渐进时间复杂度为$O(n)$。</li><li>空间复杂度：$O(n)$。队列中元素的个数不超过 n<em>n</em> 个，故渐进空间复杂度为 $O(n)$。</li></ul><p><strong>代码</strong></p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:            <span class="hljs-keyword">return</span> []        res = []        cur_level = [root]        <span class="hljs-keyword">while</span> cur_level:            tmp = []            next_level = []            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> cur_level:                tmp.append(node.val)                <span class="hljs-keyword">if</span> node.left:                    next_level.append(node.left)                <span class="hljs-keyword">if</span> node.right:                    next_level.append(node.right)            res.append(tmp)            cur_level = next_level        <span class="hljs-keyword">return</span> re</code></pre><p>使用双端队列：</p><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><span class="hljs-comment"># class TreeNode:</span><span class="hljs-comment">#     def __init__(self, x):</span><span class="hljs-comment">#         self.val = x</span><span class="hljs-comment">#         self.left = None</span><span class="hljs-comment">#         self.right = None</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<span class="hljs-keyword">return</span> []        ans = []        q = deque()        q.append(root)        <span class="hljs-keyword">while</span> len(q):            size = len(q)            res = []            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(size):                t = q.popleft()                res.append(t.val)                <span class="hljs-keyword">if</span> t.left:q.append(t.left)                <span class="hljs-keyword">if</span> t.right:q.append(t.right)            ans.append(res)        <span class="hljs-keyword">return</span> ans</code></pre><h2 id="方法二：深度优先搜索"><a href="#方法二：深度优先搜索" class="headerlink" title="方法二：深度优先搜索"></a>方法二：深度优先搜索</h2><p>用dfs做这道题。就是每层带一个level属性。参考<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/die-dai-di-gui-duo-tu-yan-shi-102er-cha-shu-de-cen/" target="_blank" rel="noopener">bfs/dfs</a></p><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(h)$，$h$ 是树的高度</li></ul><p>今天小苏喝了三碗汤。都是算法题，汤浓度有点点低~ 明天要看论文，修改之前的文章啦~</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/bfs-de-shi-yong-chang-jing-zong-jie-ceng-xu-bian-l/" target="_blank" rel="noopener">BFS 的使用场景总结：层序遍历、最短路径问题(强烈推荐)</a></p><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-xu-bian-li-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a></p><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/die-dai-di-gui-duo-tu-yan-shi-102er-cha-shu-de-cen/" target="_blank" rel="noopener">bfs/dfs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;102-二叉树的层序遍历&quot;&gt;&lt;a href=&quot;#102-二叉树的层序遍历&quot; class=&quot;headerlink&quot; title=&quot;102.二叉树的层序遍历&quot;&gt;&lt;/a&gt;102.二叉树的层序遍历&lt;/h1&gt;&lt;p&gt;给你一个二叉树，请你返回其按 &lt;strong&gt;层序遍历&lt;/s
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="深度优先搜索，广度优先搜索" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="每日一题" scheme="https://sulimin-nb.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>深度优先搜索和广度优先搜索</title>
    <link href="https://sulimin-nb.github.io/article/9fa9df3c.html"/>
    <id>https://sulimin-nb.github.io/article/9fa9df3c.html</id>
    <published>2020-07-15T11:04:49.000Z</published>
    <updated>2020-07-15T16:17:11.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遍历搜索"><a href="#遍历搜索" class="headerlink" title="遍历搜索"></a>遍历搜索</h1><p>在树（图/状态集）中寻找特定结点(Node)</p><p><img src="/article/9fa9df3c/image-20200715200703764.png" srcset="/img/loading.gif" alt="image-20200715200703764"></p><h2 id="Node节点示例代码"><a href="#Node节点示例代码" class="headerlink" title="Node节点示例代码"></a>Node节点示例代码</h2><p><strong>Python</strong></p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, val)</span>:</span>        self.val = val        self.left, self.right = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span></code></pre><p><strong>C++</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span>&#123;</span>    <span class="hljs-keyword">int</span> val;    TreeNode *left;    TreeNode *right;    TreeNode(<span class="hljs-keyword">int</span> x): val(x), left(<span class="hljs-literal">NULL</span>),right(<span class="hljs-literal">NULL</span>)&#123;&#125;&#125;</code></pre><p><strong>Java</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> val;    <span class="hljs-keyword">public</span> TreeNode left, right;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;        <span class="hljs-keyword">this</span>.val = val;        <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h1 id="搜索-遍历"><a href="#搜索-遍历" class="headerlink" title="搜索-遍历"></a>搜索-遍历</h1><ul><li>每个节点都要访问一次</li><li>每个节点仅仅要访问一次</li><li>对于节点访问顺序不限<ul><li>深度优先：depth first search</li><li>广度优先：breadth first search</li></ul></li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(node)</span>:</span><span class="hljs-keyword">if</span> node <span class="hljs-keyword">in</span> visited:        <span class="hljs-comment"># already visited</span>        <span class="hljs-keyword">return</span>    visited.add(node)        <span class="hljs-comment"># process current node</span>    <span class="hljs-comment"># ... # logic here</span>    dfs(node.left)    dfs(node.right)</code></pre><h1 id="深度优先搜索-Depth-First-Search"><a href="#深度优先搜索-Depth-First-Search" class="headerlink" title="深度优先搜索(Depth-First-Search)"></a>深度优先搜索(Depth-First-Search)</h1><p><strong>遍历顺序</strong></p><p><img src="/article/9fa9df3c/image-20200715203020928.png" srcset="/img/loading.gif" alt="image-20200715203020928"></p><p><img src="/article/9fa9df3c/image-20200715203054856.png" srcset="/img/loading.gif" alt="image-20200715203054856"></p><p><strong>DFS代码-递归写法</strong></p><pre><code class="hljs python">visited = set()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(node, visited)</span>:</span>    <span class="hljs-keyword">if</span> node <span class="hljs-keyword">in</span> visited: <span class="hljs-comment"># terminator</span>        <span class="hljs-comment"># already visited</span>        <span class="hljs-keyword">return</span>        visited.add(node)        <span class="hljs-comment"># process current node here.</span>    ...    <span class="hljs-keyword">for</span> next_node <span class="hljs-keyword">in</span> node.children():        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> next_node <span class="hljs-keyword">in</span> visited:            dfs(next_node, visited)</code></pre><p><strong>DFS代码-非递归写法</strong></p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DFS</span><span class="hljs-params">(self, tree)</span>:</span>    <span class="hljs-keyword">if</span> tree.root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">return</span> []        visited, stack = [], [tree.root]        <span class="hljs-keyword">while</span> stack:        node = stack.pop()        visited.add(node)                process(node)        nodes = generate_related_nodes(node)        stack.push(nodes)    <span class="hljs-comment"># other processing work</span>    ...</code></pre><p><span style="color:blue">栈：[根节点]-&gt;[子节点1，子节点2]-&gt;[子节点1，子节点21，子节点22]</span></p><h1 id="广度优先搜索-Breadth-First-Search"><a href="#广度优先搜索-Breadth-First-Search" class="headerlink" title="广度优先搜索(Breadth-First-Search)"></a>广度优先搜索(Breadth-First-Search)</h1><p><strong>遍历顺序</strong></p><p><img src="/article/9fa9df3c/image-20200715204551937.png" srcset="/img/loading.gif" alt="image-20200715204551937"></p><p><strong>DFS和BFS遍历对比</strong></p><p><img src="/article/9fa9df3c/image-20200715204646407.png" srcset="/img/loading.gif" alt="image-20200715204646407"></p><p><strong>BFS代码</strong></p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">BFS</span><span class="hljs-params">(graph, start, end)</span>:</span>queue = []    queue.append([start])    visited.add(start)        <span class="hljs-keyword">while</span> queue:        node = queue.pop()        visited.add(node)                process(node)        nodes = generate_related_nodes(node)        queue.push(nodes)            <span class="hljs-comment">#other processing work</span>    ...</code></pre><p><span style="color:blue">递归遍历代码比非递归代码简洁。这是因为递归的方式隐含地使用了系统的 栈，所以此时我们不需要自己维护一个数据结构。</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;遍历搜索&quot;&gt;&lt;a href=&quot;#遍历搜索&quot; class=&quot;headerlink&quot; title=&quot;遍历搜索&quot;&gt;&lt;/a&gt;遍历搜索&lt;/h1&gt;&lt;p&gt;在树（图/状态集）中寻找特定结点(Node)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/article/9fa9df3c/imag
      
    
    </summary>
    
    
      <category term="算法" scheme="https://sulimin-nb.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://sulimin-nb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode96-不同的二叉搜索树</title>
    <link href="https://sulimin-nb.github.io/article/e617005.html"/>
    <id>https://sulimin-nb.github.io/article/e617005.html</id>
    <published>2020-07-15T05:16:25.000Z</published>
    <updated>2020-07-15T17:39:20.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96.不同的二叉搜索树"></a>96.不同的二叉搜索树</h1><p>给定一个整数 <em>n</em>，求以 1 … <em>n</em> 为节点组成的二叉搜索树有多少种？</p><p><strong>示例:</strong></p><pre><code class="hljs angelscript">输入: <span class="hljs-number">3</span> 输出: <span class="hljs-number">5</span> 解释:给定 n = <span class="hljs-number">3</span>, 一共有 <span class="hljs-number">5</span> 种不同结构的二叉搜索树:   <span class="hljs-number">1</span>         <span class="hljs-number">3</span>     <span class="hljs-number">3</span>      <span class="hljs-number">2</span>      <span class="hljs-number">1</span>    \       /     /      / \      \     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>      <span class="hljs-number">1</span>   <span class="hljs-number">3</span>      <span class="hljs-number">2</span>    /     /       \                 \   <span class="hljs-number">2</span>     <span class="hljs-number">1</span>         <span class="hljs-number">2</span>                 <span class="hljs-number">3</span></code></pre><h2 id="方法一：动态规划"><a href="#方法一：动态规划" class="headerlink" title="方法一：动态规划"></a>方法一：动态规划</h2><p><strong>思路</strong><br>给定一个有序序列 $1 \cdots n$，为了构建出一颗二叉搜索树，遍历每个数字 $i$，将 $1 \cdots (i-1)$ 序列作为左子树，将 $(i+1) \cdots n$序列作为右子树，按照同样的方式递归构建左子树和右子树。<br><span style="color:blue">在上述构建的过程中，由于根的值不同，因此我们能保证每棵二叉搜索树是唯一的。</span><br>由此可见，原问题可以分解成规模较小的两个子问题，且子问题的解可以复用。动态规划很适合啦~<br><strong>算法</strong><br>题目要求是计算不同二叉搜索树的个数。为此，我们可以定义两个函数：</p><p><span style="color:blue">$G(n)$: 长度为 $n$ 的序列能构成的不同二叉搜索树的个数。</span><br><span style="color:blue">$F(i, n)$: 以 $i$ 为根、序列长度为 $n$ 的不同二叉搜索树个数 $(1 \leq i \leq n)$。</span></p><p>可见，$G(n)$ 是我们求解需要的函数。<br>$G(n)$可以从 $F(i, n)$ 得到，而 $F(i, n)$ 又会递归地依赖于 $G(n)$。<br><strong>首先，不同的二叉搜索树的总数 $G(n)$，是对遍历所有 $ i (1 \le i \le n)$ 的 $F(i, n)$ 之和</strong>。换言之：</p><script type="math/tex; mode=display">G(n) = \sum_{i=1}^{n} F(i, n)\qquad \qquad (1)</script><p>对于边界情况，当序列长度为 $1$（只有根）或为 $0$（空树）时，只有一种情况，即：</p><script type="math/tex; mode=display">G(0) = 1, \qquad G(1) = 1</script><p><strong>给定序列 $1 \cdots n$，我们选择数字 $i$ 作为根，则根为 $i$ 的所有二叉搜索树的集合是左子树集合和右子树集合的</strong><span style="color:blue">笛卡尔积(其实就是左子树的种类数乘以右子树的种类数，列举所有的可能性)</span>，对于笛卡尔积中的每个元素，加上根节点之后形成完整的二叉搜索树，如下图所示：</p><p><img src="https://assets.leetcode-cn.com/solution-static/96/96_fig1.png" srcset="/img/loading.gif" alt="fig1"></p><p>举例而言，创建以 3 为根、长度为 7 的不同二叉搜索树，整个序列是 [1,2,3,4,5,6,7]，我们需要从左子序列 [1,2] 构建左子树，从右子序列 [4,5,6,7] 构建右子树，然后将它们组合（即笛卡尔积）。<br><strong>公式化：</strong>不同二叉搜索树的个数表示为 $F(3, 7)$。我们将 $[1,2]$ 构建不同左子树的数量表示为 $G(2)$, 从 $[4,5,6,7]$ 构建不同右子树的数量表示为 $G(4)$，<span style="color:blue">注意： $G(n)$ 和序列的内容无关，只和序列的长度有关。</span>于是，$F(3,7) = G(2) \cdot G(4)$。 因此，我们可以得到以下公式：</p><script type="math/tex; mode=display">F(i, n) = G(i-1) \cdot G(n-i) \qquad  \qquad (2)</script><p>将公式 $(1)$，$(2)$ 结合，可以得到 $G(n)$ 的递归表达式：</p><script type="math/tex; mode=display">G(n) = \sum_{i=1}^{n}G(i-1) \cdot G(n-i) \qquad  \qquad (3)</script><p>至此，我们从小到大计算 $G$ 函数即可，因为 $G(n)$ 的值依赖于 $G(0) \cdots G(n-1)$。</p><p><strong>代码</strong></p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numTrees</span><span class="hljs-params">(self, n)</span>:</span>        <span class="hljs-string">"""</span><span class="hljs-string">        :type n: int</span><span class="hljs-string">        :rtype: int</span><span class="hljs-string">        """</span>        G = [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>)        G[<span class="hljs-number">0</span>], G[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>):                G[i] += G[j<span class="hljs-number">-1</span>] * G[i-j]<span class="hljs-keyword">return</span> G[n]</code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度 : $O(n^2)$，其中 $n$ 表示二叉搜索树的节点个数。$G(n)$ 函数一共有 $n$ 个值需要求解，每次求解需要 $O(n)$ 的时间复杂度，因此总时间复杂度为 $O(n^2)$。</li></ul><p>空间复杂度 : $O(n)$。我们需要 $O(n)$ 的空间存储 $G$ 数组。</p><h2 id="方法二：数学"><a href="#方法二：数学" class="headerlink" title="方法二：数学"></a>方法二：数学</h2><p><strong>思路与算法</strong><br>事实上我们在方法一中推导出的 G(n)函数的值在数学上被称为<a href="https://baike.baidu.com/item/catalan/7605685?fr=aladdin" target="_blank" rel="noopener">卡塔兰数</a> C_n。卡塔兰数更便于计算的定义如下:<br>C_0 = 1, \qquad C_{n+1} = \frac{2(2n+1)}{n+2}C_n<br>C0=1,Cn+1=n+22(2n+1)Cn<br>证明过程可以参考上述文献，此处不再赘述。</p><p><strong>代码</strong></p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numTrees</span><span class="hljs-params">(self, n)</span>:</span>        C = <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, n):            C = C * <span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>)/(i+<span class="hljs-number">2</span>)        <span class="hljs-keyword">return</span> int(C)</code></pre><p><strong>复杂度分析</strong></p><p>时间复杂度 : $O(n)$，其中 $n$ 表示二叉搜索树的节点个数。我们只需要循环遍历一次即可。<br>空间复杂度 : $O(1)$。我们只需要常数空间存放若干变量。</p><p>今天的小菜鸡喝到汤啦~</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/solution/bu-tong-de-er-cha-sou-suo-shu-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;96-不同的二叉搜索树&quot;&gt;&lt;a href=&quot;#96-不同的二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;96.不同的二叉搜索树&quot;&gt;&lt;/a&gt;96.不同的二叉搜索树&lt;/h1&gt;&lt;p&gt;给定一个整数 &lt;em&gt;n&lt;/em&gt;，求以 1 … &lt;em&gt;n&lt;/em
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="动态规划" scheme="https://sulimin-nb.github.io/categories/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="每日一题" scheme="https://sulimin-nb.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>银行营销策略分析</title>
    <link href="https://sulimin-nb.github.io/article/a0f63eb7.html"/>
    <id>https://sulimin-nb.github.io/article/a0f63eb7.html</id>
    <published>2020-07-14T08:24:49.000Z</published>
    <updated>2020-07-15T03:48:57.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、数据说明与预处理"><a href="#1、数据说明与预处理" class="headerlink" title="1、数据说明与预处理"></a>1、数据说明与预处理</h1><p>本文选取的数据集来自于葡萄牙银行机构的营销活动，是以电话访谈的形式，根据访谈结果整合而成的。而电话访谈的最终目的，则是判断该用户是否会认购银行的产品——定期存款（term deposit）。因此，与该数据集对应的任务是分类任务，而分类目标是预测客户是(yes)否(no)认购定期存款，对应了数据集中的特征 <code>y</code> 。</p><p>数据集一共包含了41188个样例和17个特征，它们的含义如下表所示。</p><ul><li><strong>I.客户个人信息</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">含义说明</th></tr></thead><tbody><tr><td style="text-align:center">age</td><td style="text-align:center">年龄</td></tr><tr><td style="text-align:center">job</td><td style="text-align:center">工作</td></tr><tr><td style="text-align:center">marital</td><td style="text-align:center">婚姻状况</td></tr><tr><td style="text-align:center">education</td><td style="text-align:center">受教育程度</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">是否有违约记录</td></tr><tr><td style="text-align:center">housing</td><td style="text-align:center">是否有住房贷款</td></tr><tr><td style="text-align:center">loan</td><td style="text-align:center">是否有个人贷款</td></tr><tr><td style="text-align:center">balance</td><td style="text-align:center">个人存款余额</td></tr></tbody></table></div><ul><li><strong>II.上一次电话营销的记录</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">含义说明</th></tr></thead><tbody><tr><td style="text-align:center">contact</td><td style="text-align:center">联系途径</td></tr><tr><td style="text-align:center">month</td><td style="text-align:center">月份</td></tr><tr><td style="text-align:center">day</td><td style="text-align:center">日期</td></tr><tr><td style="text-align:center">duration</td><td style="text-align:center">持续时间</td></tr></tbody></table></div><ul><li><strong>III.其他记录</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">含义说明</th></tr></thead><tbody><tr><td style="text-align:center">campaign</td><td style="text-align:center">在本次营销周期内与该客户的总通话次数</td></tr><tr><td style="text-align:center">pdays</td><td style="text-align:center">距离上一次通话的时间</td></tr><tr><td style="text-align:center">previous</td><td style="text-align:center">在过去的营销活动中与该客户的总通话次数</td></tr><tr><td style="text-align:center">poutcome</td><td style="text-align:center">上一次营销活动是否成功</td></tr></tbody></table></div><ul><li><strong>IV.目标特征</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">含义说明</th></tr></thead><tbody><tr><td style="text-align:center">y</td><td style="text-align:center">是否认购定期存款</td></tr></tbody></table></div><p>引入包。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> snsplt.rcParams[<span class="hljs-string">'font.sans-serif'</span>]=[<span class="hljs-string">'SimHei'</span>]<span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler, OneHotEncoder, LabelEncoder<span class="hljs-keyword">from</span> sklearn.base <span class="hljs-keyword">import</span> BaseEstimator, TransformerMixin<span class="hljs-keyword">from</span> sklearn.utils <span class="hljs-keyword">import</span> check_array<span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> Pipeline, FeatureUnion<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split,cross_val_score,cross_val_predict<span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler, LabelEncoder<span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<span class="hljs-keyword">from</span> sklearn.neural_network <span class="hljs-keyword">import</span> MLPClassifier<span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> GradientBoostingClassifier<span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> GaussianNB<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve,roc_auc_score,confusion_matrix<span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> sparse<span class="hljs-comment"># init_notebook_mode(connected=True)</span></code></pre><p>导入数据集，将包含所有数据的数据集命令为bank，通过前五行数据简要查看数据构成。</p><pre><code class="hljs python">bank = pd.read_csv(<span class="hljs-string">'./data/bank-full.csv'</span>,sep=<span class="hljs-string">';'</span>)bank.head()</code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">age</th><th style="text-align:right">job</th><th style="text-align:right">marital</th><th style="text-align:right">education</th><th style="text-align:right">default</th><th style="text-align:right">balance</th><th style="text-align:right">housing</th><th style="text-align:right">loan</th><th style="text-align:right">contact</th><th style="text-align:right">day</th><th style="text-align:right">month</th><th style="text-align:right">duration</th><th style="text-align:right">campaign</th><th style="text-align:right">pdays</th><th style="text-align:right">previous</th><th style="text-align:right">poutcome</th><th style="text-align:right">y</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:right">58</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">2143</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">261</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td></tr><tr><td style="text-align:left">1</td><td style="text-align:right">44</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">29</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">151</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td></tr><tr><td style="text-align:left">2</td><td style="text-align:right">33</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">76</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td></tr><tr><td style="text-align:left">3</td><td style="text-align:right">47</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1506</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">92</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td></tr><tr><td style="text-align:left">4</td><td style="text-align:right">33</td><td style="text-align:right">unknown</td><td style="text-align:right">single</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">198</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td></tr></tbody></table></div><p>接下来我们通过 describe() 和 info() 函数查看各列数据的分布情况。 这里我们首先用 describe() 函数分别观察数值型（numeric）特征的分布和类别型（categorical）特征的分布。 下边是数值型（numeric）特征的分布。</p><pre><code class="hljs python">bank.describe() <span class="hljs-comment">#数值型（numeric）特征数据分布</span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">age</th><th style="text-align:right">balance</th><th style="text-align:right">day</th><th style="text-align:right">duration</th><th style="text-align:right">campaign</th><th style="text-align:right">pdays</th><th>previous</th></tr></thead><tbody><tr><td style="text-align:left">count</td><td style="text-align:right">45211.000000</td><td style="text-align:right">45211.000000</td><td style="text-align:right">45211.000000</td><td style="text-align:right">45211.000000</td><td style="text-align:right">45211.000000</td><td style="text-align:right">45211.000000</td><td>45211.000000</td></tr><tr><td style="text-align:left">mean</td><td style="text-align:right">40.936210</td><td style="text-align:right">1362.272058</td><td style="text-align:right">15.806419</td><td style="text-align:right">258.163080</td><td style="text-align:right">2.763841</td><td style="text-align:right">40.197828</td><td>0.580323</td></tr><tr><td style="text-align:left">std</td><td style="text-align:right">10.618762</td><td style="text-align:right">3044.765829</td><td style="text-align:right">8.322476</td><td style="text-align:right">257.527812</td><td style="text-align:right">3.098021</td><td style="text-align:right">100.128746</td><td>2.303441</td></tr><tr><td style="text-align:left">min</td><td style="text-align:right">18.000000</td><td style="text-align:right">-8019.000000</td><td style="text-align:right">1.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">1.000000</td><td style="text-align:right">-1.000000</td><td>0.000000</td></tr><tr><td style="text-align:left">25%</td><td style="text-align:right">33.000000</td><td style="text-align:right">72.000000</td><td style="text-align:right">8.000000</td><td style="text-align:right">103.000000</td><td style="text-align:right">1.000000</td><td style="text-align:right">-1.000000</td><td>0.000000</td></tr><tr><td style="text-align:left">50%</td><td style="text-align:right">39.000000</td><td style="text-align:right">448.000000</td><td style="text-align:right">16.000000</td><td style="text-align:right">180.000000</td><td style="text-align:right">2.000000</td><td style="text-align:right">-1.000000</td><td>0.000000</td></tr><tr><td style="text-align:left">75%</td><td style="text-align:right">48.000000</td><td style="text-align:right">1428.000000</td><td style="text-align:right">21.000000</td><td style="text-align:right">319.000000</td><td style="text-align:right">3.000000</td><td style="text-align:right">-1.000000</td><td>0.000000</td></tr><tr><td style="text-align:left">max</td><td style="text-align:right">95.000000</td><td style="text-align:right">102127.000000</td><td style="text-align:right">31.000000</td><td style="text-align:right">4918.000000</td><td style="text-align:right">63.000000</td><td style="text-align:right">871.000000</td><td>275.000000</td></tr></tbody></table></div><p>接着我们观察类别型（categorical）特征的分布.</p><pre><code class="hljs python">bank.describe(include=[<span class="hljs-string">'O'</span>]) <span class="hljs-comment">#类别型（categorical）特征数据分布</span></code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">job</th><th style="text-align:right">marital</th><th style="text-align:right">education</th><th style="text-align:right">default</th><th style="text-align:right">housing</th><th style="text-align:right">loan</th><th style="text-align:right">contact</th><th style="text-align:right">month</th><th style="text-align:right">poutcome</th><th style="text-align:right">y</th></tr></thead><tbody><tr><td style="text-align:left">count</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td><td style="text-align:right">45211</td></tr><tr><td style="text-align:left">unique</td><td style="text-align:right">12</td><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">2</td><td style="text-align:right">2</td><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">12</td><td style="text-align:right">4</td><td style="text-align:right">2</td></tr><tr><td style="text-align:left">top</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">may</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td></tr><tr><td style="text-align:left">freq</td><td style="text-align:right">9732</td><td style="text-align:right">27214</td><td style="text-align:right">23202</td><td style="text-align:right">44396</td><td style="text-align:right">25130</td><td style="text-align:right">37967</td><td style="text-align:right">29285</td><td style="text-align:right">13766</td><td style="text-align:right">36959</td><td style="text-align:right">39922</td></tr></tbody></table></div><p>下面用info()观察缺失值的情况。</p><pre><code class="hljs python">bank.info()</code></pre><p>输出：</p><pre><code class="hljs scala">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'<span class="hljs-title">&gt;</span></span><span class="hljs-class"><span class="hljs-title">RangeIndex</span></span>: <span class="hljs-number">45211</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">45210</span><span class="hljs-type">Data</span> columns (total <span class="hljs-number">17</span> columns):age          <span class="hljs-number">45211</span> non-<span class="hljs-literal">null</span> int64job          <span class="hljs-number">45211</span> non-<span class="hljs-literal">null</span> <span class="hljs-class"><span class="hljs-keyword">object</span></span><span class="hljs-class"><span class="hljs-title">marital</span>      45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">education</span>    45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">default</span>      45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">balance</span>      45211 <span class="hljs-title">non-null</span> <span class="hljs-title">int64</span></span><span class="hljs-class"><span class="hljs-title">housing</span>      45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">loan</span>         45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">contact</span>      45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">day</span>          45211 <span class="hljs-title">non-null</span> <span class="hljs-title">int64</span></span><span class="hljs-class"><span class="hljs-title">month</span>        45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">duration</span>     45211 <span class="hljs-title">non-null</span> <span class="hljs-title">int64</span></span><span class="hljs-class"><span class="hljs-title">campaign</span>     45211 <span class="hljs-title">non-null</span> <span class="hljs-title">int64</span></span><span class="hljs-class"><span class="hljs-title">pdays</span>        45211 <span class="hljs-title">non-null</span> <span class="hljs-title">int64</span></span><span class="hljs-class"><span class="hljs-title">previous</span>     45211 <span class="hljs-title">non-null</span> <span class="hljs-title">int64</span></span><span class="hljs-class"><span class="hljs-title">poutcome</span>     45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">y</span>            45211 <span class="hljs-title">non-null</span> <span class="hljs-title">object</span></span><span class="hljs-class"><span class="hljs-title">dtypes</span></span>: int64(<span class="hljs-number">7</span>), <span class="hljs-class"><span class="hljs-keyword">object</span>(<span class="hljs-params">10</span>)</span><span class="hljs-class"><span class="hljs-title">memory</span> <span class="hljs-title">usage</span></span>: <span class="hljs-number">5.9</span>+ <span class="hljs-type">MB</span></code></pre><p>通过观察 info() 函数给我们的结果，我们可以看出数据集中不存在缺失值。但是在此数据表中，部分数据以字符串 ‘unknown’ 形式存在于类别型特征里。使用如下代码查看类别型特征中 ‘unknown’ 的个数。</p><pre><code class="hljs python"><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> bank.select_dtypes(include=[<span class="hljs-string">'object'</span>]).columns:  <span class="hljs-comment">#筛选类型为object型数据，统计'unknown'个数</span>    print(col+<span class="hljs-string">':'</span>,bank[bank[col]==<span class="hljs-string">'unknown'</span>][col].count())</code></pre><p>输出：</p><pre><code class="hljs yaml"><span class="hljs-attr">job:</span> <span class="hljs-number">288</span><span class="hljs-attr">marital:</span> <span class="hljs-number">0</span><span class="hljs-attr">education:</span> <span class="hljs-number">1857</span><span class="hljs-attr">default:</span> <span class="hljs-number">0</span><span class="hljs-attr">housing:</span> <span class="hljs-number">0</span><span class="hljs-attr">loan:</span> <span class="hljs-number">0</span><span class="hljs-attr">contact:</span> <span class="hljs-number">13020</span><span class="hljs-attr">month:</span> <span class="hljs-number">0</span><span class="hljs-attr">poutcome:</span> <span class="hljs-number">36959</span><span class="hljs-attr">y:</span> <span class="hljs-number">0</span></code></pre><p>对于 ‘unknown’ 值的处理，我们会在3.1进行分析。<br>我们接下来查看样本类别分布情况。</p><pre><code class="hljs python">bank[<span class="hljs-string">'y'</span>].value_counts()</code></pre><p>输出：</p><pre><code class="hljs yaml"><span class="hljs-literal">no</span>     <span class="hljs-number">39922</span><span class="hljs-literal">yes</span>     <span class="hljs-number">5289</span><span class="hljs-attr">Name:</span> <span class="hljs-string">y,</span> <span class="hljs-attr">dtype:</span> <span class="hljs-string">int64</span></code></pre><pre><code class="hljs python">f, ax = plt.subplots(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>, figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))colors = [<span class="hljs-string">"#FA5858"</span>, <span class="hljs-string">"#64FE2E"</span>]labels =<span class="hljs-string">"no"</span>, <span class="hljs-string">"yes"</span>ax.set_title(<span class="hljs-string">'是否认购定期存款'</span>, fontsize=<span class="hljs-number">16</span>)bank[<span class="hljs-string">"y"</span>].value_counts().plot.pie(explode=[<span class="hljs-number">0</span>,<span class="hljs-number">0.25</span>], autopct=<span class="hljs-string">'%1.2f%%'</span>, ax=ax, shadow=<span class="hljs-literal">True</span>, colors=colors,labels=labels, fontsize=<span class="hljs-number">14</span>, startangle=<span class="hljs-number">25</span>)plt.axis(<span class="hljs-string">'off'</span>)plt.show()</code></pre><h1 id="2、探索性分析"><a href="#2、探索性分析" class="headerlink" title="2、探索性分析"></a>2、探索性分析</h1><h2 id="2-1-数值型特征的分布情况"><a href="#2-1-数值型特征的分布情况" class="headerlink" title="2.1 数值型特征的分布情况"></a>2.1 数值型特征的分布情况</h2><p>我们首先通过DataFrame的 <code>hist()</code> 函数查看每个数值型特征的分布情况。值得一提的是，虽然我们是对整个数据表调用 <code>hist()</code> 函数，但是由于程序本身无法直观的理解类别型特征（因为它们以str形式存储），所以它们不会显示。</p><pre><code class="hljs python">bank.hist(bins=<span class="hljs-number">25</span>, figsize=(<span class="hljs-number">14</span>,<span class="hljs-number">10</span>))plt.show()</code></pre><p><img src="/article/a0f63eb7/输出1.png" srcset="/img/loading.gif" alt="输出1"></p><h2 id="2-2-类别型特征对结果的影响"><a href="#2-2-类别型特征对结果的影响" class="headerlink" title="2.2 类别型特征对结果的影响"></a>2.2 类别型特征对结果的影响</h2><p>接下来我们查看正负样本点的不同之处。我们首先通过调用 <code>barplot()</code> 函数查看受教育程度 <code>education</code> 对结果（是否会定期存款）的影响。观察下图我们可以看出，受过高等教育（tertiary）和中等教育（secondary）的人群比只接受过初等教育的人更容易认购定期存款。</p><pre><code class="hljs python">f, ax = plt.subplots(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>, figsize=(<span class="hljs-number">9</span>,<span class="hljs-number">7</span>))palette = [<span class="hljs-string">"#64FE2E"</span>, <span class="hljs-string">"#FA5858"</span>]sns.barplot(x=<span class="hljs-string">"education"</span>, y=<span class="hljs-string">"balance"</span>, hue=<span class="hljs-string">"y"</span>, data=bank, palette=palette, estimator=<span class="hljs-keyword">lambda</span> x: len(x) / len(bank) * <span class="hljs-number">100</span>)<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> ax.patches:    ax.annotate(<span class="hljs-string">'&#123;:.2f&#125;%'</span>.format(p.get_height()),(p.get_x() * <span class="hljs-number">1.02</span>, p.get_height() * <span class="hljs-number">1.02</span>),fontsize=<span class="hljs-number">12</span>)    ax.set_xticklabels(bank[<span class="hljs-string">"education"</span>].unique(), rotation=<span class="hljs-number">0</span>, rotation_mode=<span class="hljs-string">"anchor"</span>,fontsize=<span class="hljs-number">15</span>)ax.set_title(<span class="hljs-string">"受教育程度与结果（是否认购定期存款）的关系"</span>,fontsize=<span class="hljs-number">20</span>)ax.set_xlabel(<span class="hljs-string">"受教育程度"</span>,fontsize=<span class="hljs-number">15</span>)ax.set_ylabel(<span class="hljs-string">"(%)"</span>,fontsize=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="/article/a0f63eb7/输出2.png" srcset="/img/loading.gif" alt="输出2"></p><p>观察年龄随职业的分布，可以看出职业为 retired、self-employed两类左右两侧的分布有较明显的差别。在退休人群(retired)中，年龄越大的人越容易购买产品；个体经营(self-employed)群体中，年轻化的人更容易购买产品；观察年龄岁婚姻状况的分布，可以看出结婚的人(married)、离婚的人(divorced)相对于单身的人在是否会认购定期存款方面分布有明显的差异，前两类群体在高龄中越容易购买产品。</p><h2 id="2-3-特征间的相关性"><a href="#2-3-特征间的相关性" class="headerlink" title="2.3 特征间的相关性"></a>2.3 特征间的相关性</h2><p>接下来我们通过关系矩阵查看各特征之间的关系，如下图所示。</p><pre><code class="hljs python">fig, ax = plt.subplots(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">8</span>))bank[<span class="hljs-string">'y'</span>] = LabelEncoder().fit_transform(bank[<span class="hljs-string">'y'</span>])numeric_bank = bank.select_dtypes(exclude=<span class="hljs-string">"object"</span>)corr_numeric = numeric_bank.corr()<span class="hljs-comment">#关系矩阵，以矩阵形式存储</span>sns.heatmap(corr_numeric, annot=<span class="hljs-literal">True</span>, vmax=<span class="hljs-number">1</span>, vmin=<span class="hljs-number">-1</span>, cmap=<span class="hljs-string">"Blues"</span>,annot_kws=&#123;<span class="hljs-string">"size"</span>:<span class="hljs-number">15</span>&#125;)<span class="hljs-comment">#热力图，即关系矩阵</span>ax.set_title(<span class="hljs-string">"Correlation Matrix"</span>, fontsize=<span class="hljs-number">24</span>)ax.tick_params(axis=<span class="hljs-string">'y'</span>,labelsize=<span class="hljs-number">11.5</span>)ax.tick_params(axis=<span class="hljs-string">'x'</span>,labelsize=<span class="hljs-number">11.5</span>)plt.show()</code></pre><p><img src="/article/a0f63eb7/输出3.png" srcset="/img/loading.gif" alt="输出3"></p><p>观察上图我们可以看出通话时长（ <code>duration</code> ）与结果（ <code>y</code> ）相关性很高。这也可以很通俗地理解，如果通话时长 = 0，则y =0；如果通话时长越长，则客户越有可能接受银行的营销活动而认购定期存款（如下图所示）。</p><p>但是在实际中，这样做会有一个很大的问题，因为在执行通话之前你并不知道 <code>duration</code> 会是多久。但是，在通话结束后，显然你就会知道客户的意愿是认购还是拒绝。因此，应在模型训练前将这一特征删除。在下图，我们把 <code>duration</code> 按<strong>低于或高于其平均值</strong>分成了 <strong>below_average</strong> 和 <strong>over_average</strong> 两类，探究这两种情况下人们购买意愿的差异。根据我们的假设，属于 <strong>below_average</strong> 的人群中大多数人不会认购定期存款，属于 <strong>over_average</strong> 的人群中大多数人会选择认购定期存款。下方的代码生成的图像验证了我们的猜想。</p><pre><code class="hljs python">sns.set(rc=&#123;<span class="hljs-string">'figure.figsize'</span>:(<span class="hljs-number">11.7</span>,<span class="hljs-number">8.27</span>)&#125;)sns.set_style(<span class="hljs-string">'whitegrid'</span>)avg_duration = bank[<span class="hljs-string">'duration'</span>].mean()<span class="hljs-comment">#建立一个新特征以区分大于duration平均值的duration和小于均值的duration</span>bank[<span class="hljs-string">"duration_status"</span>] = np.nanlst = [bank]<span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> lst:    col.loc[col[<span class="hljs-string">"duration"</span>] &lt; avg_duration, <span class="hljs-string">"duration_status"</span>] = <span class="hljs-string">"below_average"</span>    col.loc[col[<span class="hljs-string">"duration"</span>] &gt; avg_duration, <span class="hljs-string">"duration_status"</span>] = <span class="hljs-string">"above_average"</span><span class="hljs-comment">#pd.crosstab另外一种分析双变量的方式,通过它可以得到两个变量之间的交叉信息，并作图。</span>pct_term = pd.crosstab(bank[<span class="hljs-string">'duration_status'</span>], bank[<span class="hljs-string">'y'</span>]).apply(<span class="hljs-keyword">lambda</span> r: round(r/r.sum(), <span class="hljs-number">2</span>) * <span class="hljs-number">100</span>, axis=<span class="hljs-number">1</span>)ax = pct_term.plot(kind=<span class="hljs-string">'bar'</span>, stacked=<span class="hljs-literal">False</span>, cmap=<span class="hljs-string">'RdBu'</span>)ax.set_xticklabels([<span class="hljs-string">'below_average'</span>,<span class="hljs-string">'over_average'</span>], rotation=<span class="hljs-number">0</span>, rotation_mode=<span class="hljs-string">"anchor"</span>,fontsize=<span class="hljs-number">18</span>)plt.title(<span class="hljs-string">"The Influence of Duration"</span>, fontsize=<span class="hljs-number">18</span>)plt.xlabel(<span class="hljs-string">"Duration Status"</span>, fontsize=<span class="hljs-number">18</span>);plt.ylabel(<span class="hljs-string">"Percentage (%)"</span>, fontsize=<span class="hljs-number">18</span>)<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> ax.patches:    ax.annotate(<span class="hljs-string">'&#123;:.2f&#125;%'</span>.format(p.get_height()), (p.get_x() , p.get_height() * <span class="hljs-number">1.02</span>))plt.show()bank.drop([<span class="hljs-string">'duration_status'</span>], axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)</code></pre><p><img src="/article/a0f63eb7/输出4.png" srcset="/img/loading.gif" alt="输出4"></p><p>确实， <strong>over_average</strong> 的情况下就已经有95%的人选择认购定期存款了，这印证了我们的猜想。但是在本例中，我们不对<code>duration</code>做删除处理。大家可以尝试删除此特征执行同样的步骤，根据<a href="#5、总结">总结</a>中最后一段提出的分别应用这两个模型进行预测的策略，应用到实际情况中。</p><h1 id="3、数据预处理与特征工程"><a href="#3、数据预处理与特征工程" class="headerlink" title="3、数据预处理与特征工程"></a>3、数据预处理与特征工程</h1><h2 id="3-1-缺失值处理"><a href="#3-1-缺失值处理" class="headerlink" title="3.1 缺失值处理"></a>3.1 缺失值处理</h2><p>在本文的开始我们提到过，虽然对所有数值型特征不存在缺失值，但是类别型特征中有以 <code>&#39;unknown&#39;</code> 形式存在的值，它们的统计结果如下，代码已在文章开头给出。</p><div class="table-container"><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">unknown值个数</th></tr></thead><tbody><tr><td style="text-align:center">job</td><td style="text-align:center">288</td></tr><tr><td style="text-align:center">marital</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">education</td><td style="text-align:center">1857</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">housing</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">loan</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">contact</td><td style="text-align:center">13020</td></tr><tr><td style="text-align:center">month</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">poutcom</td><td style="text-align:center">36959</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">0</td></tr></tbody></table></div><p>缺失值处理通常有如下的方法：</p><ol><li>对于 <code>&#39;unknown&#39;</code> 值数量较少的特征，包括<code>job</code>和<code>education</code>，删除这些特征是缺失值(<code>&#39;unknown&#39;</code>)的行；</li><li>如果预计该特征对于学习模型效果影响不大，而且在此例中缺失值都是类别型数据，可以对(<code>&#39;unknown&#39;</code>)值赋众数；</li><li>可以使用数据完整的行作为训练集，以此来预测缺失值，特征<code>concact</code>，<code>poutcome</code>的缺失值可以采取此法；</li><li>我们也可以不处理它，使其保留 <code>&#39;unknown&#39;</code> 的形式作为该特征的一种可能取值。</li></ol><p>这里我们采取策略4，不进行处理。原因可以参考下一行代码，例如上一次营销活动的结果(<code>poutcome</code>)这一特征，大部分都是 <code>&#39;unknown&#39;</code> 值，其原因可以归结于这些客户没有经历上一次营销活动，是第一次参加本活动。当然，我们也可以结合策略1、3进行处理。</p><pre><code class="hljs python">bank[<span class="hljs-string">'poutcome'</span>].value_counts()</code></pre><p>输出：</p><pre><code class="hljs subunit">unknown    36959<span class="hljs-keyword">failure     </span>4901other       1840<span class="hljs-keyword">success     </span>1511Name: poutcome, dtype: int64</code></pre><h2 id="3-2-类型转换"><a href="#3-2-类型转换" class="headerlink" title="3.2 类型转换"></a>3.2 类型转换</h2><p>我们知道原数据表中有数值型和类别型两种数据类型，但是机器学习模型只能读取数值型数据，因此我们需要进行类型的转换。通常我们可以先通过 <code>LabelEncoder</code> 再通过 <code>OneHotEncoder</code> 将str型数据转换成OneHot编码。但是这样每次只能操作一个类别型数据，函数写起来会比较麻烦。</p><p>在最新的开发者版本sklearn中提供了 <code>CategoricalEncoder</code>，它的好处是可以直接转换多列类别型数据。虽然当前版本没有提供，但是下面的代码块中供 了 <code>CategoricalEncoder</code> 的方法，只需要运行即可。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoricalEncoder</span><span class="hljs-params">(BaseEstimator, TransformerMixin)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, encoding=<span class="hljs-string">'onehot'</span>, categories=<span class="hljs-string">'auto'</span>, dtype=np.float64,</span></span><span class="hljs-function"><span class="hljs-params">                 handle_unknown=<span class="hljs-string">'error'</span>)</span>:</span>        self.encoding = encoding        self.categories = categories        self.dtype = dtype        self.handle_unknown = handle_unknown    <span class="hljs-comment">#fit方法与其他Encoder的使用方法一样</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(self, X, y=None)</span>:</span>        <span class="hljs-string">"""Fit the CategoricalEncoder to X.</span><span class="hljs-string">        Parameters</span><span class="hljs-string">        ----------</span><span class="hljs-string">        X : array-like, shape [n_samples, n_feature]</span><span class="hljs-string">            The data to determine the categories of each feature.</span><span class="hljs-string">        Returns</span><span class="hljs-string">        -------</span><span class="hljs-string">        self</span><span class="hljs-string">        """</span>        <span class="hljs-comment">#编码有三种方式，按顺序分别为稀疏形式的独热编码，独热编码和序列编码。</span>        <span class="hljs-keyword">if</span> self.encoding <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">'onehot'</span>, <span class="hljs-string">'onehot-dense'</span>, <span class="hljs-string">'ordinal'</span>]:            template = (<span class="hljs-string">"encoding should be either 'onehot', 'onehot-dense' "</span>                        <span class="hljs-string">"or 'ordinal', got %s"</span>)            <span class="hljs-keyword">raise</span> ValueError(template % self.handle_unknown)        <span class="hljs-keyword">if</span> self.handle_unknown <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">'error'</span>, <span class="hljs-string">'ignore'</span>]:            template = (<span class="hljs-string">"handle_unknown should be either 'error' or "</span>                        <span class="hljs-string">"'ignore', got %s"</span>)            <span class="hljs-keyword">raise</span> ValueError(template % self.handle_unknown)        <span class="hljs-keyword">if</span> self.encoding == <span class="hljs-string">'ordinal'</span> <span class="hljs-keyword">and</span> self.handle_unknown == <span class="hljs-string">'ignore'</span>:            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">"handle_unknown='ignore' is not supported for"</span>                             <span class="hljs-string">" encoding='ordinal'"</span>)        <span class="hljs-comment">#处理特征</span>        X = check_array(X, dtype=np.object, accept_sparse=<span class="hljs-string">'csc'</span>, copy=<span class="hljs-literal">True</span>)        n_samples, n_features = X.shape        self._label_encoders_ = [LabelEncoder() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n_features)]        <span class="hljs-comment">#CategoricalEncoder的具体思路如下：</span>        <span class="hljs-comment">#先用LabelEncoder()转换成序列数据，再用OneHotEncoder()增添新的列转换成独热编码</span>        <span class="hljs-comment">#在fit阶段，只提取每一列的类别信息，为transform阶段做准备。</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n_features):            le = self._label_encoders_[i]            Xi = X[:, i]            <span class="hljs-keyword">if</span> self.categories == <span class="hljs-string">'auto'</span>:                le.fit(Xi)            <span class="hljs-keyword">else</span>:                valid_mask = np.in1d(Xi, self.categories[i])                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> np.all(valid_mask):                    <span class="hljs-keyword">if</span> self.handle_unknown == <span class="hljs-string">'error'</span>:                        diff = np.unique(Xi[~valid_mask])                        msg = (<span class="hljs-string">"Found unknown categories &#123;0&#125; in column &#123;1&#125;"</span>                               <span class="hljs-string">" during fit"</span>.format(diff, i))                        <span class="hljs-keyword">raise</span> ValueError(msg)                le.classes_ = np.array(np.sort(self.categories[i]))        self.categories_ = [le.classes_ <span class="hljs-keyword">for</span> le <span class="hljs-keyword">in</span> self._label_encoders_]        <span class="hljs-keyword">return</span> self    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform</span><span class="hljs-params">(self, X)</span>:</span>        <span class="hljs-string">"""Transform X using one-hot encoding.</span><span class="hljs-string">        Parameters</span><span class="hljs-string">        ----------</span><span class="hljs-string">        X : array-like, shape [n_samples, n_features]</span><span class="hljs-string">            The data to encode.</span><span class="hljs-string">        Returns</span><span class="hljs-string">        -------</span><span class="hljs-string">        X_out : sparse matrix or a 2-d array</span><span class="hljs-string">            Transformed input.</span><span class="hljs-string">        """</span>        <span class="hljs-comment">#处理特征</span>        X = check_array(X, accept_sparse=<span class="hljs-string">'csc'</span>, dtype=np.object, copy=<span class="hljs-literal">True</span>)        n_samples, n_features = X.shape        X_int = np.zeros_like(X, dtype=np.int)        X_mask = np.ones_like(X, dtype=np.bool)        <span class="hljs-comment">#转换类别型变量到独热编码的步骤</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n_features):            valid_mask = np.in1d(X[:, i], self.categories_[i])            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> np.all(valid_mask):                <span class="hljs-keyword">if</span> self.handle_unknown == <span class="hljs-string">'error'</span>:                    diff = np.unique(X[~valid_mask, i])                    msg = (<span class="hljs-string">"Found unknown categories &#123;0&#125; in column &#123;1&#125;"</span>                           <span class="hljs-string">" during transform"</span>.format(diff, i))                    <span class="hljs-keyword">raise</span> ValueError(msg)                <span class="hljs-keyword">else</span>:                    <span class="hljs-comment"># Set the problematic rows to an acceptable value and</span>                    <span class="hljs-comment"># continue `The rows are marked `X_mask` and will be</span>                    <span class="hljs-comment"># removed later.</span>                    X_mask[:, i] = valid_mask                    X[:, i][~valid_mask] = self.categories_[i][<span class="hljs-number">0</span>]            X_int[:, i] = self._label_encoders_[i].transform(X[:, i])        <span class="hljs-comment">#对于序列编码，直接处理后返回</span>        <span class="hljs-keyword">if</span> self.encoding == <span class="hljs-string">'ordinal'</span>:            <span class="hljs-keyword">return</span> X_int.astype(self.dtype, copy=<span class="hljs-literal">False</span>)        <span class="hljs-comment">#以下是处理类别型数据的步骤</span>        mask = X_mask.ravel()        n_values = [cats.shape[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> cats <span class="hljs-keyword">in</span> self.categories_]        n_values = np.array([<span class="hljs-number">0</span>] + n_values)        indices = np.cumsum(n_values)        column_indices = (X_int + indices[:<span class="hljs-number">-1</span>]).ravel()[mask]        row_indices = np.repeat(np.arange(n_samples, dtype=np.int32),                                n_features)[mask]        data = np.ones(n_samples * n_features)[mask]        <span class="hljs-comment">#默认是以稀疏矩阵的形式输出，节约内存</span>        out = sparse.csc_matrix((data, (row_indices, column_indices)),                                shape=(n_samples, indices[<span class="hljs-number">-1</span>]),                                dtype=self.dtype).tocsr()        <span class="hljs-comment">#将稀疏矩阵转换成普通矩阵</span>        <span class="hljs-keyword">if</span> self.encoding == <span class="hljs-string">'onehot-dense'</span>:            <span class="hljs-keyword">return</span> out.toarray()        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> out</code></pre><pre><code class="hljs python">bank[[<span class="hljs-string">'job'</span>,<span class="hljs-string">'marital'</span>]].head(<span class="hljs-number">5</span>)</code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">job</th><th style="text-align:right">marital</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:right">management</td><td style="text-align:right">married</td></tr><tr><td style="text-align:left">1</td><td style="text-align:right">technician</td><td style="text-align:right">single</td></tr><tr><td style="text-align:left">2</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td></tr><tr><td style="text-align:left">3</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td></tr><tr><td style="text-align:left">4</td><td style="text-align:right">unknown</td><td style="text-align:right">single</td></tr></tbody></table></div><pre><code class="hljs python">a = CategoricalEncoder().fit_transform(bank[[<span class="hljs-string">'job'</span>,<span class="hljs-string">'marital'</span>]])a.toarray()</code></pre><p>输出：</p><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, ..., <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, ..., <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],       ...,       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, ..., <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, ..., <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, ..., <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>]])</code></pre><pre><code class="hljs python">a.shape</code></pre><p>输出：</p><pre><code class="hljs angelscript">(<span class="hljs-number">45211</span>, <span class="hljs-number">15</span>)</code></pre><pre><code class="hljs python">print(bank)</code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">age</th><th style="text-align:right">job</th><th style="text-align:right">marital</th><th style="text-align:right">education</th><th style="text-align:right">default</th><th style="text-align:right">balance</th><th style="text-align:right">housing</th><th style="text-align:right">loan</th><th style="text-align:right">contact</th><th style="text-align:right">day</th><th style="text-align:right">month</th><th style="text-align:right">duration</th><th style="text-align:right">campaign</th><th style="text-align:right">pdays</th><th style="text-align:right">previous</th><th style="text-align:right">poutcome</th><th>y</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:right">58</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">2143</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">261</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">1</td><td style="text-align:right">44</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">29</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">151</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">2</td><td style="text-align:right">33</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">76</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">3</td><td style="text-align:right">47</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1506</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">92</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">4</td><td style="text-align:right">33</td><td style="text-align:right">unknown</td><td style="text-align:right">single</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">198</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">5</td><td style="text-align:right">35</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">231</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">139</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">6</td><td style="text-align:right">28</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">447</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">217</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">7</td><td style="text-align:right">42</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">divorced</td><td style="text-align:right">tertiary</td><td style="text-align:right">yes</td><td style="text-align:right">2</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">380</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">8</td><td style="text-align:right">58</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">121</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">50</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">9</td><td style="text-align:right">43</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">593</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">55</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">10</td><td style="text-align:right">41</td><td style="text-align:right">admin.</td><td style="text-align:right">divorced</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">270</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">222</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">11</td><td style="text-align:right">29</td><td style="text-align:right">admin.</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">390</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">137</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">12</td><td style="text-align:right">53</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">6</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">517</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">13</td><td style="text-align:right">58</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">71</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">71</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">14</td><td style="text-align:right">57</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">162</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">174</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">15</td><td style="text-align:right">51</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">229</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">353</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">16</td><td style="text-align:right">45</td><td style="text-align:right">admin.</td><td style="text-align:right">single</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">13</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">98</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">17</td><td style="text-align:right">57</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">52</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">38</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">18</td><td style="text-align:right">60</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">60</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">219</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">19</td><td style="text-align:right">33</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">0</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">54</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">20</td><td style="text-align:right">28</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">723</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">262</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">21</td><td style="text-align:right">56</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">779</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">164</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">22</td><td style="text-align:right">32</td><td style="text-align:right">blue-collar</td><td style="text-align:right">single</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">23</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">160</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">23</td><td style="text-align:right">25</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">50</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">342</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">24</td><td style="text-align:right">40</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">0</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">181</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">25</td><td style="text-align:right">44</td><td style="text-align:right">admin.</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">-372</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">172</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">26</td><td style="text-align:right">39</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">255</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">296</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">27</td><td style="text-align:right">52</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">113</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">127</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">28</td><td style="text-align:right">46</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">-246</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">255</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">29</td><td style="text-align:right">36</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">265</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">348</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td>…</td></tr><tr><td style="text-align:left">45181</td><td style="text-align:right">46</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">6879</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">15</td><td style="text-align:right">nov</td><td style="text-align:right">74</td><td style="text-align:right">2</td><td style="text-align:right">118</td><td style="text-align:right">3</td><td style="text-align:right">failure</td><td>0</td></tr><tr><td style="text-align:left">45182</td><td style="text-align:right">34</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">133</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">15</td><td style="text-align:right">nov</td><td style="text-align:right">401</td><td style="text-align:right">2</td><td style="text-align:right">187</td><td style="text-align:right">5</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45183</td><td style="text-align:right">70</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">324</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">15</td><td style="text-align:right">nov</td><td style="text-align:right">78</td><td style="text-align:right">1</td><td style="text-align:right">96</td><td style="text-align:right">7</td><td style="text-align:right">success</td><td>0</td></tr><tr><td style="text-align:left">45184</td><td style="text-align:right">63</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1495</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">138</td><td style="text-align:right">1</td><td style="text-align:right">22</td><td style="text-align:right">5</td><td style="text-align:right">success</td><td>0</td></tr><tr><td style="text-align:left">45185</td><td style="text-align:right">60</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">4256</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">200</td><td style="text-align:right">1</td><td style="text-align:right">92</td><td style="text-align:right">4</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45186</td><td style="text-align:right">59</td><td style="text-align:right">unknown</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1500</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">280</td><td style="text-align:right">1</td><td style="text-align:right">104</td><td style="text-align:right">2</td><td style="text-align:right">failure</td><td>0</td></tr><tr><td style="text-align:left">45187</td><td style="text-align:right">32</td><td style="text-align:right">services</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1168</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">411</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45188</td><td style="text-align:right">29</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">703</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">236</td><td style="text-align:right">1</td><td style="text-align:right">550</td><td style="text-align:right">2</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45189</td><td style="text-align:right">25</td><td style="text-align:right">services</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">199</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">173</td><td style="text-align:right">1</td><td style="text-align:right">92</td><td style="text-align:right">5</td><td style="text-align:right">failure</td><td>0</td></tr><tr><td style="text-align:left">45190</td><td style="text-align:right">32</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">136</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">206</td><td style="text-align:right">1</td><td style="text-align:right">188</td><td style="text-align:right">3</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45191</td><td style="text-align:right">75</td><td style="text-align:right">retired</td><td style="text-align:right">divorced</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">3810</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">262</td><td style="text-align:right">1</td><td style="text-align:right">183</td><td style="text-align:right">1</td><td style="text-align:right">failure</td><td>1</td></tr><tr><td style="text-align:left">45192</td><td style="text-align:right">29</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">765</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">238</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45193</td><td style="text-align:right">28</td><td style="text-align:right">self-employed</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">159</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">449</td><td style="text-align:right">2</td><td style="text-align:right">33</td><td style="text-align:right">4</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45194</td><td style="text-align:right">59</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">138</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">162</td><td style="text-align:right">2</td><td style="text-align:right">187</td><td style="text-align:right">5</td><td style="text-align:right">failure</td><td>0</td></tr><tr><td style="text-align:left">45195</td><td style="text-align:right">68</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1146</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">212</td><td style="text-align:right">1</td><td style="text-align:right">187</td><td style="text-align:right">6</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45196</td><td style="text-align:right">25</td><td style="text-align:right">student</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">358</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">330</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45197</td><td style="text-align:right">36</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1511</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">270</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45198</td><td style="text-align:right">37</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">1428</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">333</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">45199</td><td style="text-align:right">34</td><td style="text-align:right">blue-collar</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1475</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">1166</td><td style="text-align:right">3</td><td style="text-align:right">530</td><td style="text-align:right">12</td><td style="text-align:right">other</td><td>0</td></tr><tr><td style="text-align:left">45200</td><td style="text-align:right">38</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">557</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">1556</td><td style="text-align:right">4</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45201</td><td style="text-align:right">53</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">583</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">226</td><td style="text-align:right">1</td><td style="text-align:right">184</td><td style="text-align:right">4</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45202</td><td style="text-align:right">34</td><td style="text-align:right">admin.</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">557</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">224</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45203</td><td style="text-align:right">23</td><td style="text-align:right">student</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">113</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">266</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45204</td><td style="text-align:right">73</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2850</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">300</td><td style="text-align:right">1</td><td style="text-align:right">40</td><td style="text-align:right">8</td><td style="text-align:right">failure</td><td>1</td></tr><tr><td style="text-align:left">45205</td><td style="text-align:right">25</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">505</td><td style="text-align:right">no</td><td style="text-align:right">yes</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">386</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45206</td><td style="text-align:right">51</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">825</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">977</td><td style="text-align:right">3</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45207</td><td style="text-align:right">71</td><td style="text-align:right">retired</td><td style="text-align:right">divorced</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">1729</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">456</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>1</td></tr><tr><td style="text-align:left">45208</td><td style="text-align:right">72</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">5715</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">1127</td><td style="text-align:right">5</td><td style="text-align:right">184</td><td style="text-align:right">3</td><td style="text-align:right">success</td><td>1</td></tr><tr><td style="text-align:left">45209</td><td style="text-align:right">57</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">668</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">telephone</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">508</td><td style="text-align:right">4</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td>0</td></tr><tr><td style="text-align:left">45210</td><td style="text-align:right">37</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2971</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">361</td><td style="text-align:right">2</td><td style="text-align:right">188</td><td style="text-align:right">11</td><td style="text-align:right">other</td><td>0</td></tr></tbody></table></div><p>45211 rows × 17 columns</p><pre><code class="hljs python"><span class="hljs-comment">#DataFrameSelector类的作用是从DataFrame中选取特定的列，以便后续pipeline的便捷性。</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataFrameSelector</span><span class="hljs-params">(BaseEstimator, TransformerMixin)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, attribute_names)</span>:</span>        self.attribute_names = attribute_names    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(self, X, y=None)</span>:</span>        <span class="hljs-keyword">return</span> self    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform</span><span class="hljs-params">(self, X)</span>:</span>        <span class="hljs-keyword">return</span> X[self.attribute_names]</code></pre><p>Python的 <code>sklearn.pipeline.Pipeline()</code> 函数可以把多个“处理数据的节点”按顺序打包在一起，数据在前一个节点处理之后的结果，转到下一个节点处理。当训练样本数据送进 <code>Pipeline</code> 进行处理时， 它会逐个调用节点的 <code>fit()</code> 和 <code>transform()</code> 方法，然后用最后一个节点的 <code>fit()</code> 方法来拟合数据。</p><p>对于数值型特征，我们对它用 <code>StandardScaler()</code> 进行标准化，对于类别型特征，我们用 <code>CategoricalEncoder(encoding=&#39;onehot-dense&#39;)</code> 进行OneHot编码。</p><pre><code class="hljs python"><span class="hljs-comment"># 制作管道</span><span class="hljs-comment"># #对数值型特征处理</span>numerical_pipeline = Pipeline([    (<span class="hljs-string">"select_numeric"</span>, DataFrameSelector([<span class="hljs-string">"age"</span>, <span class="hljs-string">"balance"</span>, <span class="hljs-string">"day"</span>, <span class="hljs-string">"campaign"</span>, <span class="hljs-string">"pdays"</span>, <span class="hljs-string">"previous"</span>,<span class="hljs-string">"duration"</span>])),    (<span class="hljs-string">"std_scaler"</span>, StandardScaler()),])<span class="hljs-comment">#对类别型特征处理</span>categorical_pipeline = Pipeline([    (<span class="hljs-string">"select_cat"</span>, DataFrameSelector([<span class="hljs-string">"job"</span>, <span class="hljs-string">"education"</span>, <span class="hljs-string">"marital"</span>, <span class="hljs-string">"default"</span>, <span class="hljs-string">"housing"</span>, <span class="hljs-string">"loan"</span>, <span class="hljs-string">"contact"</span>, <span class="hljs-string">"month"</span>,<span class="hljs-string">"poutcome"</span>])),    (<span class="hljs-string">"cat_encoder"</span>, CategoricalEncoder(encoding=<span class="hljs-string">'onehot-dense'</span>))])<span class="hljs-comment">#统一管道</span>preprocess_pipeline = FeatureUnion(transformer_list=[        (<span class="hljs-string">"numerical_pipeline"</span>, numerical_pipeline),        (<span class="hljs-string">"categorical_pipeline"</span>, categorical_pipeline),    ])</code></pre><h1 id="4、模型训练"><a href="#4、模型训练" class="headerlink" title="4、模型训练"></a>4、模型训练</h1><h2 id="4-1-数据集划分"><a href="#4-1-数据集划分" class="headerlink" title="4.1 数据集划分"></a>4.1 数据集划分</h2><pre><code class="hljs python"><span class="hljs-comment"># 划分X和y，以及训练集与测试集</span>X=bank.drop([<span class="hljs-string">'y'</span>], axis=<span class="hljs-number">1</span>)y=bank[<span class="hljs-string">'y'</span>]print(X)</code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">age</th><th style="text-align:right">job</th><th style="text-align:right">marital</th><th style="text-align:right">education</th><th style="text-align:right">default</th><th style="text-align:right">balance</th><th style="text-align:right">housing</th><th style="text-align:right">loan</th><th style="text-align:right">contact</th><th style="text-align:right">day</th><th style="text-align:right">month</th><th style="text-align:right">duration</th><th style="text-align:right">campaign</th><th style="text-align:right">pdays</th><th style="text-align:right">previous</th><th>poutcome</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:right">58</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">2143</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">261</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">1</td><td style="text-align:right">44</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">29</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">151</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">2</td><td style="text-align:right">33</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">76</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">3</td><td style="text-align:right">47</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1506</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">92</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">4</td><td style="text-align:right">33</td><td style="text-align:right">unknown</td><td style="text-align:right">single</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">198</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">5</td><td style="text-align:right">35</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">231</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">139</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">6</td><td style="text-align:right">28</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">447</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">217</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">7</td><td style="text-align:right">42</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">divorced</td><td style="text-align:right">tertiary</td><td style="text-align:right">yes</td><td style="text-align:right">2</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">380</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">8</td><td style="text-align:right">58</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">121</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">50</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">9</td><td style="text-align:right">43</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">593</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">55</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">10</td><td style="text-align:right">41</td><td style="text-align:right">admin.</td><td style="text-align:right">divorced</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">270</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">222</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">11</td><td style="text-align:right">29</td><td style="text-align:right">admin.</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">390</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">137</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">12</td><td style="text-align:right">53</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">6</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">517</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">13</td><td style="text-align:right">58</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">71</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">71</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">14</td><td style="text-align:right">57</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">162</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">174</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">15</td><td style="text-align:right">51</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">229</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">353</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">16</td><td style="text-align:right">45</td><td style="text-align:right">admin.</td><td style="text-align:right">single</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">13</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">98</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">17</td><td style="text-align:right">57</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">52</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">38</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">18</td><td style="text-align:right">60</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">60</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">219</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">19</td><td style="text-align:right">33</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">0</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">54</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">20</td><td style="text-align:right">28</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">723</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">262</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">21</td><td style="text-align:right">56</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">779</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">164</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">22</td><td style="text-align:right">32</td><td style="text-align:right">blue-collar</td><td style="text-align:right">single</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">23</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">160</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">23</td><td style="text-align:right">25</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">50</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">342</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">24</td><td style="text-align:right">40</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">0</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">181</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">25</td><td style="text-align:right">44</td><td style="text-align:right">admin.</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">-372</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">172</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">26</td><td style="text-align:right">39</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">255</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">296</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">27</td><td style="text-align:right">52</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">113</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">127</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">28</td><td style="text-align:right">46</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">-246</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">255</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">29</td><td style="text-align:right">36</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">265</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">348</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td style="text-align:right">…</td><td>…</td></tr><tr><td style="text-align:left">45181</td><td style="text-align:right">46</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">6879</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">15</td><td style="text-align:right">nov</td><td style="text-align:right">74</td><td style="text-align:right">2</td><td style="text-align:right">118</td><td style="text-align:right">3</td><td>failure</td></tr><tr><td style="text-align:left">45182</td><td style="text-align:right">34</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">133</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">15</td><td style="text-align:right">nov</td><td style="text-align:right">401</td><td style="text-align:right">2</td><td style="text-align:right">187</td><td style="text-align:right">5</td><td>success</td></tr><tr><td style="text-align:left">45183</td><td style="text-align:right">70</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">324</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">15</td><td style="text-align:right">nov</td><td style="text-align:right">78</td><td style="text-align:right">1</td><td style="text-align:right">96</td><td style="text-align:right">7</td><td>success</td></tr><tr><td style="text-align:left">45184</td><td style="text-align:right">63</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1495</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">138</td><td style="text-align:right">1</td><td style="text-align:right">22</td><td style="text-align:right">5</td><td>success</td></tr><tr><td style="text-align:left">45185</td><td style="text-align:right">60</td><td style="text-align:right">services</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">4256</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">200</td><td style="text-align:right">1</td><td style="text-align:right">92</td><td style="text-align:right">4</td><td>success</td></tr><tr><td style="text-align:left">45186</td><td style="text-align:right">59</td><td style="text-align:right">unknown</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1500</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">280</td><td style="text-align:right">1</td><td style="text-align:right">104</td><td style="text-align:right">2</td><td>failure</td></tr><tr><td style="text-align:left">45187</td><td style="text-align:right">32</td><td style="text-align:right">services</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1168</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">411</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45188</td><td style="text-align:right">29</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">703</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">236</td><td style="text-align:right">1</td><td style="text-align:right">550</td><td style="text-align:right">2</td><td>success</td></tr><tr><td style="text-align:left">45189</td><td style="text-align:right">25</td><td style="text-align:right">services</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">199</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">173</td><td style="text-align:right">1</td><td style="text-align:right">92</td><td style="text-align:right">5</td><td>failure</td></tr><tr><td style="text-align:left">45190</td><td style="text-align:right">32</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">136</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">206</td><td style="text-align:right">1</td><td style="text-align:right">188</td><td style="text-align:right">3</td><td>success</td></tr><tr><td style="text-align:left">45191</td><td style="text-align:right">75</td><td style="text-align:right">retired</td><td style="text-align:right">divorced</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">3810</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">262</td><td style="text-align:right">1</td><td style="text-align:right">183</td><td style="text-align:right">1</td><td>failure</td></tr><tr><td style="text-align:left">45192</td><td style="text-align:right">29</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">765</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">238</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45193</td><td style="text-align:right">28</td><td style="text-align:right">self-employed</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">159</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">449</td><td style="text-align:right">2</td><td style="text-align:right">33</td><td style="text-align:right">4</td><td>success</td></tr><tr><td style="text-align:left">45194</td><td style="text-align:right">59</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">138</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">162</td><td style="text-align:right">2</td><td style="text-align:right">187</td><td style="text-align:right">5</td><td>failure</td></tr><tr><td style="text-align:left">45195</td><td style="text-align:right">68</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1146</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">212</td><td style="text-align:right">1</td><td style="text-align:right">187</td><td style="text-align:right">6</td><td>success</td></tr><tr><td style="text-align:left">45196</td><td style="text-align:right">25</td><td style="text-align:right">student</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">358</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">330</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45197</td><td style="text-align:right">36</td><td style="text-align:right">management</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1511</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">270</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45198</td><td style="text-align:right">37</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">1428</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">333</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45199</td><td style="text-align:right">34</td><td style="text-align:right">blue-collar</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">1475</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">1166</td><td style="text-align:right">3</td><td style="text-align:right">530</td><td style="text-align:right">12</td><td>other</td></tr><tr><td style="text-align:left">45200</td><td style="text-align:right">38</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">557</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">16</td><td style="text-align:right">nov</td><td style="text-align:right">1556</td><td style="text-align:right">4</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45201</td><td style="text-align:right">53</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">583</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">226</td><td style="text-align:right">1</td><td style="text-align:right">184</td><td style="text-align:right">4</td><td>success</td></tr><tr><td style="text-align:left">45202</td><td style="text-align:right">34</td><td style="text-align:right">admin.</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">557</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">224</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45203</td><td style="text-align:right">23</td><td style="text-align:right">student</td><td style="text-align:right">single</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">113</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">266</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45204</td><td style="text-align:right">73</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2850</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">300</td><td style="text-align:right">1</td><td style="text-align:right">40</td><td style="text-align:right">8</td><td>failure</td></tr><tr><td style="text-align:left">45205</td><td style="text-align:right">25</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">505</td><td style="text-align:right">no</td><td style="text-align:right">yes</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">386</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45206</td><td style="text-align:right">51</td><td style="text-align:right">technician</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">825</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">977</td><td style="text-align:right">3</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45207</td><td style="text-align:right">71</td><td style="text-align:right">retired</td><td style="text-align:right">divorced</td><td style="text-align:right">primary</td><td style="text-align:right">no</td><td style="text-align:right">1729</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">456</td><td style="text-align:right">2</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45208</td><td style="text-align:right">72</td><td style="text-align:right">retired</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">5715</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">1127</td><td style="text-align:right">5</td><td style="text-align:right">184</td><td style="text-align:right">3</td><td>success</td></tr><tr><td style="text-align:left">45209</td><td style="text-align:right">57</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">668</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">telephone</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">508</td><td style="text-align:right">4</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td>unknown</td></tr><tr><td style="text-align:left">45210</td><td style="text-align:right">37</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2971</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">cellular</td><td style="text-align:right">17</td><td style="text-align:right">nov</td><td style="text-align:right">361</td><td style="text-align:right">2</td><td style="text-align:right">188</td><td style="text-align:right">11</td><td>other</td></tr></tbody></table></div><p>45211 rows × 16 columns</p><pre><code class="hljs python">X = preprocess_pipeline.fit_transform(X)X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">44</span>)print(X)</code></pre><p>输出：</p><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>([[ <span class="hljs-number">1.60696496</span>,  <span class="hljs-number">0.25641925</span>, <span class="hljs-number">-1.29847633</span>, ...,  <span class="hljs-number">0.</span>        ,         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">1.</span>        ],       [ <span class="hljs-number">0.28852927</span>, <span class="hljs-number">-0.43789469</span>, <span class="hljs-number">-1.29847633</span>, ...,  <span class="hljs-number">0.</span>        ,         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">1.</span>        ],       [<span class="hljs-number">-0.74738448</span>, <span class="hljs-number">-0.44676247</span>, <span class="hljs-number">-1.29847633</span>, ...,  <span class="hljs-number">0.</span>        ,         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">1.</span>        ],       ...,       [ <span class="hljs-number">2.92540065</span>,  <span class="hljs-number">1.42959305</span>,  <span class="hljs-number">0.14341818</span>, ...,  <span class="hljs-number">0.</span>        ,         <span class="hljs-number">1.</span>        ,  <span class="hljs-number">0.</span>        ],       [ <span class="hljs-number">1.51279098</span>, <span class="hljs-number">-0.22802402</span>,  <span class="hljs-number">0.14341818</span>, ...,  <span class="hljs-number">0.</span>        ,         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">1.</span>        ],       [<span class="hljs-number">-0.37068857</span>,  <span class="hljs-number">0.52836436</span>,  <span class="hljs-number">0.14341818</span>, ...,  <span class="hljs-number">1.</span>        ,         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.</span>        ]])</code></pre><pre><code class="hljs python">preprocess_bank = pd.DataFrame(X)preprocess_bank.head(<span class="hljs-number">5</span>)</code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left">0</th><th style="text-align:right">1</th><th style="text-align:right">2</th><th style="text-align:right">3</th><th style="text-align:right">4</th><th style="text-align:right">5</th><th style="text-align:right">6</th><th style="text-align:right">7</th><th style="text-align:right">8</th><th style="text-align:right">9</th><th style="text-align:right">…</th><th style="text-align:right">41</th><th style="text-align:right">42</th><th style="text-align:right">43</th><th style="text-align:right">44</th><th style="text-align:right">45</th><th style="text-align:right">46</th><th style="text-align:right">47</th><th style="text-align:right">48</th><th style="text-align:right">49</th><th style="text-align:right">50</th><th></th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:right">1.606965</td><td style="text-align:right">0.256419</td><td style="text-align:right">-1.298476</td><td style="text-align:right">-0.569351</td><td style="text-align:right">-0.411453</td><td style="text-align:right">-0.25194</td><td style="text-align:right">0.011016</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">…</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">1.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td>1.0</td></tr><tr><td style="text-align:left">1</td><td style="text-align:right">0.288529</td><td style="text-align:right">-0.437895</td><td style="text-align:right">-1.298476</td><td style="text-align:right">-0.569351</td><td style="text-align:right">-0.411453</td><td style="text-align:right">-0.25194</td><td style="text-align:right">-0.416127</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">…</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">1.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td>1.0</td></tr><tr><td style="text-align:left">2</td><td style="text-align:right">-0.747384</td><td style="text-align:right">-0.446762</td><td style="text-align:right">-1.298476</td><td style="text-align:right">-0.569351</td><td style="text-align:right">-0.411453</td><td style="text-align:right">-0.25194</td><td style="text-align:right">-0.707361</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">1.0</td><td style="text-align:right">…</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">1.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td>1.0</td></tr><tr><td style="text-align:left">3</td><td style="text-align:right">0.571051</td><td style="text-align:right">0.047205</td><td style="text-align:right">-1.298476</td><td style="text-align:right">-0.569351</td><td style="text-align:right">-0.411453</td><td style="text-align:right">-0.25194</td><td style="text-align:right">-0.645231</td><td style="text-align:right">0.0</td><td style="text-align:right">1.0</td><td style="text-align:right">0.0</td><td style="text-align:right">…</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">1.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td>1.0</td></tr><tr><td style="text-align:left">4</td><td style="text-align:right">-0.747384</td><td style="text-align:right">-0.447091</td><td style="text-align:right">-1.298476</td><td style="text-align:right">-0.569351</td><td style="text-align:right">-0.411453</td><td style="text-align:right">-0.25194</td><td style="text-align:right">-0.233620</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">…</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">1.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td style="text-align:right">0.0</td><td>1.0</td></tr></tbody></table></div><p>5 rows × 51 columns</p><pre><code class="hljs python">bank.head(<span class="hljs-number">5</span>)</code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">age</th><th style="text-align:right">job</th><th style="text-align:right">marital</th><th style="text-align:right">education</th><th style="text-align:right">default</th><th style="text-align:right">balance</th><th style="text-align:right">housing</th><th style="text-align:right">loan</th><th style="text-align:right">contact</th><th style="text-align:right">day</th><th style="text-align:right">month</th><th style="text-align:right">duration</th><th style="text-align:right">campaign</th><th style="text-align:right">pdays</th><th style="text-align:right">previous</th><th style="text-align:right">poutcome</th><th style="text-align:right">y</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:right">58</td><td style="text-align:right">management</td><td style="text-align:right">married</td><td style="text-align:right">tertiary</td><td style="text-align:right">no</td><td style="text-align:right">2143</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">261</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">0</td></tr><tr><td style="text-align:left">1</td><td style="text-align:right">44</td><td style="text-align:right">technician</td><td style="text-align:right">single</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">29</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">151</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">0</td></tr><tr><td style="text-align:left">2</td><td style="text-align:right">33</td><td style="text-align:right">entrepreneur</td><td style="text-align:right">married</td><td style="text-align:right">secondary</td><td style="text-align:right">no</td><td style="text-align:right">2</td><td style="text-align:right">yes</td><td style="text-align:right">yes</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">76</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">0</td></tr><tr><td style="text-align:left">3</td><td style="text-align:right">47</td><td style="text-align:right">blue-collar</td><td style="text-align:right">married</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1506</td><td style="text-align:right">yes</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">92</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">0</td></tr><tr><td style="text-align:left">4</td><td style="text-align:right">33</td><td style="text-align:right">unknown</td><td style="text-align:right">single</td><td style="text-align:right">unknown</td><td style="text-align:right">no</td><td style="text-align:right">1</td><td style="text-align:right">no</td><td style="text-align:right">no</td><td style="text-align:right">unknown</td><td style="text-align:right">5</td><td style="text-align:right">may</td><td style="text-align:right">198</td><td style="text-align:right">1</td><td style="text-align:right">-1</td><td style="text-align:right">0</td><td style="text-align:right">unknown</td><td style="text-align:right">0</td></tr></tbody></table></div><h2 id="4-2-模型构建"><a href="#4-2-模型构建" class="headerlink" title="4.2 模型构建"></a>4.2 模型构建</h2><p>t_diff=[]</p><h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><p>log_reg = LogisticRegression()<br>t_start = time.clock()#通过time记录<br>log_scores = cross_val_score(log_reg, X_train, y_train, cv=3, scoring=’roc_auc’)<br>t_end = time.clock()<br>t_diff.append((t_end - t_start))<br>log_reg_mean = log_scores.mean()</p><h3 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h3><p>svc_clf = SVC()<br>t_start = time.clock()<br>svc_scores = cross_val_score(svc_clf, X_train, y_train, cv=3, scoring=’roc_auc’)<br>t_end = time.clock()<br>t_diff.append((t_end - t_start))<br>svc_mean = svc_scores.mean()</p><h3 id="k邻近"><a href="#k邻近" class="headerlink" title="k邻近"></a>k邻近</h3><p>knn_clf = KNeighborsClassifier()<br>t_start = time.clock()<br>knn_scores = cross_val_score(knn_clf, X_train, y_train, cv=3, scoring=’roc_auc’)<br>t_end = time.clock()<br>t_diff.append((t_end - t_start))<br>knn_mean = knn_scores.mean()</p><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>tree_clf = tree.DecisionTreeClassifier()<br>t_start = time.clock()<br>tree_scores = cross_val_score(tree_clf, X_train, y_train, cv=3, scoring=’roc_auc’)<br>t_end = time.clock()<br>t_diff.append((t_end - t_start))<br>tree_mean = tree_scores.mean()</p><h3 id="梯度提升树"><a href="#梯度提升树" class="headerlink" title="梯度提升树"></a>梯度提升树</h3><p>grad_clf = GradientBoostingClassifier()<br>t_start = time.clock()<br>grad_scores = cross_val_score(grad_clf, X_train, y_train, cv=3, scoring=’roc_auc’)<br>t_end = time.clock()<br>t_diff.append((t_end - t_start))<br>grad_mean = grad_scores.mean()</p><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><p>rand_clf = RandomForestClassifier()<br>t_start = time.clock()<br>rand_scores = cross_val_score(rand_clf, X_train, y_train, cv=3, scoring=’roc_auc’)<br>t_end = time.clock()<br>t_diff.append((t_end - t_start))<br>rand_mean = rand_scores.mean()</p><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p>neural_clf = MLPClassifier(alpha=0.01)<br>t_start = time.clock()<br>neural_scores = cross_val_score(neural_clf, X_train, y_train, cv=3, scoring=’roc_auc’)<br>t_end = time.clock()<br>t_diff.append((t_end - t_start))<br>neural_mean = neural_scores.mean()</p><h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><pre><code class="hljs python">nav_clf = GaussianNB()t_start = time.clock()nav_scores = cross_val_score(nav_clf, X_train, y_train, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">'roc_auc'</span>)t_end = time.clock()t_diff.append((t_end - t_start))nav_mean = neural_scores.mean()d = &#123;<span class="hljs-string">'Classifiers'</span>: [<span class="hljs-string">'Logistic Reg.'</span>, <span class="hljs-string">'SVC'</span>, <span class="hljs-string">'KNN'</span>, <span class="hljs-string">'Dec Tree'</span>, <span class="hljs-string">'Grad B CLF'</span>, <span class="hljs-string">'Rand FC'</span>, <span class="hljs-string">'Neural Classifier'</span>, <span class="hljs-string">'Naives Bayes'</span>],     <span class="hljs-string">'Crossval Mean Scores'</span>: [log_reg_mean, svc_mean, knn_mean, tree_mean, grad_mean, rand_mean, neural_mean, nav_mean],    <span class="hljs-string">'time'</span>:t_diff&#125;result_df = pd.DataFrame(d)result_df = result_df.sort_values(by=[<span class="hljs-string">'Crossval Mean Scores'</span>], ascending=<span class="hljs-literal">False</span>)result_df</code></pre><p>输出：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:right">Classifiers</th><th style="text-align:right">Crossval Mean Scores</th><th style="text-align:right">time</th></tr></thead><tbody><tr><td style="text-align:left">4</td><td style="text-align:right">Grad B CLF</td><td style="text-align:right">0.925765</td><td style="text-align:right">26.047404</td></tr><tr><td style="text-align:left">6</td><td style="text-align:right">Neural Classifier</td><td style="text-align:right">0.919359</td><td style="text-align:right">82.371689</td></tr><tr><td style="text-align:left">7</td><td style="text-align:right">Naives Bayes</td><td style="text-align:right">0.919359</td><td style="text-align:right">0.207923</td></tr><tr><td style="text-align:left">1</td><td style="text-align:right">SVC</td><td style="text-align:right">0.907706</td><td style="text-align:right">71.862459</td></tr><tr><td style="text-align:left">0</td><td style="text-align:right">Logistic Reg.</td><td style="text-align:right">0.905835</td><td style="text-align:right">0.742473</td></tr><tr><td style="text-align:left">5</td><td style="text-align:right">Rand FC</td><td style="text-align:right">0.886541</td><td style="text-align:right">1.250071</td></tr><tr><td style="text-align:left">2</td><td style="text-align:right">KNN</td><td style="text-align:right">0.829659</td><td style="text-align:right">68.490700</td></tr><tr><td style="text-align:left">3</td><td style="text-align:right">Dec Tree</td><td style="text-align:right">0.701087</td><td style="text-align:right">1.155549</td></tr></tbody></table></div><h2 id="4-3-模型评价"><a href="#4-3-模型评价" class="headerlink" title="4.3 模型评价"></a>4.3 模型评价</h2><p>由上表可以看出，在这8种分类器里面，梯度提升树（Gradient Boosting）、神经网络（Neural Classifier）、朴素贝叶斯（Naive Bayes）表现位于前三名。在后续的步骤中，我们可以对它们进行调参以获得更好的结果，相信大家一定会调参，所以调参不是本文关注的重点，本文的重点在于各个模型的比较。</p><p>虽然决策树位列最后一名，但是集成树（梯度提升树与随机森林）表现可以远远好于单棵决策树。这是由于集成模型的泛化性能非常好，不太需要调参就可以取得很好的效果。</p><p>而在耗时方面，k邻近算法由于要同时计算所有点与某点的距离，因此耗时最多，而且效果也一般（倒数第二）。集成模型虽然需要训练上百个弱分类器，但是由于可以并行计算的原因，随机森林与单棵决策树的速度相差无几；而根据梯度提升树的原理，它只可以分步计算，所以速度稍慢。但是最慢的还是神经网络，最快的模型是决策树。</p><pre><code class="hljs python"><span class="hljs-comment">#通过该函数获得一个分类器的AUC值与ROC曲线的参数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_auc</span><span class="hljs-params">(clf)</span>:</span>    clf=clf.fit(X_train, y_train)    prob=clf.predict_proba(X_test)    prob=prob[:, <span class="hljs-number">1</span>]    <span class="hljs-keyword">return</span> roc_auc_score(y_test, prob),roc_curve(y_test, prob)</code></pre><p>通过测试集数据画出ROC曲线并标注AUC值。</p><pre><code class="hljs python">grad_roc_scores,grad_roc_curve = get_auc(grad_clf)neural_roc_scores,neural_roc_curve = get_auc(neural_clf)naives_roc_scores,naives_roc_curve = get_auc(nav_clf)grd_fpr, grd_tpr, grd_thresold = grad_roc_curveneu_fpr, neu_tpr, neu_threshold = neural_roc_curvenav_fpr, nav_tpr, nav_threshold = naives_roc_curve<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">graph_roc_curve_multiple</span><span class="hljs-params">(grd_fpr, grd_tpr, neu_fpr, neu_tpr, nav_fpr, nav_tpr)</span>:</span>    plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))    plt.title(<span class="hljs-string">'ROC Curve \n Top 3 Classifiers'</span>, fontsize=<span class="hljs-number">18</span>)    plt.plot(grd_fpr, grd_tpr, label=<span class="hljs-string">'Gradient Boosting Classifier (Score = &#123;:.2%&#125;)'</span>.format(grad_roc_scores))    plt.plot(neu_fpr, neu_tpr, label=<span class="hljs-string">'Neural Classifier (Score = &#123;:.2%&#125;)'</span>.format(neural_roc_scores))    plt.plot(nav_fpr, nav_tpr, label=<span class="hljs-string">'Naives Bayes Classifier (Score = &#123;:.2%&#125;)'</span>.format(naives_roc_scores))    plt.plot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-string">'k--'</span>)<span class="hljs-comment">#指定x,y轴的坐标在0，1之间</span>    plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])    plt.xlabel(<span class="hljs-string">'False Positive Rate'</span>, fontsize=<span class="hljs-number">16</span>)    plt.ylabel(<span class="hljs-string">'True Positive Rate'</span>, fontsize=<span class="hljs-number">16</span>)    plt.annotate(<span class="hljs-string">'Minimum ROC Score of 50% \n (This is the minimum score to get)'</span>, xy=(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>), xytext=(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.3</span>), arrowprops=dict(facecolor=<span class="hljs-string">'#6E726D'</span>, shrink=<span class="hljs-number">0.05</span>),)    plt.legend()<span class="hljs-comment">#显示图例</span>    graph_roc_curve_multiple(grd_fpr, grd_tpr, neu_fpr, neu_tpr, nav_fpr, nav_tpr)plt.show()</code></pre><p><img src="/article/a0f63eb7/输出5.png" srcset="/img/loading.gif" alt="输出5"></p><p>由上图可见，在测试集中朴素贝叶斯模型只得到了80.84%的AUC值了，说明它存在过拟合现象，需要进一步调参。而梯度提升树（Gradient Boosting）与神经网络（Neural Classifier）的得分与训练集的结果保持一致，说明模型拟合地很好，因此它们也是我们可以采纳的模型。</p><h1 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h1><p>首先，在营销活动次数的选择上，对同一个客户打电话的次数不应超过三次，这样不仅可以节约时间，把精力投入到新客户中。如果给同一个客户打电话多次，一定会引起客户的反感，从而降低客户的购买产品的欲望。</p><p>其次，在客户年龄段的选择上，银行应集中于20岁左右和60岁左右的人群，他们分别有超过60%的可能性购买营销产品。</p><p>再其次，对于不同的职业来说，学生与退休的人也是最容易购买营销产品的人，这与年龄段的现象保持了一致。对于退休的人而言，他们有很多的存款却不敢随便花钱，而定期存款大多期限短收益高，因而成为他们所热衷购买的产品。而对于学生党来说，他们会珍惜自己有限的存款，而同时他们花钱的机会比较少，所以他们会选择定期存款。</p><p>而对于住房贷款和存款余额来说，正如本文中的结果所能看到的一样，有贷款的人需要每月按时还款，因而不太可能还会去购买定期存款（定期存款的利息肯定不及贷款利息）。同时，存款多的人自然倾向于去购买定期存款以让自己获得更多利息。</p><p>最后一点，专注于那些通话时间长的客户，正如在关系矩阵中所看到的一样，通话时间越长客户越有可能购买营销产品，而且可能性非常之高。</p><p>综上所述，对于银行而言，想要推广它的营销产品，一个简要的策略是：首先先通过客户的基本信息，使用训练好的机器学习模型（不含<code>duration</code>）进行预测，然后对这些客户进行电话营销。根据电话营销的结果，再用含有<code>duration</code>的模型再一次进行预测，找出那些可能性大的客户，如果他们没有在第一次营销后购买理财产品的话，那么再对这些人进行第二次电话营销。之后，视情况进行第三次营销，或者把精力放在发展新客户上面。通过这样的策略，银行下一次营销活动的可能结果会比上一次更好。</p><p>跟着教程走了一遍，原来如此~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、数据说明与预处理&quot;&gt;&lt;a href=&quot;#1、数据说明与预处理&quot; class=&quot;headerlink&quot; title=&quot;1、数据说明与预处理&quot;&gt;&lt;/a&gt;1、数据说明与预处理&lt;/h1&gt;&lt;p&gt;本文选取的数据集来自于葡萄牙银行机构的营销活动，是以电话访谈的形式，根据访谈
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sulimin-nb.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://sulimin-nb.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>一些脑残行为引发的车祸现场及补救</title>
    <link href="https://sulimin-nb.github.io/article/2f0ca801.html"/>
    <id>https://sulimin-nb.github.io/article/2f0ca801.html</id>
    <published>2020-07-14T03:04:11.000Z</published>
    <updated>2020-07-15T16:58:19.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取消SSH私钥密码"><a href="#取消SSH私钥密码" class="headerlink" title="取消SSH私钥密码"></a>取消SSH私钥密码</h2><p>6月24号开了博客，刚开始用next主题， 后来被Fluid颜值吸引。当然这些都不是重点。重点是当时设置ssh私钥访问，我选择了设置密码。wtf，天知道这是多么愚蠢的行为。每次push都要输密码。<br>怎么办？当然选择解决它。首先想的是重新生成密钥，设置为空。然后发现leancloud要不要改，coding.net要不要改…嗯~ o(<em>￣▽￣</em>)o好像有丢丢麻烦，赶紧google，今天特别幸运，点到了第一个就阔以解决。</p><p>参考博客：<a href="https://woodenrobot.me/2018/01/30/%E5%8F%96%E6%B6%88-SSH-%E7%A7%81%E9%92%A5%E5%AF%86%E7%A0%81/" target="_blank" rel="noopener">取消SSH私钥密码</a></p><p><strong>方法一</strong><br>使用 ssh-keygen 命令更改 SSH Key 密码，进入秘钥所在到的文件夹内（一般为<code>~/.ssh</code>）,执行下列命令：</p><pre><code class="hljs cmd">ssh-keygen -f id_rsa -p</code></pre><p>执行命令后，会让你先输入旧密码，然后输入两次新密码，新密码为空则为没有密码。</p><pre><code class="hljs powershell">C:\Users\susu\.ssh&gt;ssh<span class="hljs-literal">-keygen</span> <span class="hljs-operator">-f</span> id_rsa <span class="hljs-literal">-p</span>Enter old passphrase:Key has comment <span class="hljs-string">'xxxxxxxxxx@xx.com'</span>Enter new passphrase (empty <span class="hljs-keyword">for</span> no passphrase):Enter same passphrase again:Your identification has been saved with the new passphrase.</code></pre><h2 id="使用HTML插入表格"><a href="#使用HTML插入表格" class="headerlink" title="使用HTML插入表格"></a>使用HTML插入表格</h2><p>参考博客：<a href="https://3nice.cc/2018/10/01/markdowntable/" target="_blank" rel="noopener">解决在Markdown中的表格单元格合并的问题</a></p><h2 id="论博客的颜值问题"><a href="#论博客的颜值问题" class="headerlink" title="论博客的颜值问题"></a>论博客的颜值问题</h2><!--刚开始用的next，优化做了一两天，偶然看到fluid，页面显示的很美观。加上next有些优化，我还没做完善，就果断换了。换了之后呢，前一两周美滋滋，真的漂亮，然后这周各种不顺，它太年轻了，好多修改都查无此法。sad(；′⌒`)。而且我发现我被颜值绑架了。为了好看的颜值，一篇博客里调整杂七杂八的图片，公式大小，又要浪费一小时，太太太可惜了（刷b站不香嘛）。博客分享还是更注重质量（也没几个人看O(∩_∩)O），颜值什么的等我变强了再说把(秃头警告)。--><!--总之，还是要基本功打扎实，别整天净整些有的没的。（丑丑的next，我又肥来啦~）--><p>博客的颜值就像外貌，我的要求就是整洁，小清新~(然而并不是，整天整些花里胡哨的)。so我立flag！这两个月就内容输出就好了，排版整整就好了，优化这两个月积累一下，有重要的优化再搜再改，不然不碰(花太多时间了，（T_T）orz..)。</p><h2 id="更改jupyter-notebook的主题颜色-theme"><a href="#更改jupyter-notebook的主题颜色-theme" class="headerlink" title="更改jupyter notebook的主题颜色(theme)"></a>更改jupyter notebook的主题颜色(theme)</h2><p>白色看久了，确实有丢丢疲劳。改黑色。</p><p>jupyter-themes里包含了一些样式。安装如下：<br>在控制台(cmd/shell)下用pip安装jupyter-themes</p><pre><code class="hljs shell">pip install --upgrade jupyterthemes</code></pre><p>查看所有可用的主题：</p><pre><code class="hljs groovy"><span class="hljs-string">C:</span>\Users\susu&gt;jt -lAvailable <span class="hljs-string">Themes:</span>   chesterish   grade3   gruvboxd   gruvboxl   monokai   oceans16   onedork   solarizedd   solarizedl</code></pre><p>以下命令选择要用的主题：</p><pre><code class="hljs shell">jt -t 主题名称</code></pre><p><span style="color:blue">注意：如果选择暗背景，输出图表的时候字体可能还是黑色的。</span><br>使用如下命令(以oceans16为例)，可以把图表背景设置为白色，解决字体黑色在暗色背景下显示不明显问题。</p><pre><code class="hljs shell">jt -t oceans16 -T -N</code></pre><p>恢复默认：</p><pre><code class="hljs shell">jt -r</code></pre><p>参考链接：<a href="https://blog.csdn.net/Jinlong_Xu/article/details/79221943?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight" target="_blank" rel="noopener">jupyter notebook更换主题 步骤详解</a>里面还有其他一些参数详解。</p><h2 id="Hexo-Git部署警告”warning：-LF-will-be-replaced-by-CRLF”"><a href="#Hexo-Git部署警告”warning：-LF-will-be-replaced-by-CRLF”" class="headerlink" title="Hexo Git部署警告”warning： LF will be replaced by CRLF”"></a>Hexo Git部署警告”warning： LF will be replaced by CRLF”</h2><p>Windows下在使用<code>hexo d</code>命令部署博客时，会出现下面这个警告：</p><pre><code class="hljs shell">The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in index.html.</code></pre><p>这个警告的意思很直接，就是Git会把<code>LF</code>替换为<code>CRLF</code>，不过这是无关紧要的，完全可以禁用此功能，这样还可以避免这个警告信息刷屏。<br>设置禁用：在MinGW窗口中输入以下命令即可</p><pre><code class="hljs shell">git config --global core.autocrlf false</code></pre><p>参考链接：<a href="https://gaomf.cn/2017/01/13/Hexo_Git_CRLF/" target="_blank" rel="noopener">Hexo Git部署警告”warning： LF will be replaced by CRLF”的去除方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;取消SSH私钥密码&quot;&gt;&lt;a href=&quot;#取消SSH私钥密码&quot; class=&quot;headerlink&quot; title=&quot;取消SSH私钥密码&quot;&gt;&lt;/a&gt;取消SSH私钥密码&lt;/h2&gt;&lt;p&gt;6月24号开了博客，刚开始用next主题， 后来被Fluid颜值吸引。当然这些都不是
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://sulimin-nb.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://sulimin-nb.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>leetcode174-地下城游戏</title>
    <link href="https://sulimin-nb.github.io/article/a6c99a24.html"/>
    <id>https://sulimin-nb.github.io/article/a6c99a24.html</id>
    <published>2020-07-13T02:33:47.000Z</published>
    <updated>2020-07-15T16:58:29.467Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">没写完，凌乱的很~The article is available after a week or enter the password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cb897dbac00dde259ba373973fe90816ba5e509f79873055485542945214e740">dff0aecbdb650398cd133bdee50169cd3f1aee3ece73b0ea840df87ea1e8e72931cef7398e2153f51123c7f96ba3c2fc610f07efd6940ca8184dfea191340068387d9fc22b56fbfe156690b0cc7628f42a6daca22fb7faf37efa02f26c02a2e5fbb14d09fb0fbf442ed2f90716b7bd6546f6264d8d62325811dd87f10ef388f00d0f77621b2ed4f46265b0b7b3f343833ceec43d7f42cc0c0511ca0007a7505697c72386afb28469da861356c7597571cd261ba8208851833b0baddf063cd618d127a47863fda68f95ea13c4912341e84b0e6900b5b15ad53cd93dd3f2b56aa5807af40a02e56ff21d269a4146b3790e897cfc9a6bab67b12ef816c23c6a057a05733c8bba78984f8b2e7a3bded30e9fec962e4c9349d8070f6d39c5634d9abe690ba7f96d4609565a823481acb06d6e441345dcd64d4b7b7832d7eaad8931eab724ddfcd1e47b2b2c2e2038640da7e56a961a9bd0277c2cab59230289be4a1b90dbdfad8bf153f09cfce110352bc593c36cd36eeb54c622db6e7be797c20afe1538255873605b938e1febc35cf90823f404aa418cb3df7fd13a3ef2222c69f2d3878cfe225133da5c577efaa660f08fed112a08686f7a3b16179dbf6d6dc4577aaf4e05f7f05180747d66380c4e4297c1d14ed1520c201f7015d9cfe95a0570f45e05742139065d92d03489f774bcb3999c1b26c8caa11c5f517c76dee8b1be398da38289089257c146a5a2560a63595b9ee1a9a2f62f0679e60f679cfe5aba0f5916fc414367722912571ecae6d66e3a596061e812cdcbd783ae268ba56aa12836e6e44dd9f21f72990903360e9ad732e05b58559506920c18ea78c27c39c70146dc9f8ad63b2b260fdab81eb55e6d079a7b783d7e4583ed1b94c83aee6bdebe3b03032d3bcadb406ba1a1cafb607c87c997932accaf858695b9678b92941dca2d9b2d31b20d6963b1f178e4a7bfd118a33522e228de056ed4ee8abb268c74b21fc748779fe5fb9384e736f3d6d59754a3ca09aa6a21438929fdf6b8362dd976f659427462a3da8fa5af544749b45dcd558ab9628cf2f87bf023b0b97715feaf7af4a2ecfb7a82e1f80b33f5f667331f91950cbea4e064e46b048fda2db8a8bf4b3e23f3788566a51c1bc429ede1e961e0e58ab10b413a0fa4e2b15e16a9f8f1d683a17b96ff9e90bcebd0e9d80e6768a4331e6be8150d7fbb71867591f054245be9a18a49dfeef6a019159f0c5d5f2e198684e075757bc0983624b912d1f9e9b43ae040fc7cb85eedaa6601b72d4ab14bb98ec78cec73d90d23aa22aabd4e8d90b1ab7fa6558cb3ff7bdc1f5b80225665bf74cf8212c8677ff54ee3122ea1bae3c64763598c128ab471bfe665bab5ceec193af74cd0a23eaa2d8eedd1163a1b4a5ad9d9d6cc67ae94492954173f40fcf604712e52d6c31546c83da644df43aa8adbe5ba6831ee81cd797eb495e9e089890907d04581cca1b1c85738842dc2030515c839aca2c5b32fbab9ab2c6b9e9a41506e099f36f10a39ac29d1250ca8aba5fb9d716152aedc3652576aa7cea25807936888e73489bfb3f69c7db84e7b19ab6f0a93727e86f62b25f19827546781a04606a7c78b2719a844a7ddb9c09e81d797cd3e48bbb0f45b7e6a8b6b4529751309c23bafd5ce3a58ede684f4560b693b6c1f3505af8e68772ec23faeecdbfba5876210e918399d59459393a33125c9d7cbb24bbf6e7ef561604d3f844076a2282444f0b148cfdbd33f767593c9c0ff1552791396f22a5503c6c737ad37f567ca88e2fc5f3bdf6e575e8feb05ad11d4ae51880307efae0b1eb35361dba0f72302fb235cc7c5feb013567601801f9a4226ba0f110848d940c7008d484b5ca1fb7adda999afae3a2faff82d92372846580e4cd7fef5d4ab8f41024825a4a9b5c4d814f56daf926e90f454e8b502b1cceadb6bce8cc71d66168cc84caa8af56cd6e5afc5e4860265478bf7217844d9825e0bf26618a75820ff1fda9db5bf7a1942633251058c5c03f28409f9105911667876996afe9bf1c9a60d30262b833d61afff3ade784123d947883c361a167b4eb8f3398f279f97f02ab14efe0e8f48cedab319e66fc07a970bda316e82ddf88ab36cd98732efe0909405ee1c860da86b952d760cd04c42e6fabbdf933d1a5697a687f3ec894de66249a17a844f6947d5954bc11cf40e1ca22c3ad6e14469b55a45073954dfaaf2df68da81b5b70e9b5f8bec5569b8bdf678e43387df11381f732e01f939acc5a08be9564976a7b40494c2dec06d86e0fa891908aa3b084866c5aaf06e4cfa310998a4407a380bddf9f2671ddd55f282ce6f78af945577a3f5c450fb333519abf357b1fe9e9a688ad644ff72e767b16cce5398d275efebf2233dd895d3cf1a0b1ecb2ed1ac837f58b2a377b1cdd1239688155e5899ea244e57fe257b178326dede9bcb02123688d5855ce4771b93ad542972452ee95fa14d39cf10b537d606eff942f171062bb3305b36a621165d9c006eec4c1fe90a60aa4f5b8ac18c9ffba7dc74cd9b67e46b1f45bd794f7592e855339b9d71abcad0936c1ff7ee9955f62fdbbd4c4013ba894af850bc4a3c85b7ea80c1a38e3efdaa6ea59ec8264656456e6f1fe6920efe1df12c72c12186d44ff718debc882e550874870f964e87e28444b0fe560c66f7fc8988d21df1b70d55c6a4bebfe03b866fe7cda0819d804d093a5c5b68e5423b3310159e8428162b4396f4fbfd334f5bc8847b2edfb38b42c9d63ddad0a5b71aeba72886</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      今天的小菜鸡还是没有喝完汤~The article is available after a week.
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="动态规划" scheme="https://sulimin-nb.github.io/categories/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="每日一题" scheme="https://sulimin-nb.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>latex常用语法</title>
    <link href="https://sulimin-nb.github.io/article/a097ae97.html"/>
    <id>https://sulimin-nb.github.io/article/a097ae97.html</id>
    <published>2020-07-12T06:53:55.000Z</published>
    <updated>2020-07-14T16:09:38.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Latex常用语法"><a href="#Latex常用语法" class="headerlink" title="Latex常用语法"></a>Latex常用语法</h1><p>因为每次都要找，不如总结下来。网页端又显示不正常了，哎，有空闲再调把~</p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><div class="table-container"><table><thead><tr><th>两个quad空格</th><th>a \qquad b</th><th><img src="/article/a097ae97/e505263bc9c94f673c580f3a36a7f08a.png" srcset="/img/loading.gif" alt="a \qquad b"></th><th>两个<em>m</em>的宽度</th></tr></thead><tbody><tr><td>quad空格</td><td>a \quad b</td><td><img src="/article/a097ae97/da8c1d9effa4501fd80c054e59ad917d.png" srcset="/img/loading.gif" alt="a \quad b"></td><td>一个<strong>m</strong>的宽度</td></tr><tr><td>大空格</td><td>a\ b</td><td><img src="/article/a097ae97/692d4bffca8e84ffb45cf9d5facf31d6.png" srcset="/img/loading.gif" alt="a\ b"></td><td>1/3<strong>m</strong>宽度</td></tr><tr><td>中等空格</td><td>a\;b</td><td><img src="/article/a097ae97/b5ade5d5393fd7727bf77fa44ec8b564.png" srcset="/img/loading.gif" alt="a\;b"></td><td>2/7<strong>m</strong>宽度</td></tr><tr><td>小空格</td><td>a\,b</td><td><img src="/article/a097ae97/7bea99aed60ba5e1fe8a134ab43fa85f.png" srcset="/img/loading.gif" alt="a\,b"></td><td>1/6<strong>m</strong>宽度</td></tr><tr><td>没有空格</td><td>ab</td><td><img src="/article/a097ae97/b6bd9dba2ebfca24731ae6dc3913e625.png" srcset="/img/loading.gif" alt="ab\,"></td><td></td></tr><tr><td>紧贴</td><td>a!b</td><td><img src="/article/a097ae97/0fbcad5fadb912e8afa6d113a75c83e4.png" srcset="/img/loading.gif" alt="a\!b"></td><td>缩进1/6<em>m*</em>宽度</td></tr></tbody></table></div><h2 id="空格-1"><a href="#空格-1" class="headerlink" title="空格"></a>空格</h2><p>注意<em>T<strong>E</strong>X</em>能够自动处理大多数的空格，但是您有时候需要自己来控制。</p><div class="table-container"><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th><th style="text-align:left">显示</th><th style="text-align:left">宽度</th></tr></thead><tbody><tr><td style="text-align:left">2个quad空格</td><td style="text-align:left"><code>\alpha\qquad\beta</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/4/3/b/43ba5910626e8cdd1e7c87f87457bc68.png" srcset="/img/loading.gif" alt="\alpha\qquad\beta"></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/d/8/a/d8a3700be4ced531e5618e8bebfece25.png" srcset="/img/loading.gif" alt="2m\ "></td></tr><tr><td style="text-align:left">quad空格</td><td style="text-align:left"><code>\alpha\quad\beta</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/d/b/bdbaa56ab92dbec191da654efcf15f31.png" srcset="/img/loading.gif" alt="\alpha\quad\beta"></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/d/4/8/d482d61667a2a8f3a40b25f2626b6d16.png" srcset="/img/loading.gif" alt="m\ "></td></tr><tr><td style="text-align:left">大空格</td><td style="text-align:left"><code>\alpha\ \beta</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/c/c/8cc37fcc9fc3729b33095484307b65e9.png" srcset="/img/loading.gif" alt="\alpha\ \beta"></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/b/d/8bd0331723b650fa4e57c0c97ea74bdb.png" srcset="/img/loading.gif" alt="\frac{m}{3}"></td></tr><tr><td style="text-align:left">中等空格</td><td style="text-align:left"><code>\alpha\;\beta</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/1/9/a/19aad8cbec4cda349710592cddcbae8a.png" srcset="/img/loading.gif" alt="\alpha\;\beta"></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/d/8/6/d86c7e706d3844153628c5344a0d43c3.png" srcset="/img/loading.gif" alt="\frac{2m}{7}"></td></tr><tr><td style="text-align:left">小空格</td><td style="text-align:left"><code>\alpha\,\beta</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/8/0/580e640ac8bd1b0b421e62a48f9d4815.png" srcset="/img/loading.gif" alt="\alpha\,\beta"></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/b/2/2b25f9317e1ebccefa69c899bb87f655.png" srcset="/img/loading.gif" alt="\frac{m}{6}"></td></tr><tr><td style="text-align:left">没有空格</td><td style="text-align:left"><code>\alpha\beta</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/c/7/6/c761464c4ea7b0a18e7bd830bc80fc62.png" srcset="/img/loading.gif" alt="\alpha\beta\ "></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/7/1/571e19a3fb35a2f712cd608e89b85dc5.png" srcset="/img/loading.gif" alt="0\ "></td></tr><tr><td style="text-align:left">紧贴</td><td style="text-align:left"><code>\alpha\!\beta</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/6/d/3/6d331458bfd8a10d0639514187a1eb42.png" srcset="/img/loading.gif" alt="\alpha\!\beta"></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/1/a/4/1a40f481cfa743830b2c80b87a4acccc.png" srcset="/img/loading.gif" alt="-\frac{m}{6}"></td></tr></tbody></table></div><h2 id="声调"><a href="#声调" class="headerlink" title="声调"></a>声调</h2><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">效果</th><th style="text-align:left">语法</th><th style="text-align:left">效果</th><th style="text-align:left">语法</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">\bar{x}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/c/9/4/c947a5bcc06592f37f6b1c4f2ed57dea.png" srcset="/img/loading.gif" alt="\bar{x}"></td><td style="text-align:left">\acute{\eta}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/f/f/8ff055145396a2ffefacea0b18ec3fda.png" srcset="/img/loading.gif" alt="\acute{\eta}"></td><td style="text-align:left">\check{\alpha}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/a/c/4/ac4a31ee5874dc5044590eedae7a48c4.png" srcset="/img/loading.gif" alt="\check{\alpha}"></td></tr><tr><td style="text-align:left">\grave{\eta}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/9/1/f/91f1cf98709ee5bd4380b05d04ce260a.png" srcset="/img/loading.gif" alt="\grave{\eta}"></td><td style="text-align:left">\breve{a}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/8/5/58565c69fa6e895ea11e57ffdbe7d4cd.png" srcset="/img/loading.gif" alt="\breve{a}"></td><td style="text-align:left">\ddot{y}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/8/7/58779ff5e3932c43545a8d8114384dd6.png" srcset="/img/loading.gif" alt="\ddot{y}"></td></tr><tr><td style="text-align:left">\dot{x}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/8/4/584bdd6bbf3b22901631c94c12f09332.png" srcset="/img/loading.gif" alt="\dot{x}"></td><td style="text-align:left">\hat{\alpha}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/3/f/e/3fe9b211473065676e1b8048e21b9743.png" srcset="/img/loading.gif" alt="\hat{\alpha}"></td><td style="text-align:left">\tilde{\iota}</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/d/b/5db129ecac03423d19e453d9ada8a0e8.png" srcset="/img/loading.gif" alt="\tilde{\iota}"></td></tr></tbody></table></div><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">效果</th><th style="text-align:left">语法</th><th style="text-align:left">效果</th><th style="text-align:left">语法</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">\nabla</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/f/e/3/fe3a83e41074834731743ab803cd4936.png" srcset="/img/loading.gif" alt="\nabla"></td><td style="text-align:left">\partial x</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/8/d/28ddb3e82115d069796faf6356e2dbf6.png" srcset="/img/loading.gif" alt="\partial x"></td><td style="text-align:left">\mathrm{d}x</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/3/d/7/3d7524d2b2372a1188d73b20b9ba4b31.png" srcset="/img/loading.gif" alt="\mathrm{d}x\ "></td></tr><tr><td style="text-align:left">\dot x</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/3/a/b/3abf2ac2fcc14362b32b0411d43cbf48.png" srcset="/img/loading.gif" alt="\dot x"></td><td style="text-align:left">\ddot y</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/0/d/2/0d23f3a6391ae79fac3f4b30ec914a84.png" srcset="/img/loading.gif" alt="\ddot y"></td><td style="text-align:left"></td></tr></tbody></table></div><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><div class="table-container"><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th><th style="text-align:left">显示</th></tr></thead><tbody><tr><td style="text-align:left">不好看</td><td style="text-align:left">( \frac{1}{2} )</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/4/0/a/40ad9d3d1fc9a61e16d22d7e3f854fec.png" srcset="/img/loading.gif" alt="( \frac{1}{2} )"></td></tr><tr><td style="text-align:left">好看了</td><td style="text-align:left">\left( \frac{1}{2} \right)</td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/8/b/28bcd5b82ce0e92b25e8a0b4bd5be215.png" srcset="/img/loading.gif" alt="\left ( \frac{1}{2} \right )"></td></tr></tbody></table></div><p>您可以使用 <code>\left</code> 和 <code>\right</code> 来显示不同的括号：</p><div class="table-container"><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th><th style="text-align:left">显示</th></tr></thead><tbody><tr><td style="text-align:left">圆括号，小括号</td><td style="text-align:left"><code>\left( \frac{a}{b} \right)</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/9/0/2905969500b40b2f2c7078206e7e0e81.png" srcset="/img/loading.gif" alt="\left( \frac{a}{b} \right)"></td></tr><tr><td style="text-align:left">方括号，中括号</td><td style="text-align:left"><code>\left[ \frac{a}{b} \right]</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/5/8/8585c96f355f7e301fd5143bea32efaf.png" srcset="/img/loading.gif" alt="\left[ \frac{a}{b} \right]"></td></tr><tr><td style="text-align:left">花括号，大括号</td><td style="text-align:left"><code>\left\{ \frac{a}{b} \right\}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/c/4/d/c4d4af6bab9a0e6532dddd50e7d27158.png" srcset="/img/loading.gif" alt="\left\{ \frac{a}{b} \right\}"></td></tr><tr><td style="text-align:left">角括号</td><td style="text-align:left"><code>\left \langle \frac{a}{b} \right \rangle</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/d/0/6/d06e733ce705ed26a7e048dbd2945371.png" srcset="/img/loading.gif" alt="\left\langle \frac{a}{b} \right \rangle"></td></tr><tr><td style="text-align:left">单竖线，绝对值</td><td style="text-align:left">`\left\</td><td style="text-align:left">\frac{a}{b} \right\</td><td>`</td><td>![\left\</td><td>\frac{a}{b} \right\</td><td>](<a href="http://upload.wikimedia.org/wikipedia/zh/math/4/0/d/40d6c8253b08e8801a01b3f6e5069a62.png" target="_blank" rel="noopener">http://upload.wikimedia.org/wikipedia/zh/math/4/0/d/40d6c8253b08e8801a01b3f6e5069a62.png</a>)</td></tr><tr><td style="text-align:left">双竖线，范</td><td style="text-align:left">`\left \</td><td style="text-align:left">\frac{a}{b} \right \</td><td>`</td><td>![\left \</td><td>\frac{a}{b} \right \</td><td>](<a href="http://upload.wikimedia.org/wikipedia/zh/math/f/3/0/f30a5c412d1e4b4e7c6195ff5d47e947.png" target="_blank" rel="noopener">http://upload.wikimedia.org/wikipedia/zh/math/f/3/0/f30a5c412d1e4b4e7c6195ff5d47e947.png</a>)</td></tr><tr><td style="text-align:left">取整函数 （Floor function）</td><td style="text-align:left"><code>\left \lfloor \frac{a}{b} \right \rfloor</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/c/0/7/c07e1fc7c0150828e55da4efe37e8a3f.png" srcset="/img/loading.gif" alt="\left \lfloor \frac{a}{b} \right \rfloor"></td></tr><tr><td style="text-align:left">取顶函数 （Ceiling function)</td><td style="text-align:left"><code>\left \lceil \frac{c}{d} \right \rceil</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/6/8/868c1e52c339e01204aa1a77d44e3c71.png" srcset="/img/loading.gif" alt="\left \lceil \frac{c}{d} \right \rceil"></td></tr><tr><td style="text-align:left">斜线与反斜线</td><td style="text-align:left"><code>\left / \frac{a}{b} \right \backslash</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/f/3/2f3c5907c0a4fc4fda69eb71890ce952.png" srcset="/img/loading.gif" alt="\left / \frac{a}{b} \right \backslash "></td></tr><tr><td style="text-align:left"><span style="color:blue">上下箭头</span></td><td style="text-align:left"><code>\left \uparrow \frac{a}{b} \right \downarrow</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/f/8/bf8dd6b753cb6aeb801ea23de51ad5bc.png" srcset="/img/loading.gif" alt="\pagecolor{White}\left \uparrow \frac{a}{b} \right \downarrow "></td></tr><tr><td style="text-align:left"><span style="color:blue">上下箭头</span></td><td style="text-align:left"><code>\left \Uparrow \frac{a}{b} \right \Downarrow</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/3/d/e/3de7822465115ade10b47634c22b6b7d.png" srcset="/img/loading.gif" alt="\pagecolor{White}\left \Uparrow \frac{a}{b} \right \Downarrow "></td></tr><tr><td style="text-align:left"><span style="color:blue">上下箭头</span></td><td style="text-align:left"><code>\left \updownarrow \frac{a}{b} \right\Updownarrow</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/0/6/b/06b15cbba4d935fe84a1a503603e4eb0.png" srcset="/img/loading.gif" alt="\pagecolor{White}\left \updownarrow \frac{a}{b} \right \Updownarrow"></td></tr><tr><td style="text-align:left">混合括号</td><td style="text-align:left">`\left [ 0,1 \right ) \left \langle \psi \right \</td><td style="text-align:left">`</td><td><img src="http://upload.wikimedia.org/wikipedia/zh/math/a/3/8/a38771eae1778d0e214f6596a8dc1337.png" srcset="/img/loading.gif" alt="混合括号"> ![\left \langle \psi \right \</td><td>](<a href="http://upload.wikimedia.org/wikipedia/zh/math/d/a/2/da25fc177fd4c53a2c3399c25685dd4c.png" target="_blank" rel="noopener">http://upload.wikimedia.org/wikipedia/zh/math/d/a/2/da25fc177fd4c53a2c3399c25685dd4c.png</a>)</td></tr><tr><td style="text-align:left">单左括号</td><td style="text-align:left"><code>\left \{ \frac{a}{b} \right .</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/c/e/d/ced2a2fb558fe49fa56018b9f8fd69d5.png" srcset="/img/loading.gif" alt="\left \{ \frac{a}{b} \right ."></td></tr><tr><td style="text-align:left">单右括号</td><td style="text-align:left"><code>\left . \frac{a}{b} \right \}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/9/a/c/9ac9b3c6d21c56f5b2b474b0ea1c4b8a.png" srcset="/img/loading.gif" alt="\left . \frac{a}{b} \right \}"></td></tr></tbody></table></div><p>$\left [ 0,1 \right ) \left \langle \psi \right |$</p><table>    <tr>        <td>功能</td>        <td>语法</td>        <td>显示</td>    </tr>    <tr>        <td>圆括号，小括号</td>        <td>\left( \frac{a}{b} \right)</td>        <td><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/9/0/2905969500b40b2f2c7078206e7e0e81.png" srcset="/img/loading.gif" < td>    </td></tr>    <tr>        <td>方括号，中括号</td>        <td>`\left[ \frac{a}{b} \right]`</td>        <td>![\left[ \frac{a}{b} \right]](http://upload.wikimedia.org/wikipedia/zh/math/8/5/8/8585c96f355f7e301fd5143bea32efaf.png)</td>    </tr>    <tr>        <td>花括号，大括号</td>        <td>`\left\{ \frac{a}{b} \right\}`</td>        <td>![\left\{ \frac{a}{b} \right\}](http://upload.wikimedia.org/wikipedia/zh/math/c/4/d/c4d4af6bab9a0e6532dddd50e7d27158.png)</td>    </tr>    <tr>        <td>角括号</td>        <td>`\left \langle \frac{a}{b} \right \rangle`</td>        <td>![\left\langle \frac{a}{b} \right \rangle](http://upload.wikimedia.org/wikipedia/zh/math/d/0/6/d06e733ce705ed26a7e048dbd2945371.png)</td>    </tr>    <tr>        <td>单竖线，绝对值</td>        <td>`\left\| \frac{a}{b} \right\|`</td>        <td>![\left\| \frac{a}{b} \right\|](http://upload.wikimedia.org/wikipedia/zh/math/4/0/d/40d6c8253b08e8801a01b3f6e5069a62.png)</td>    </tr>    <tr>        <td>双竖线，范</td>        <td>`\left \| \frac{a}{b} \right \|`</td>        <td>![\left \| \frac{a}{b} \right \|](http://upload.wikimedia.org/wikipedia/zh/math/f/3/0/f30a5c412d1e4b4e7c6195ff5d47e947.png)</td>    </tr>    <tr>        <td>取整函数 （Floor function）</td>        <td>`\left \lfloor \frac{a}{b} \right \rfloor`</td>        <td>![\left \lfloor \frac{a}{b} \right \rfloor](http://upload.wikimedia.org/wikipedia/zh/math/c/0/7/c07e1fc7c0150828e55da4efe37e8a3f.png)</td>    </tr>    <tr>        <td>取顶函数 （Ceiling function)</td>        <td>`\left \lceil \frac{c}{d} \right \rceil`</td>        <td>![\left \lceil \frac{c}{d} \right \rceil](http://upload.wikimedia.org/wikipedia/zh/math/8/6/8/868c1e52c339e01204aa1a77d44e3c71.png)</td>    </tr>    <tr>        <td>斜线与反斜线</td>        <td>`\left / \frac{a}{b} \right \backslash`</td>        <td>![\left / \frac{a}{b} \right \backslash ](http://upload.wikimedia.org/wikipedia/zh/math/2/f/3/2f3c5907c0a4fc4fda69eb71890ce952.png)</td>    </tr>    <tr>        <td>&lt;span style='color:blue'&gt;上下箭头&lt;/span&gt;</td>        <td>`\left \uparrow \frac{a}{b} \right \downarrow`</td>        <td>![\pagecolor{White}\left \uparrow \frac{a}{b} \right \downarrow ](http://upload.wikimedia.org/wikipedia/zh/math/b/f/8/bf8dd6b753cb6aeb801ea23de51ad5bc.png)</td>    </tr>    <tr>        <td>&lt;span style='color:blue'&gt;上下箭头&lt;/span&gt;</td>        <td>`\left \Uparrow \frac{a}{b} \right \Downarrow`</td>        <td>![\pagecolor{White}\left \Uparrow \frac{a}{b} \right \Downarrow ](http://upload.wikimedia.org/wikipedia/zh/math/3/d/e/3de7822465115ade10b47634c22b6b7d.png)</td>    </tr>    <tr>        <td>&lt;span style='color:blue'&gt;上下箭头&lt;/span&gt;</td>        <td>`\left \updownarrow \frac{a}{b} \right\Updownarrow`</td>        <td>![\pagecolor{White}\left \updownarrow \frac{a}{b} \right \Updownarrow](http://upload.wikimedia.org/wikipedia/zh/math/0/6/b/06b15cbba4d935fe84a1a503603e4eb0.png)</td>    </tr>    <tr>        <td>混合括号</td>        <td>`\left [ 0,1 \right ) \left \langle \psi \right \|`</td>        <td>![混合括号](http://upload.wikimedia.org/wikipedia/zh/math/a/3/8/a38771eae1778d0e214f6596a8dc1337.png) ![\left \langle \psi \right \|](http://upload.wikimedia.org/wikipedia/zh/math/d/a/2/da25fc177fd4c53a2c3399c25685dd4c.png)</td>    </tr>    <tr>        <td>单左括号</td>        <td>`\left \{ \frac{a}{b} \right .`</td>        <td>![\left \{ \frac{a}{b} \right .](http://upload.wikimedia.org/wikipedia/zh/math/c/e/d/ced2a2fb558fe49fa56018b9f8fd69d5.png)</td>    </tr>    <tr>        <td>单右括号</td>        <td>`\left . \frac{a}{b} \right \}`</td>        <td>![\left . \frac{a}{b} \right \}](http://upload.wikimedia.org/wikipedia/zh/math/9/a/c/9ac9b3c6d21c56f5b2b474b0ea1c4b8a.png)</td>    </tr></table><h2 id="上标、下标及积分等"><a href="#上标、下标及积分等" class="headerlink" title="上标、下标及积分等"></a>上标、下标及<a href="http://zh.wikipedia.org/wiki/积分" target="_blank" rel="noopener">积分</a>等</h2><div class="table-container"><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">上标</td><td style="text-align:left"><code>a^2</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/f/1/d/f1d0a7eeee296f457681b906e2cdacac.png" srcset="/img/loading.gif" alt="\pagecolor{White} a^2"></td></tr><tr><td style="text-align:left">下标</td><td style="text-align:left"><code>a_2</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/e/2/8e2d2291a5593af94e996a65b6f726f8.png" srcset="/img/loading.gif" alt="\pagecolor{White} a_2"></td></tr><tr><td style="text-align:left"><span style="color:blue">组合</span></td><td style="text-align:left"><code>a^{2+2}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/0/6/8/0683bba81494fa4172f1052cec9f2eed.png" srcset="/img/loading.gif" alt="\pagecolor{White} a^{2+2}"></td></tr><tr><td style="text-align:left"><span style="color:blue">组合</span></td><td style="text-align:left"><code>a_{i,j}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/d/9/bd93d6a6976568f768d4ef2a91bb2151.png" srcset="/img/loading.gif" alt="\pagecolor{White} a_{i,j}"></td></tr><tr><td style="text-align:left">结合上下标</td><td style="text-align:left"><code>x_2^3</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/f/7/f/f7ffd853543b9b2461e72eb28f8dec3c.png" srcset="/img/loading.gif" alt="\pagecolor{White} x_2^3"></td></tr><tr><td style="text-align:left">前置上下标</td><td style="text-align:left"><code>{}_1^2\!X_3^4</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/4/9/2491f82bb48b549a2aaf289dbb3a7bed.png" srcset="/img/loading.gif" alt="\pagecolor{White} {}_1^2\!X_3^4"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/导数" target="_blank" rel="noopener">导数</a> （<strong>HTML</strong>）</td><td style="text-align:left"><code>x&#39;</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/1/e/21ef9651f881246acc18a8b92368aabf.png" srcset="/img/loading.gif" alt="\pagecolor{White} x&#39;"></td></tr><tr><td style="text-align:left">导数 （<strong>PNG</strong>）</td><td style="text-align:left"><code>x^\prime</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/3/d/e3dbdd462fde1f1fb890aed48df66440.png" srcset="/img/loading.gif" alt="\pagecolor{White} x^\prime"></td></tr><tr><td style="text-align:left">导数 （<strong>错误</strong>）</td><td style="text-align:left"><code>x\prime</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/5/2/e5269181cb3851f57f684d621a9f1fca.png" srcset="/img/loading.gif" alt="\pagecolor{White} x\prime"></td></tr><tr><td style="text-align:left"><span style="color:green">导数点</span></td><td style="text-align:left"><code>\dot{x}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/7/3/3/733b0ff044f2e2cfdb524078740878b1.png" srcset="/img/loading.gif" alt="\pagecolor{White} \dot{x}"></td></tr><tr><td style="text-align:left"><span style="color:green">导数点</span></td><td style="text-align:left"><code>\ddot{y}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/6/f/e6f6b45ec0ee15db8c4caa3f1fe88fdf.png" srcset="/img/loading.gif" alt="\pagecolor{White} \ddot{y}"></td></tr><tr><td style="text-align:left"><span style="color:blue"><a href="http://zh.wikipedia.org/wiki/向量" target="_blank" rel="noopener">向量</a></span></td><td style="text-align:left"><code>\vec{c}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/3/1/f/31fc19819196b91156e13edc6cb3358c.png" srcset="/img/loading.gif" alt="\pagecolor{White} \vec{c}"></td></tr><tr><td style="text-align:left"><span style="color:blue"><a href="http://zh.wikipedia.org/wiki/向量" target="_blank" rel="noopener">向量</a></span></td><td style="text-align:left"><code>\overleftarrow{a b}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/d/9/4/d948738bbfeb127b134f549321c789ff.png" srcset="/img/loading.gif" alt="\pagecolor{White} \overleftarrow{a b}"></td></tr><tr><td style="text-align:left"><span style="color:blue"><a href="http://zh.wikipedia.org/wiki/向量" target="_blank" rel="noopener">向量</a></span></td><td style="text-align:left"><code>\overrightarrow{c d}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/3/c/1/3c115f32f746e2c73d59f1a8cfbe36a2.png" srcset="/img/loading.gif" alt="\pagecolor{White} \overrightarrow{c d}"></td></tr><tr><td style="text-align:left"><span style="color:blue"><a href="http://zh.wikipedia.org/wiki/向量" target="_blank" rel="noopener">向量</a></span></td><td style="text-align:left"><code>\widehat{e f g}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/4/c/b/4cba1e79deac23bb500a8aa203d9a111.png" srcset="/img/loading.gif" alt="\pagecolor{White} \widehat{e f g}"></td></tr><tr><td style="text-align:left">上弧</td><td style="text-align:left"><code>\overset{\frown} {AB}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/4/0/b40456c21e931270a803c1d538d863f2.png" srcset="/img/loading.gif" alt="\pagecolor{White} \overset{\frown} {AB}"></td></tr><tr><td style="text-align:left">上划线</td><td style="text-align:left"><code>\overline{h i j}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/b/1/5b143339bea2ab5becbbb7a3bdaba555.png" srcset="/img/loading.gif" alt="\pagecolor{White} \overline{h i j}"></td></tr><tr><td style="text-align:left">下划线</td><td style="text-align:left"><code>\underline{k l m}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/1/4/7/147943fe9e7a222b850132ddd7882dce.png" srcset="/img/loading.gif" alt="\pagecolor{White} \underline{k l m}"></td></tr><tr><td style="text-align:left"><span style="color:red">上括号</span></td><td style="text-align:left"><code>\overbrace{1+2+\cdots+100}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/9/9/e997df92fcd3679c1935cd73f5fa1a73.png" srcset="/img/loading.gif" alt="\pagecolor{White} \overbrace{1+2+\cdots+100}"></td></tr><tr><td style="text-align:left"><span style="color:red">上括号</span></td><td style="text-align:left"><code>\begin{matrix} 5050 \\ \overbrace{ 1+2+\cdots+100 }\end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/7/3/c/73c0e4b49730d106b752a7c3715b0c3d.png" srcset="/img/loading.gif" alt="\pagecolor{White} \begin{matrix} 5050 \\ \overbrace{ 1+2+\cdots+100 } \end{matrix}"></td></tr><tr><td style="text-align:left"><span style="color:purple">下括号</span></td><td style="text-align:left"><code>\underbrace{a+b+\cdots+z}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/d/7/9/d793da2820a7de9b0c645ac746da79ef.png" srcset="/img/loading.gif" alt="\pagecolor{White} \underbrace{a+b+\cdots+z}"></td></tr><tr><td style="text-align:left"><span style="color:purple">下括号</span></td><td style="text-align:left"><code>\begin{matrix} \underbrace{ a+b+\cdots+z } \\ 26\end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/c/9/bc9dd69fffd702f4846f73579620c811.png" srcset="/img/loading.gif" alt="\pagecolor{White} \begin{matrix} \underbrace{ a+b+\cdots+z } \\ 26 \end{matrix}"></td></tr><tr><td style="text-align:left"><span style="color:orange">求和</span></td><td style="text-align:left"><code>\sum_{k=1}^N k^2</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/6/a/4/6a4791650b77862a6d6bf83f286d9f0c.png" srcset="/img/loading.gif" alt="\pagecolor{White} \sum_{k=1}^N k^2"></td></tr><tr><td style="text-align:left"><span style="color:orange">求和</span></td><td style="text-align:left"><code>\begin{matrix} \sum_{k=1}^N k^2 \end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/3/9/c/39cf5eb70e03dff6ed87382baeca9291.png" srcset="/img/loading.gif" alt="\pagecolor{White} \begin{matrix} \sum_{k=1}^N k^2 \end{matrix}"></td></tr><tr><td style="text-align:left"><span style="color:blue">求积</span></td><td style="text-align:left"><code>\prod_{i=1}^N x_i</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/0/9/f/09f3d0f277e7d0da504ca31e5f546988.png" srcset="/img/loading.gif" alt="\pagecolor{White} \prod_{i=1}^N x_i"></td></tr><tr><td style="text-align:left"><span style="color:blue">求积</span></td><td style="text-align:left"><code>\begin{matrix} \prod_{i=1}^N x_i \end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/f/0/5f06b9aa7b4eba60f3e886bcadde28f0.png" srcset="/img/loading.gif" alt="\pagecolor{White} \begin{matrix} \prod_{i=1}^N x_i \end{matrix}"></td></tr><tr><td style="text-align:left"><span style="color:green">上积</span></td><td style="text-align:left"><code>\coprod_{i=1}^N x_i</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/6/4/c/64c84feef576affcd4a7bdeb785a943c.png" srcset="/img/loading.gif" alt="\pagecolor{White} \coprod_{i=1}^N x_i"></td></tr><tr><td style="text-align:left"><span style="color:green">上积</span></td><td style="text-align:left"><code>\begin{matrix} \coprod_{i=1}^N x_i\end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/5/6/e56db83ea5ba72537c2d85ed8f013276.png" srcset="/img/loading.gif" alt="\pagecolor{White} \begin{matrix} \coprod_{i=1}^N x_i \end{matrix}"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/极限" target="_blank" rel="noopener">极限</a></td><td style="text-align:left"><code>\lim_{n \to \infty}x_n</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/7/9/5/7950c79f217c0a89607656e58d4296fd.png" srcset="/img/loading.gif" alt="\pagecolor{White} \lim_{n \to \infty}x_n"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/极限" target="_blank" rel="noopener">极限</a></td><td style="text-align:left"><code>\begin{matrix} \lim_{n \to \infty}x_n\end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/7/c/e7ccfef303615810c06213be8a676484.png" srcset="/img/loading.gif" alt="\pagecolor{White} \begin{matrix} \lim_{n \to \infty}x_n \end{matrix}"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/积分" target="_blank" rel="noopener">积分</a></td><td style="text-align:left"><code>\int_{-N}^{N} e^x\, dx</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/7/4/9/7491e901a36ceb13bbbe943759b14dc8.png" srcset="/img/loading.gif" alt="\pagecolor{White} \int_{-N}^{N} e^x\, dx"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/积分" target="_blank" rel="noopener">积分</a></td><td style="text-align:left"><code>\begin{matrix} \int_{-N}^{N} e^x\, dx\end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/f/6/5f6531acbd059619af09d3b52039ede5.png" srcset="/img/loading.gif" alt="\pagecolor{White} \begin{matrix} \int_{-N}^{N} e^x\, dx \end{matrix}"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/双重积分" target="_blank" rel="noopener">双重积分</a></td><td style="text-align:left"><code>\iint_{D}^{W} \, dx\,dy</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/4/4/e/44e3f99f1f29b9ee5de871e820cec5f3.png" srcset="/img/loading.gif" alt="\pagecolor{White} \iint_{D}^{W} \, dx\,dy"></td></tr><tr><td style="text-align:left">三重积分</td><td style="text-align:left"><code>\iiint_{E}^{V} \, dx\,dy\,dz</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/c/0/8c050c5bd1690dd42a9f175ec124cb97.png" srcset="/img/loading.gif" alt="\pagecolor{White} \iiint_{E}^{V} \, dx\,dy\,dz"></td></tr><tr><td style="text-align:left">四重积分</td><td style="text-align:left"><code>\iiiint_{F}^{U} \, dx\,dy\,dz\,dt</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/d/b/5/db51c71f79d301a689b3231927a0dfaa.png" srcset="/img/loading.gif" alt="\pagecolor{White} \iiiint_{F}^{U} \, dx\,dy\,dz\,dt"></td></tr><tr><td style="text-align:left">闭合的<a href="http://zh.wikipedia.org/wiki/路径积分" target="_blank" rel="noopener">曲线</a>、<a href="http://zh.wikipedia.org/wiki/曲面积分" target="_blank" rel="noopener">曲面积分</a></td><td style="text-align:left"><code>\oint_{C} x^3\, dx + 4y^2\, dy</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/5/7/e5791a184359ab19ff7e372b15ec0d1b.png" srcset="/img/loading.gif" alt="\pagecolor{White} \oint_{C} x^3\, dx + 4y^2\, dy"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/交集" target="_blank" rel="noopener">交集</a></td><td style="text-align:left"><code>\bigcap_1^{n} p</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/4/6/3/463d4e4bd315c0c6030354a540d85829.png" srcset="/img/loading.gif" alt="\pagecolor{White} \bigcap_1^{n} p"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/并集" target="_blank" rel="noopener">并集</a></td><td style="text-align:left"><code>\bigcup_1^{k} p</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/0/0/80059f454f87af13803b327c202dcec1.png" srcset="/img/loading.gif" alt="\pagecolor{White} \bigcup_1^{k} p"></td></tr></tbody></table></div><p><span style="color:red">上弧 (注: 正确应该用 \overarc, 但在这里行不通。要用建议的语法作为解决办法)</span></p><h2 id="分数、矩阵和多行列式"><a href="#分数、矩阵和多行列式" class="headerlink" title="分数、矩阵和多行列式"></a><a href="http://zh.wikipedia.org/wiki/分数" target="_blank" rel="noopener">分数</a>、<a href="http://zh.wikipedia.org/wiki/矩阵" target="_blank" rel="noopener">矩阵</a>和多行列式</h2><div class="table-container"><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">分数</td><td style="text-align:left"><code>\frac{2}{4}=0.5</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/4/6/d/46dc0b34e0ab4e944a437720a4431d6c.png" srcset="/img/loading.gif" alt="\frac{2}{4}=0.5"></td></tr><tr><td style="text-align:left">小型分数</td><td style="text-align:left"><code>\tfrac{2}{4} = 0.5</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/2/8/4/284667fc4a92790093aa59b61b3667a0.png" srcset="/img/loading.gif" alt="\tfrac{2}{4} = 0.5"></td></tr><tr><td style="text-align:left">大型分数（嵌套）</td><td style="text-align:left"><code>\cfrac{2}{c + \cfrac{2}{d + \cfrac{2}{4}}} =a</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/6/d/0/6d099c02b3faf73f9320656217415906.png" srcset="/img/loading.gif" alt="\cfrac{2}{c + \cfrac{2}{d + \cfrac{2}{4}}} = a"></td></tr><tr><td style="text-align:left">大型分数（不嵌套）</td><td style="text-align:left"><code>\dfrac{2}{4} = 0.5 \qquad \dfrac{2}{c + \dfrac{2}{d +\dfrac{2}{4}}} = a</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/5/a/3/5a37ae94a95c7dd603c20cd4fbe8d9e9.png" srcset="/img/loading.gif" alt="\dfrac{2}{4} = 0.5 \qquad \dfrac{2}{c + \dfrac{2}{d + \dfrac{2}{4}}} = a"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/二项式" target="_blank" rel="noopener">二项式</a>系数</td><td style="text-align:left"><code>\dbinom{n}{r}=\binom{n}{n-r}=C^n_r=C^n_{n-r}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/6/a/5/6a5373cd8c6503567a3c2a69deda71f3.png" srcset="/img/loading.gif" alt="\dbinom{n}{r}=\binom{n}{n-r}=C^n_r=C^n_{n-r}"></td></tr><tr><td style="text-align:left">小型<a href="http://zh.wikipedia.org/wiki/二项式" target="_blank" rel="noopener">二项式</a>系数</td><td style="text-align:left"><code>\tbinom{n}{r}=\tbinom{n}{n-r}=C^n_r=C^n_{n-r}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/0/b/1/0b1188af9ee1a12bc62ca56cf83f268c.png" srcset="/img/loading.gif" alt="\tbinom{n}{r}=\tbinom{n}{n-r}=C^n_r=C^n_{n-r}"></td></tr><tr><td style="text-align:left">大型<a href="http://zh.wikipedia.org/wiki/二项式" target="_blank" rel="noopener">二项式</a>系数</td><td style="text-align:left"><code>\binom{n}{r}=\dbinom{n}{n-r}=C^n_r=C^n_{n-r}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/6/9/b69b21e3b047a91cd1127a498b3267f6.png" srcset="/img/loading.gif" alt="\binom{n}{r}=\dbinom{n}{n-r}=C^n_r=C^n_{n-r}"></td></tr><tr><td style="text-align:left"><span style="color:blue">矩阵</span></td><td style="text-align:left"><code>\begin{matrix} x &amp; y \\ z &amp; v \end{matrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/9/9/b99890966e1b997497211428f8e3419d.png" srcset="/img/loading.gif" alt="\begin{matrix} x &amp; y \\ z &amp; v \end{matrix}"></td></tr><tr><td style="text-align:left"><span style="color:blue">矩阵</span></td><td style="text-align:left"><code>\begin{vmatrix} x &amp; y \\ z &amp; v \end{vmatrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/9/2/b/92b8f0e57848a80b4babd2ba93775370.png" srcset="/img/loading.gif" alt="\begin{vmatrix} x &amp; y \\ z &amp; v \end{vmatrix}"></td></tr><tr><td style="text-align:left"><span style="color:blue">矩阵</span></td><td style="text-align:left"><code>\begin{Vmatrix} x &amp; y \\ z &amp; v \end{Vmatrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/b/a/bba5bfd11057dbb202307584eed8f2dc.png" srcset="/img/loading.gif" alt="\begin{Vmatrix} x &amp; y \\ z &amp; v \end{Vmatrix}"></td></tr><tr><td style="text-align:left"><span style="color:blue">矩阵</span></td><td style="text-align:left"><code>\begin{bmatrix} 0      &amp; \cdots &amp; 0      \\ \vdots &amp; \ddots &amp; \vdots \\ 0      &amp; \cdots &amp; 0 \end{bmatrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/1/a/81a12a09ac84853e3d25323b8643c630.png" srcset="/img/loading.gif" alt="\begin{bmatrix} 0 &amp; \cdots &amp; 0 \\ \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; \cdots &amp; 0\end{bmatrix} "></td></tr><tr><td style="text-align:left"><span style="color:blue">矩阵</span></td><td style="text-align:left"><code>\begin{Bmatrix} x &amp; y \\ z &amp; v \end{Bmatrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/b/f/7/bf7244e2842c8a7d55892e229560d5c1.png" srcset="/img/loading.gif" alt="\begin{Bmatrix} x &amp; y \\ z &amp; v \end{Bmatrix}"></td></tr><tr><td style="text-align:left"><span style="color:blue">矩阵</span></td><td style="text-align:left"><code>\begin{pmatrix} x &amp; y \\ z &amp; v \end{pmatrix}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/4/4/4/444df88e616def4e275b4e920c7b872e.png" srcset="/img/loading.gif" alt="\begin{pmatrix} x &amp; y \\ z &amp; v \end{pmatrix}"></td></tr><tr><td style="text-align:left"><span style="color:blue">矩阵</span></td><td style="text-align:left"><code>\bigl( \begin{smallmatrix} a&amp;b\\ c&amp;d \end{smallmatrix} \bigr)</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/c/d/4/cd49bbc188dce0f93fef57312af5a106.png" srcset="/img/loading.gif" alt=" \bigl( \begin{smallmatrix} a&amp;b\\ c&amp;d \end{smallmatrix} \bigr) "></td></tr><tr><td style="text-align:left">条件定义</td><td style="text-align:left"><code>f(n) = \begin{cases}  n/2,  &amp; \mbox{if }n\mbox{ is even} \\ 3n+1, &amp; \mbox{if }n\mbox{ is odd} \end{cases}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/e/3/a/e3aebe50364cfe498fa9ca99c0036010.png" srcset="/img/loading.gif" alt="f(n) = \begin{cases} n/2, &amp; \mbox{if }n\mbox{ is even} \ 3n+1, &amp; \mbox{if }n\mbox{ is odd} \end{cases} "></td></tr><tr><td style="text-align:left"><span style="color:green">多行等式</span></td><td style="text-align:left"><code>\begin{align} f(x) &amp; = (m+n)^2 \\ &amp; = m^2+2mn+n^2 \\ \end{align}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/1/d/9/1d9f576360e949d08e0fac7cacbbd25c.png" srcset="/img/loading.gif" alt=" \begin{align} f(x) &amp; = (m+n)^2 \ &amp; = m^2+2mn+n^2 \ \end{align} "></td></tr><tr><td style="text-align:left"><span style="color:green">多行等式</span></td><td style="text-align:left"><code>\begin{alignat}{2} f(x) &amp; = (m-n)^2 \\ f(x) &amp; = (-m+n)^2 \\ &amp; = m^2-2mn+n^2 \\ \end{alignat}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/1/8/d/18d4bad0865b57fc1d5b383abe2da1b0.png" srcset="/img/loading.gif" alt=" \begin{alignat}{2} f(x) &amp; = (m-n)^2 \ f(x) &amp; = (-m+n)^2 \ &amp; = m^2-2mn+n^2 \ \end{alignat} "></td></tr><tr><td style="text-align:left">多行等式（左对齐）</td><td style="text-align:left"><code>\begin{array}{lcl} z        &amp; = &amp; a \\ f(x,y,z) &amp; = &amp; x + y + z  \end{array}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/9/b/f/9bf19115bb27237fa997ca93b94ad217.png" srcset="/img/loading.gif" alt="\begin{array}{lcl} z &amp; = &amp; a \ f(x,y,z) &amp; = &amp; x + y + z \end{array}"></td></tr><tr><td style="text-align:left">多行等式（右对齐）</td><td style="text-align:left"><code>\begin{array}{lcr} z        &amp; = &amp; a \\ f(x,y,z) &amp; = &amp; x + y + z     \end{array}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/0/2/a/02ae32735e1e21ba3b05984289fd2763.png" srcset="/img/loading.gif" alt="\begin{array}{lcr} z &amp; = &amp; a \ f(x,y,z) &amp; = &amp; x + y + z \end{array}"></td></tr><tr><td style="text-align:left">长公式换行</td><td style="text-align:left"><code>&lt;math&gt;f(x) \,\!&lt;/math&gt; &lt;math&gt;= \sum_{n=0}^\infty a_n x^n &lt;/math&gt; &lt;math&gt;= a_0+a_1x+a_2x^2+\cdots&lt;/math&gt;</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/8/d/f/8dfae20000a042d8e9047aad1d7e171e.png" srcset="/img/loading.gif" alt="f(x) \,\!"><img src="http://upload.wikimedia.org/wikipedia/zh/math/6/6/3/6633d51d63b35281d030755a6b0aebb1.png" srcset="/img/loading.gif" alt="= \sum_{n=0}^\infty a_n x^n "><img src="http://upload.wikimedia.org/wikipedia/zh/math/f/e/3/fe3e268382fd486e8572daf895bd4c9d.png" srcset="/img/loading.gif" alt="= a_0 +a_1x+a_2x^2+\cdots"></td></tr><tr><td style="text-align:left"><a href="http://zh.wikipedia.org/wiki/方程组" target="_blank" rel="noopener">方程组</a></td><td style="text-align:left"><code>\begin{cases} 3x + 5y +  z \\ 7x - 2y + 4z \\ -6x + 3y + 2z \end{cases}</code></td><td style="text-align:left"><img src="http://upload.wikimedia.org/wikipedia/zh/math/6/3/4/6349be04b3562fc215c7a4e130422a96.png" srcset="/img/loading.gif" alt="\begin{cases} 3x + 5y + z \\ 7x - 2y + 4z \\ -6x + 3y + 2z \end{cases}"></td></tr><tr><td style="text-align:left">数组</td><td style="text-align:left">`\begin{array}{</td><td style="text-align:left">c</td><td>c</td><td></td><td>c</td><td>} a &amp; b &amp; S \\ \hline 0&amp;0&amp;1\\ 0&amp;1&amp;1\\ 1&amp;0&amp;1\\ 1&amp;1&amp;0\\ \end{array} `</td><td>![ \begin{array}{\</td><td>c\</td><td>c\</td><td>\</td><td>c\</td><td>} a &amp; b &amp; S \ \hline 0&amp;0&amp;1\ 0&amp;1&amp;1\ 1&amp;0&amp;1\ 1&amp;1&amp;0\ \end{array} ](<a href="http://upload.wikimedia.org/wikipedia/zh/math/9/1/5/9151e94ef2bb52c18176dbe4c11921ed.png" target="_blank" rel="noopener">http://upload.wikimedia.org/wikipedia/zh/math/9/1/5/9151e94ef2bb52c18176dbe4c11921ed.png</a>)</td></tr></tbody></table></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.tablesgenerator.com/html_tables" target="_blank" rel="noopener">自动生成latex, html…类型表格(单个表格插入很方便)</a></p><p><a href="https://blog.csdn.net/garfielder007/article/details/51646604" target="_blank" rel="noopener">latex公式非常非常全面</a></p><p><a href="https://tableconvert.com/?import=example&amp;output=html" target="_blank" rel="noopener">Excel、URL、Markdown、HTML、JSON、CSV/TSV各种表格形式转换</a></p><p><a href="https://segmentfault.com/a/1190000020155896" target="_blank" rel="noopener">上个链接的使用说明</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Latex常用语法&quot;&gt;&lt;a href=&quot;#Latex常用语法&quot; class=&quot;headerlink&quot; title=&quot;Latex常用语法&quot;&gt;&lt;/a&gt;Latex常用语法&lt;/h1&gt;&lt;p&gt;因为每次都要找，不如总结下来。网页端又显示不正常了，哎，有空闲再调把~&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://sulimin-nb.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://sulimin-nb.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-集成学习</title>
    <link href="https://sulimin-nb.github.io/article/2bebfb2a.html"/>
    <id>https://sulimin-nb.github.io/article/2bebfb2a.html</id>
    <published>2020-07-11T17:09:10.000Z</published>
    <updated>2020-07-14T08:22:34.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成学习-Ensemble-Learning-introduction"><a href="#集成学习-Ensemble-Learning-introduction" class="headerlink" title="集成学习(Ensemble Learning introduction)"></a>集成学习(Ensemble Learning introduction)</h1><p>如果聚合一组预测器(比如分类器或回归器)的预测，得到的预测结果也比最好的单个预测器要好。这样的一组预测器，我们称为集成。这种技术，也被称为集成学习，而一个集成学习的算法则被称为集成方法。</p><ul><li>voting(投票)</li><li>Bagging<ul><li>随机森林(RandomForest)</li></ul></li><li>Boosting<ul><li>AdaBoost</li><li>提升树</li><li>XGboost</li></ul></li><li>stacking</li></ul><h2 id="voting-投票"><a href="#voting-投票" class="headerlink" title="voting(投票)"></a>voting(投票)</h2><p>1、硬投票分类器(Hard Voting)</p><p><img src="/article/2bebfb2a/hard_voting.png" srcset="/img/loading.gif" alt="hard_voting"></p><p>分类结果是01分类，即选择一种结果(跟hard label类似)。</p><p>2、软投票分类器(Soft Voting)<br>分类器能够估算出类别的概率。把概率取平均，取平均概率最高的类别作为预测标签(跟soft label类似)。被称为软投票法。通常来说比硬投票法表现更优，因为它给予那些高度自信的投票更高的权重。</p><p><strong>硬投票表决(sklearn代码简单实现)：</strong></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> VotingClassifier<span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> make_moons<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 使用Sklearn中moon数据集</span>X,y = make_moons(n_samples=<span class="hljs-number">7000</span>,noise=<span class="hljs-number">0.1</span>)plt.scatter(X[:,<span class="hljs-number">0</span>],X[:,<span class="hljs-number">1</span>])</code></pre><p><img src="/article/2bebfb2a/输入.png" srcset="/img/loading.gif" alt="输入"></p><pre><code class="hljs python"><span class="hljs-comment"># 数据集分割</span>X_train, X_test, y_train, y_test = train_test_split(X, y , test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">42</span>)<span class="hljs-comment"># 定义三个基分类器</span><span class="hljs-comment"># -逻辑回归</span><span class="hljs-comment"># -决策树</span><span class="hljs-comment"># -SVM</span>lr = LogisticRegression()dt = DecisionTreeClassifier()svm = SVC()<span class="hljs-comment"># 定义投票分类器</span>voting = VotingClassifier(    estimators=[(<span class="hljs-string">'lr'</span>,lr),(<span class="hljs-string">'dt'</span>,dt),(<span class="hljs-string">'svm'</span>,svm)],    voting=<span class="hljs-string">'hard'</span>)<span class="hljs-comment"># 输出各个分类器的准确率</span><span class="hljs-keyword">for</span> clf <span class="hljs-keyword">in</span> (lr,dt,svm,voting):    clf.fit(X_train,y_train)    y_hat = clf.predict(X_test)    print(clf.__class__.__name__,<span class="hljs-string">'='</span>,accuracy_score(y_test,y_hat))</code></pre><p>输出：</p><pre><code class="hljs ini"><span class="hljs-attr">LogisticRegression</span> = <span class="hljs-number">0.8862857142857142</span><span class="hljs-attr">DecisionTreeClassifier</span> = <span class="hljs-number">0.996</span><span class="hljs-attr">SVC</span> = <span class="hljs-number">0.9988571428571429</span><span class="hljs-attr">VotingClassifier</span> = <span class="hljs-number">0.9977142857142857</span></code></pre><p><strong>软投票表决(跟上面的代码只有一些些不同)：</strong></p><pre><code class="hljs python"><span class="hljs-comment"># 数据集加载是一致的</span><span class="hljs-comment"># 定义三个基分类器</span>lr = LogisticRegression()dt = DecisionTreeClassifier()svm = SVC(probability=<span class="hljs-literal">True</span>) <span class="hljs-comment"># probability设置为True，概率形式的预测结果输入到votingClassifier中</span><span class="hljs-comment"># 定义投票分类器</span>voting = VotingClassifier(    estimators=[(<span class="hljs-string">'lr'</span>,lr),(<span class="hljs-string">'rf'</span>,dt),(<span class="hljs-string">'svc'</span>,svm)],    voting=<span class="hljs-string">'soft'</span> <span class="hljs-comment"># 设置为soft</span>)<span class="hljs-comment"># 输出各个分类器的准确率</span><span class="hljs-keyword">for</span> clf <span class="hljs-keyword">in</span> (lr,dt,svm,voting):    clf.fit(X_train,y_train)    y_hat = clf.predict(X_test)    print(clf.__class__.__name__,<span class="hljs-string">'='</span>,accuracy_score(y_test,y_hat))</code></pre><p>输出：</p><pre><code class="hljs ini"><span class="hljs-attr">LogisticRegression</span> = <span class="hljs-number">0.88</span><span class="hljs-attr">DecisionTreeClassifier</span> = <span class="hljs-number">0.9994285714285714</span><span class="hljs-attr">SVC</span> = <span class="hljs-number">0.9994285714285714</span><span class="hljs-attr">VotingClassifier</span> = <span class="hljs-number">0.9994285714285714</span></code></pre><h2 id="Bagging-并行"><a href="#Bagging-并行" class="headerlink" title="Bagging(并行)"></a>Bagging(并行)</h2><p>bagging和pasting<br>每个预测器使用的算法相同，但是在不同的训练集(随机子集)上进行训练。采样时如果将样本放回，这汇总方法叫做bagging(bootstrap aggregating，自举汇聚法)。采样时样本不放回，这种方法叫做pasting。<br>(实际应用中bagging更加常用。这里就着重介绍bagging)</p><p><img src="/article/2bebfb2a/image-20200713004236379.png" srcset="/img/loading.gif" alt="image-20200713004236379"></p><h3 id="随机森林-Random-Forest"><a href="#随机森林-Random-Forest" class="headerlink" title="随机森林(Random Forest)"></a>随机森林(Random Forest)</h3><p>随机森林是决策树的集成，通常用bagging(有时也可能是pasting)方法训练。除了先构建一个BaggingClassifier然后将结果传输到DecisionTreeClassifier，还有一种方法就是使用RandomForestClassifier类。</p><p>大概有63.2%样本会被抽到，用作训练集。未抽到的37.8%样本(out of bag简称oob)作为测试集。<br>证明：假设进行N次抽样，未抽到的概率为 $1-(1-\frac{1}{N})^N=1-[(1+\frac{1}{-N})^{-N}]^{-1}$，当N趋于无穷大时，上式趋于$1-e^{-1}=63.2\%$。</p><p><strong>代码：</strong></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npiris = load_iris()X = iris.datay = iris.target<span class="hljs-comment"># bootstrap = True 为bagging，bootstrap=False为pasting</span><span class="hljs-comment"># max_samples设置为整数表示的就是采样的样本数，设置为浮点数表示的是max_samples*x.shape[0]</span><span class="hljs-comment"># oob_score=True表示未抽到的样本作为测试集</span><span class="hljs-comment"># n_estimators基本分类器的数量</span>bag_clf = BaggingClassifier(    SVC(),    n_estimators=<span class="hljs-number">500</span>, max_samples=<span class="hljs-number">1.0</span>, bootstrap=<span class="hljs-literal">True</span>, n_jobs=<span class="hljs-number">-1</span>     ,oob_score=<span class="hljs-literal">True</span>)bag_clf.fit(X,y)<span class="hljs-comment"># oob_score默认为False时进行下列预测</span><span class="hljs-comment"># y_hat = bag_clf.predict(X)</span><span class="hljs-comment"># print(bag_clf.__class__.__name__,'=',accuracy_score(y,y_hat))</span><span class="hljs-comment"># BaggingClassifier = 0.9733333333333334</span>print(bag_clf.oob_score_)</code></pre><p>输出：</p><pre><code class="hljs angelscript"><span class="hljs-number">0.9666666666666667</span></code></pre><p>如果基本分类器是决策树，那么集成后的分类器就是随机森林</p><pre><code class="hljs python">bag_clf = BaggingClassifier(    DecisionTreeClassifier(splitter=<span class="hljs-string">"random"</span>, max_leaf_nodes=<span class="hljs-number">16</span>),    n_estimators=<span class="hljs-number">500</span>, max_samples=<span class="hljs-number">1.0</span>, bootstrap=<span class="hljs-literal">True</span>, n_jobs=<span class="hljs-number">-1</span>)bag_clf.fit(X,y)y_hat = bag_clf.predict(X)print(bag_clf.__class__.__name__,<span class="hljs-string">'='</span>,accuracy_score(y,y_hat))</code></pre><p>输出：</p><pre><code class="hljs ini"><span class="hljs-attr">BaggingClassifier</span> = <span class="hljs-number">1.0</span></code></pre><p>Sklearn也提供了直接实现随机森林的API</p><pre><code class="hljs PYTHON">rnd_clf = RandomForestClassifier(n_estimators=<span class="hljs-number">500</span>, n_jobs=<span class="hljs-number">-1</span>)rnd_clf.fit(X, y)print(rnd_clf.__class__.__name__, <span class="hljs-string">'='</span>, accuracy_score(y, y_hat))</code></pre><p>输出：</p><pre><code class="hljs ini"><span class="hljs-attr">RandomForestClassifier</span> = <span class="hljs-number">1.0</span></code></pre><h2 id="Boosting-串行"><a href="#Boosting-串行" class="headerlink" title="Boosting(串行)"></a>Boosting(串行)</h2><p>将几个弱学习器结合成一个强学习器的集成方法。大多数提升法的总体思想是循环训练预测器，每一次都对其前序做出一些改正。</p><ul><li>AdaBoost</li><li>GBDT</li><li>XGBoost</li></ul><h3 id="AdaBoost基本原理"><a href="#AdaBoost基本原理" class="headerlink" title="AdaBoost基本原理"></a>AdaBoost基本原理</h3><ul><li><p>AdaBoost：从弱学习算法出发，反复学习得到一系列弱分类器(又称基本分类器)，然后组合这些弱分类器构成一个强分类器。</p></li><li><p>要解决的两个问题：</p><p>1、每一轮如何改变训练数据的权值或概率分布：提高那些被前一轮错误分类样本的权值，降低那些被正确分类样本的权值。<br>2、如何将弱分类器组合成强分类器：加大分类误差小的弱分类器权值，减小分类误差率大的弱分类器权值。</p></li></ul><h3 id="AdaBoost算法流程"><a href="#AdaBoost算法流程" class="headerlink" title="AdaBoost算法流程"></a>AdaBoost算法流程</h3><p>（1）初始化训练数据权值分布  $D_1=(w_{11},\ldots,w_{1i},\ldots,w_{1m}),\quad w_{1i}=\frac{1}{m}$<br>（2）对于每一轮训练t=1,2,…,T<br>&emsp;&emsp;(a)使用具有权值分布<span style="color:blue">Dt</span>的训练数据集进行学习，得到基本分类器<span style="color:blue">$G_t(x)$</span><br>&emsp;&emsp;(b)计算$G_t(x)$在训练数据集上的分类误差率：</p><script type="math/tex; mode=display">e_t=\sum_{i=1}^{m}P(G_t(x^{(i)})\neq y^{(i)})=\sum_{i=1}^{m}w_{ti}I(G_t(x^{(i)}) \neq y^{(i)})</script><p>&emsp;&emsp;(c)计算$G_t(x)$的权重系数  $\alpha_t = \frac{1}{2}\log{\frac{1-e_t}{e_t}}$<br>&emsp;&emsp;(d)更新训练数据集的权重分布  $D_{t+1}=(w_{t+1,1},\ldots,w_{t+1,i},\ldots,w_{t+1,m})$<br>（3）构建基本分类器的线性组合  $w_{t+1,i}=\frac{w_{ti}}{Z_t}\exp{(-\alpha_t y^{(i)} G_t(x^{(i)}))}$，其中$Z_t$是归一化因子，$Z_t=\sum_{i=1}^{m}w_{ti}\exp{(-\alpha_t y^{(i)}) G_t(x^{(i)})}$<br>&emsp;&emsp;            $f(x)=\sum_{i=1}^{T} \alpha_t G_t(x)$   得到最终分类器   $G(x)=sign(f(x))=sign(\sum_{t=1}^{T} \alpha_t G_t(x))$</p><p><img src="/article/2bebfb2a/image-20200713150853956.png" srcset="/img/loading.gif" alt="image-20200713150853956"></p><p><img src="/article/2bebfb2a/image-20200713153247630.png" srcset="/img/loading.gif" alt="image-20200713153247630"></p><p><img src="/article/2bebfb2a/image-20200713153314897.png" srcset="/img/loading.gif" alt="image-20200713153314897"></p><h3 id="AdaBoost代码-Sklearn实现"><a href="#AdaBoost代码-Sklearn实现" class="headerlink" title="AdaBoost代码(Sklearn实现)"></a>AdaBoost代码(Sklearn实现)</h3><p><strong>代码(参数明细见<a href="https://www.cnblogs.com/pinard/p/6136914.html" target="_blank" rel="noopener">scikit-learn Adaboost类库使用小结</a>)：</strong></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> AdaBoostClassifier<span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npdata = np.loadtxt(<span class="hljs-string">'data/wine.data'</span>,delimiter=<span class="hljs-string">','</span>)X = data[:,<span class="hljs-number">1</span>:]y = data[:,<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]<span class="hljs-comment"># 对于决策树而言，归一化作用不明显，对于逻辑回归而言，归一化是比较有用的~</span><span class="hljs-comment"># from sklearn.preprocessing import StandardScaler</span><span class="hljs-comment"># X = StandardScaler().fit_transform(X)</span><span class="hljs-comment"># from sklearn.linear_model import LogisticRegression</span><span class="hljs-comment"># rf = LogisticRegression()</span>X_train,X_test,y_train,y_test = train_test_split(X,y.ravel(),train_size=<span class="hljs-number">0.8</span>,random_state=<span class="hljs-number">0</span>)<span class="hljs-comment"># 定义弱(基)分类器</span>rf = DecisionTreeClassifier()<span class="hljs-comment"># 定义AdaBoost分类器</span>model = AdaBoostClassifier(base_estimator=rf,n_estimators=<span class="hljs-number">50</span>,algorithm=<span class="hljs-string">"SAMME.R"</span>, learning_rate=<span class="hljs-number">0.5</span>)model.fit(X_train,y_train)<span class="hljs-comment">#AdaBoostClassifier(algorithm='SAMME.R',</span><span class="hljs-comment">#                   base_estimator=DecisionTreeClassifier(ccp_alpha=0.0,</span><span class="hljs-comment">#                                                         class_weight=None,</span><span class="hljs-comment">#                                                         criterion='gini',</span><span class="hljs-comment">#                                                         max_depth=None,</span><span class="hljs-comment">#                                                         max_features=None,</span><span class="hljs-comment">#                                                         max_leaf_nodes=None,</span><span class="hljs-comment">#                                                         min_impurity_decrease=0.0,</span><span class="hljs-comment">#                                                         min_impurity_split=None,</span><span class="hljs-comment">#                                                         min_samples_leaf=1,</span><span class="hljs-comment">#                                                         min_samples_split=2,</span><span class="hljs-comment">#                                                         min_weight_fraction_leaf=0.0,</span><span class="hljs-comment">#                                                         presort='deprecated',</span><span class="hljs-comment">#                                                         random_state=None,</span><span class="hljs-comment">#                                                         splitter='best'),</span><span class="hljs-comment">#                   learning_rate=0.5, n_estimators=50, random_state=None)</span>y_train_hat = model.predict(X_train)print(<span class="hljs-string">"train accuarcy:"</span>,accuracy_score(y_train,y_train_hat))y_test_hat = model.predict(X_test)print(<span class="hljs-string">"test accuarcy:"</span>, accuracy_score(y_test, y_test_hat))</code></pre><p>输出：</p><pre><code class="hljs subunit">train accuarcy: 1.0<span class="hljs-keyword">test </span>accuarcy: 0.9722222222222222</code></pre><hr><h3 id="梯度提升-Gradient-Boosting-Tree"><a href="#梯度提升-Gradient-Boosting-Tree" class="headerlink" title="梯度提升(Gradient Boosting Tree)"></a>梯度提升(Gradient Boosting Tree)</h3><p>与AdaBoost类似，梯度提升也是逐步在集成中添加预测器，与AdaBoost类似，梯度提升也是在继承中添加预测器，每一个都对其前序做出改正。不同之处在于，它不是像AdaBoost那样在每个迭代中调整实例权重，而是<strong>让新的预测器针对前一个预测器的残差进行拟合</strong>。</p><p>提升树种每一颗树学的是之前所有树结论累积的残差。残差就是真实值和预测值的差值。如A的真实年龄是18，第一棵树预测年龄是12岁，则残差值为6.接下来在第二颗树把A的年龄当初6岁去学习，如果第二棵树能把A分到6岁的叶子节点，那累加两颗树的结论就是A的真实年龄；如果第二棵树的结论是5岁，则A仍然存在1岁的残差，第三棵树把A的年龄当成1岁，继续学。最后，所有树的累加值就是最终预测值。<br>提升树算法<br>（1）初始化$f_0(x)=0$<br>（2）对m=1,2,…,M<br>&emsp;&emsp;(a) 计算残差  $r_{mi}=y_i-f_{m-1}(x_i)$<br>&emsp;&emsp;(b) 拟合残差 $r_{mi}$ 学习一个回归树 $T(x;\Theta_m)$<br>&emsp;&emsp;(c) 更新  $f_m(x)=f_{m-1}(x)+T(x;\Theta_m)$<br>（3）得到提升树   $f_M(x)=\sum_{i=1}^{M}T(x;\Theta_m)$</p><p><strong>代码(预测一维数据的结果)：</strong></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeRegressor<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> GradientBoostingRegressor<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loaddata</span><span class="hljs-params">()</span>:</span>    data = np.loadtxt(<span class="hljs-string">'data/data.txt'</span>,delimiter=<span class="hljs-string">','</span>)    n = data.shape[<span class="hljs-number">1</span>]<span class="hljs-number">-1</span> <span class="hljs-comment">#特征数</span>    X = data[:,<span class="hljs-number">0</span>:n]    y = data[:,<span class="hljs-number">-1</span>].reshape(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> X,yX,y = loaddata()plt.scatter(X,y)</code></pre><p><img src="/article/2bebfb2a/输出1.png" srcset="/img/loading.gif" alt="输出1"></p><p>1）根据算法原理手动实现(使用决策树回归DesicionTreeRegressor)</p><pre><code class="hljs python"><span class="hljs-comment"># 1、定义第一课树(最大深度设定为5)，并进行训练</span>tree_reg1 = DecisionTreeRegressor(max_depth=<span class="hljs-number">5</span>)tree_reg1.fit(X, y)<span class="hljs-comment">#DecisionTreeRegressor(criterion='mse', max_depth=5, max_features=None,</span><span class="hljs-comment">#                      max_leaf_nodes=None, min_impurity_decrease=0.0,</span><span class="hljs-comment">#                      min_impurity_split=None, min_samples_leaf=1,</span><span class="hljs-comment">#                      min_samples_split=2, min_weight_fraction_leaf=0.0,</span><span class="hljs-comment">#                      presort=False, random_state=None, splitter='best')</span><span class="hljs-comment"># 2、计算残差，并把残差当做目标值训练第二棵树(最大深度设定为5)</span>y2 = y - tree_reg1.predict(X).reshape(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)tree_reg2 = DecisionTreeRegressor(max_depth=<span class="hljs-number">5</span>)tree_reg2.fit(X, y2)<span class="hljs-comment"># 3、继续计算残差，并把残差当做目标值训练第三棵树(最大深度设定为5)</span>y3 = y2 - tree_reg2.predict(X).reshape(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)tree_reg3 = DecisionTreeRegressor(max_depth=<span class="hljs-number">5</span>)tree_reg3.fit(X, y3)<span class="hljs-comment"># 4、测试</span><span class="hljs-comment"># 取训练集前5条数据，并对前5条数据做预测</span>X_new = X[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>,]y_pred = sum(tree.predict(X_new) <span class="hljs-keyword">for</span> tree <span class="hljs-keyword">in</span> (tree_reg1, tree_reg2, tree_reg3))print(y_pred)</code></pre><p>输出;</p><pre><code class="hljs angelscript">[<span class="hljs-number">17.61560196</span>  <span class="hljs-number">9.15380196</span> <span class="hljs-number">12.831</span>       <span class="hljs-number">4.57199973</span>  <span class="hljs-number">6.68971688</span>]</code></pre><p>2）直接使用sklearn提供的GradientBoostingRegressor</p><pre><code class="hljs python">gbrt = GradientBoostingRegressor(max_depth=<span class="hljs-number">5</span>, n_estimators=<span class="hljs-number">3</span>, learning_rate=<span class="hljs-number">1.0</span>)gbrt.fit(X, y)print(gbrt.predict(X_new))</code></pre><p>输出：</p><pre><code class="hljs angelscript">[<span class="hljs-number">17.61560196</span>  <span class="hljs-number">9.15380196</span> <span class="hljs-number">12.831</span>       <span class="hljs-number">4.57199973</span>  <span class="hljs-number">6.68971688</span>]</code></pre><h3 id="梯度提升树-Gradient-Boosting-Tree"><a href="#梯度提升树-Gradient-Boosting-Tree" class="headerlink" title="梯度提升树(Gradient Boosting Tree)"></a>梯度提升树(Gradient Boosting Tree)</h3><p>上例中使用的平方损失：$L(y, f_t(x))=\frac{1}{2}(y-f_t(x))^2$<br>其负梯度为：$-\frac{\partial L(y,f_t(x))}{\partial f_t(x)}=y-f_t(x)$该负梯度就是残差。</p><ul><li>平方损失拟合残差值</li><li>非平方损失拟合负梯度值</li></ul><p><span style="color:blue">GBDT：其关键是利用损失函数的负梯度作为提升树算法中要拟合的值。</span></p><h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><p><img src="/article/2bebfb2a/image-20200713173830276.png" srcset="/img/loading.gif" alt="image-20200713173830276"></p><p>q表示树结构，q把每一个样本点x映射到某一个叶子节点。<br>T是叶子节点的数量<br>w是叶子节点的权值(实际就是预测值)<br>$f_k$表示第k个树，该树的结构由q表示，预测值由w表示。<br>预测值表示为：</p><center><img src="/article/2bebfb2a/image-20200713174532589.png" srcset="/img/loading.gif" width="400" hight="200"></center><p>或：</p><center><img src="/article/2bebfb2a/image-20200713174835308.png" srcset="/img/loading.gif" width="400" hight="200"></center><h4 id="XGBoost损失函数-Loss-function-of-XGBoost"><a href="#XGBoost损失函数-Loss-function-of-XGBoost" class="headerlink" title="XGBoost损失函数(Loss function of XGBoost)"></a>XGBoost损失函数(Loss function of XGBoost)</h4><center><img src="/article/2bebfb2a/image-20200713174532589.png" srcset="/img/loading.gif" width="400" hight="200"></center><p>假设损失函数是平方损失，则初值可取所有样本的平均数。</p><left><img src="/article/2bebfb2a/image-20200713175405736.png" srcset="/img/loading.gif" width="400" hight="450"></left><p>因此损失函数可写为：</p><center><img src="/article/2bebfb2a/image-20200713180755125.png" srcset="/img/loading.gif" width="400" hight="200"></center><p>橙框中为正则项，C为常数项。</p><center><img src="/article/2bebfb2a/image-20200713181458963.png" srcset="/img/loading.gif"></center><p>例子：</p><p><img src="/article/2bebfb2a/image-20200713181511123.png" srcset="/img/loading.gif" alt="image-20200713181511123"></p><p>其中$\Omega=\gamma \times 3 + \frac{1}{2} \lambda (4+0.01 + 1)$</p><h4 id="XGBoost求解-XGBoost-solution"><a href="#XGBoost求解-XGBoost-solution" class="headerlink" title="XGBoost求解(XGBoost solution)"></a>XGBoost求解(XGBoost solution)</h4><p>目标函数：</p><center><img src="/article/2bebfb2a/image-20200713213336955.png" srcset="/img/loading.gif" width="400" hight="200"></center><p>根据Taylor公式：</p><center><img src="/article/2bebfb2a/image-20200713215352667.png" srcset="/img/loading.gif" width="400" hight="200"></center><p>令：</p><center><img src="/article/2bebfb2a/image-20200713215517498.png" srcset="/img/loading.gif" width="400" hight="200"></center><p>得：</p><center><img src="/article/2bebfb2a/image-20200713215547591.png" srcset="/img/loading.gif" width="500" hight="250"></center><p>对上式求解：</p><center><img src="/article/2bebfb2a/image-20200713215739357.png" srcset="/img/loading.gif" width="550" hight="300"></center><p>对于</p><center><img src="/article/2bebfb2a/image-20200713222203209.png" srcset="/img/loading.gif" width="450" hight="250"></center><p>令：</p><center><img src="/article/2bebfb2a/image-20200713222403711.png" srcset="/img/loading.gif" width="250" hight="250"></center><p>得：</p><center><img src="/article/2bebfb2a/image-20200713222517216.png" srcset="/img/loading.gif" width="350" hight="250"></center><p>对w求偏导：</p><center><img src="/article/2bebfb2a/image-20200713222611532.png" srcset="/img/loading.gif" width="400" hight="250"></center><p>代入上一步的目标函数$J(f_t)$得：</p><center><img src="/article/2bebfb2a/image-20200713222949320.png" srcset="/img/loading.gif" width="250" hight="250"></center><h4 id="XGBoost中树结构的生成"><a href="#XGBoost中树结构的生成" class="headerlink" title="XGBoost中树结构的生成"></a>XGBoost中树结构的生成</h4><p><img src="/article/2bebfb2a/image-20200713224002458.png" srcset="/img/loading.gif" alt="image-20200713224002458"></p><ul><li>构造决策树的结构：枚举可行的分割点，选择增益最大的划分</li></ul><p><img src="/article/2bebfb2a/image-20200713224803648.png" srcset="/img/loading.gif" alt="image-20200713224803648"></p><h5 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h5><p>sklearn并没有集成xgboost，使用前需安装 命令:pip install xgboost</p><h6 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h6><p>XGBoost中数据形式可以是libsvm的，libsvm作用是对稀疏特征进行优化，看个例子：<br>1 101:1.2 102:0.03<br>0 1:2.1 10001:300 10002:400<br>0 2:1.2 1212:21 7777:2<br>每行表示一个样本，每行开头0，1表示标签，而后面的则是特征索引：数值，其他未表示都是0.</p><p>我们以判断蘑菇是否有毒为例子来做后续的训练。数据集来自：<a href="http://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/" target="_blank" rel="noopener">http://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/</a> ，其中蘑菇有22个属性，将这些原始的特征加工后得到126维特征，并保存为libsvm格式，标签是表示蘑菇是否有毒。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> xgboost <span class="hljs-keyword">as</span> xgbdata_train = xgb.DMatrix(<span class="hljs-string">'data/agaricus.txt.train'</span>)data_test = xgb.DMatrix(<span class="hljs-string">'data/agaricus.txt.test'</span>)</code></pre><h6 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h6><ul><li><p>eta：可看成学习率learning_rate。典型值一般设置为：0.01-0.2</p></li><li><p>gamma：分裂节点时，损失函数减小值只有大于等于gamma才分裂，gamma值越大，算法越保守，越不容易过拟合，但性能就不一定能保证，需要平衡。</p></li><li><p>objective</p><ul><li>reg:linear：线性回归</li><li>reg:logistic：逻辑回归</li><li>binary:logistic 二分类的逻辑回归，返回预测的概率</li><li>binary:logitraw：二分类逻辑回归，输出是逻辑为0/1的前一步的分数</li><li>multi:softmax：用于Xgboost 做多分类问题，需要设置num_class（分类的个数）</li><li>multi:softprob：和softmax一样，但是返回的是每个数据属于各个类别的概率。</li><li>rank:pairwise：让Xgboost 做排名任务，通过最小化(Learn to rank的一种方法)</li></ul></li><li><p>max_depth：决策树最大深度</p></li><li><p>silent：0 (silent), 1 (warning), 2 (info), 3 (debug)</p><p>更多参数参见：<a href="https://xgboost.readthedocs.io/en/latest/parameter.html" target="_blank" rel="noopener">https://xgboost.readthedocs.io/en/latest/parameter.html</a></p></li></ul><pre><code class="hljs python">param = &#123;<span class="hljs-string">'max_depth'</span>: <span class="hljs-number">3</span>, <span class="hljs-string">'eta'</span>: <span class="hljs-number">0.3</span>, <span class="hljs-string">'objective'</span>: <span class="hljs-string">'binary:logistic'</span>&#125;watchlist = [(data_test, <span class="hljs-string">'eval'</span>), (data_train, <span class="hljs-string">'train'</span>)]n_round = <span class="hljs-number">6</span>model = xgb.train(param, data_train, num_boost_round=n_round, evals=watchlist)</code></pre><h6 id="计算准确率"><a href="#计算准确率" class="headerlink" title="计算准确率"></a>计算准确率</h6><pre><code class="hljs python">y_hat = model.predict(data_test)y_pred = y_hat.copy()y_pred[y_hat&gt;=<span class="hljs-number">0.5</span>]=<span class="hljs-number">1</span>y_pred[y_hat&lt;<span class="hljs-number">0.5</span>]=<span class="hljs-number">0</span>y = data_test.get_label()<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_scoreprint(<span class="hljs-string">'accuracy_score='</span>,accuracy_score(y,y_pred))</code></pre><p>输出：</p><pre><code class="hljs ini"><span class="hljs-attr">accuracy_score</span>= <span class="hljs-number">1.0</span></code></pre><h6 id="查看-0-5-颗决策树"><a href="#查看-0-5-颗决策树" class="headerlink" title="查看[0-5]颗决策树"></a>查看[0-5]颗决策树</h6><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot<span class="hljs-keyword">import</span> graphvizxgb.to_graphviz(model, num_trees=<span class="hljs-number">1</span>) <span class="hljs-comment"># 以第二颗为例</span></code></pre><p><img src="/article/2bebfb2a/输出2.png" srcset="/img/loading.gif" alt></p><h5 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h5><p>(写法不同)</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> xgboost <span class="hljs-keyword">as</span> xgb<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 读取数据(把libsvm格式读取成以前我们常用的二维数组形式)</span><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_svmlight_file<span class="hljs-comment">#data_train = xgb.DMatrix('data/agaricus.txt.train')</span><span class="hljs-comment">#data_test = xgb.DMatrix('data/agaricus.txt.test')</span>X_train,y_train = load_svmlight_file(<span class="hljs-string">'data/agaricus.txt.train'</span>)X_test,y_test = load_svmlight_file(<span class="hljs-string">'data/agaricus.txt.test'</span>)<span class="hljs-comment"># 把稀疏数组转换为稠密数组</span>X_train.toarray().shape<span class="hljs-comment"># (6513, 126)</span><span class="hljs-comment"># 设置参数</span>model =xgb.XGBClassifier(max_depth=<span class="hljs-number">2</span>, learning_rate=<span class="hljs-number">1</span>, n_estimators=<span class="hljs-number">6</span>, objective=<span class="hljs-string">'binary:logistic'</span>)model.fit(X_train, y_train)<span class="hljs-comment"># 计算准确率</span><span class="hljs-comment"># 训练集上准确率</span>train_preds = model.predict(X_train)train_predictions = [round(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> train_preds]train_accuracy = accuracy_score(y_train, train_predictions)<span class="hljs-keyword">print</span> (<span class="hljs-string">"Train Accuary: %.2f%%"</span> % (train_accuracy * <span class="hljs-number">100.0</span>))<span class="hljs-comment"># 测试集上准确率</span><span class="hljs-comment"># make prediction</span>preds = model.predict(X_test)predictions = [round(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> preds]test_accuracy = accuracy_score(y_test, predictions)print(<span class="hljs-string">"Test Accuracy: %.2f%%"</span> % (test_accuracy * <span class="hljs-number">100.0</span>))</code></pre><p>输出：</p><pre><code class="hljs subunit">Train Accuary: 99.88%<span class="hljs-keyword">Test </span>Accuracy: 100.00%</code></pre><h6 id="GridSearchcv搜索最优参数"><a href="#GridSearchcv搜索最优参数" class="headerlink" title="GridSearchcv搜索最优参数"></a>GridSearchcv搜索最优参数</h6><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCVmodel = xgb.XGBClassifier(learning_rate=<span class="hljs-number">0.1</span>, objective=<span class="hljs-string">'binary:logistic'</span>)param_grid = &#123; <span class="hljs-string">'n_estimators'</span>: range(<span class="hljs-number">1</span>, <span class="hljs-number">51</span>, <span class="hljs-number">1</span>), <span class="hljs-string">'max_depth'</span>:range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>)&#125;clf = GridSearchCV(model, param_grid, <span class="hljs-string">"accuracy"</span>,cv=<span class="hljs-number">5</span>)clf.fit(X_train, y_train)print(clf.best_params_, clf.best_score_)</code></pre><p>输出：</p><pre><code class="hljs scheme">(&#123;<span class="hljs-symbol">'max_depth</span><span class="hljs-symbol">':</span> <span class="hljs-number">2</span>, <span class="hljs-symbol">'n_estimators</span><span class="hljs-symbol">':</span> <span class="hljs-number">30</span>&#125;, <span class="hljs-number">0.9841860859908541</span>)</code></pre><h6 id="early-stop"><a href="#early-stop" class="headerlink" title="early-stop"></a>early-stop</h6><p>设置验证valid集，迭代过程中发现在验证集上错误率增加，则提前停止迭代。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_splitX_train_part, X_validate, y_train_part, y_validate = train_test_split(X_train, y_train, test_size=<span class="hljs-number">0.3</span>,random_state=<span class="hljs-number">0</span>)<span class="hljs-comment"># 设置boosting迭代计算次数</span>num_round = <span class="hljs-number">100</span>bst =xgb.XGBClassifier(max_depth=<span class="hljs-number">2</span>, learning_rate=<span class="hljs-number">0.1</span>, n_estimators=num_round, objective=<span class="hljs-string">'binary:logistic'</span>)eval_set =[(X_validate, y_validate)]<span class="hljs-comment"># early_stopping_rounds：连续x次在验证集的错误率均不变或上升时即停止。</span>bst.fit(X_train_part, y_train_part, early_stopping_rounds=<span class="hljs-number">10</span>, eval_metric=<span class="hljs-string">"error"</span>, eval_set=eval_set, verbose=<span class="hljs-literal">True</span>)</code></pre><p>输出：</p><pre><code class="hljs vbnet">[<span class="hljs-number">0</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04862</span>Will train <span class="hljs-keyword">until</span> validation_0-<span class="hljs-keyword">error</span> hasn<span class="hljs-comment">'t improved in 10 rounds.</span>[<span class="hljs-number">1</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04299</span>[<span class="hljs-number">2</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04862</span>[<span class="hljs-number">3</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04299</span>[<span class="hljs-number">4</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04862</span>[<span class="hljs-number">5</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04862</span>[<span class="hljs-number">6</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04299</span>[<span class="hljs-number">7</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04299</span>[<span class="hljs-number">8</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04299</span>[<span class="hljs-number">9</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04299</span>[<span class="hljs-number">10</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.04299</span>[<span class="hljs-number">11</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.02405</span>[<span class="hljs-number">12</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.02968</span>[<span class="hljs-number">13</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">14</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">15</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">16</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">17</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">18</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">19</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">20</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span>[<span class="hljs-number">21</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.02661</span>[<span class="hljs-number">22</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.02354</span>[<span class="hljs-number">23</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.02354</span>Stopping. Best iteration:[<span class="hljs-number">13</span>]validation_0-<span class="hljs-keyword">error</span>:<span class="hljs-number">0.01945</span></code></pre><p>Out[13]:</p><pre><code class="hljs routeros">XGBClassifier(<span class="hljs-attribute">base_score</span>=0.5, <span class="hljs-attribute">booster</span>=<span class="hljs-string">'gbtree'</span>, <span class="hljs-attribute">colsample_bylevel</span>=1,              <span class="hljs-attribute">colsample_bynode</span>=1, <span class="hljs-attribute">colsample_bytree</span>=1, <span class="hljs-attribute">gamma</span>=0, <span class="hljs-attribute">gpu_id</span>=-1,              <span class="hljs-attribute">importance_type</span>=<span class="hljs-string">'gain'</span>, <span class="hljs-attribute">interaction_constraints</span>=<span class="hljs-string">''</span>,              <span class="hljs-attribute">learning_rate</span>=0.1, <span class="hljs-attribute">max_delta_step</span>=0, <span class="hljs-attribute">max_depth</span>=2,              <span class="hljs-attribute">min_child_weight</span>=1, <span class="hljs-attribute">missing</span>=nan, <span class="hljs-attribute">monotone_constraints</span>=<span class="hljs-string">'()'</span>,              <span class="hljs-attribute">n_estimators</span>=100, <span class="hljs-attribute">n_jobs</span>=0, <span class="hljs-attribute">num_parallel_tree</span>=1,              <span class="hljs-attribute">objective</span>=<span class="hljs-string">'binary:logistic'</span>, <span class="hljs-attribute">random_state</span>=0, <span class="hljs-attribute">reg_alpha</span>=0,              <span class="hljs-attribute">reg_lambda</span>=1, <span class="hljs-attribute">scale_pos_weight</span>=1, <span class="hljs-attribute">subsample</span>=1,              <span class="hljs-attribute">tree_method</span>=<span class="hljs-string">'exact'</span>, <span class="hljs-attribute">validate_parameters</span>=1, <span class="hljs-attribute">verbosity</span>=None)</code></pre><p>将错误率可视化，进行更直观的观察。</p><pre><code class="hljs markdown">results = bst.evals_result()epochs = len(results[<span class="hljs-string">'validation_0'</span>][<span class="hljs-symbol">'error'</span>])x_axis = range(0, epochs)<span class="hljs-section"># plot log loss</span>plt.plot(x<span class="hljs-emphasis">_axis, results['validation_</span>0']['error'], label='Test')plt.ylabel('Error')plt.xlabel('Round')plt.title('XGBoost Early Stop')plt.show()</code></pre><p><img src="/article/2bebfb2a/输出3.png" srcset="/img/loading.gif" alt="输出3"></p><h6 id="可视化学习曲线"><a href="#可视化学习曲线" class="headerlink" title="可视化学习曲线"></a>可视化学习曲线</h6><p>训练</p><pre><code class="hljs python"><span class="hljs-comment"># 设置boosting迭代计算次数</span>num_round = <span class="hljs-number">100</span><span class="hljs-comment"># 没有 eraly_stop</span>bst =xgb.XGBClassifier(max_depth=<span class="hljs-number">2</span>, learning_rate=<span class="hljs-number">0.1</span>, n_estimators=num_round, silent=<span class="hljs-literal">True</span>, objective=<span class="hljs-string">'binary:logistic'</span>) eval_set = [(X_train_part, y_train_part), (X_validate, y_validate)]bst.fit(X_train_part, y_train_part, eval_metric=[<span class="hljs-string">"error"</span>, <span class="hljs-string">"logloss"</span>], eval_set=eval_set, verbose=<span class="hljs-literal">True</span>)</code></pre><p>输出：</p><pre><code class="hljs angelscript">[<span class="hljs-number">0</span>]validation_0-error:<span class="hljs-number">0.04562</span>validation_0-logloss:<span class="hljs-number">0.61466</span>validation_1-error:<span class="hljs-number">0.04862</span>validation_1-logloss:<span class="hljs-number">0.61509</span>[<span class="hljs-number">1</span>]validation_0-error:<span class="hljs-number">0.04102</span>validation_0-logloss:<span class="hljs-number">0.55002</span>validation_1-error:<span class="hljs-number">0.04299</span>validation_1-logloss:<span class="hljs-number">0.55021</span>[<span class="hljs-number">2</span>]validation_0-error:<span class="hljs-number">0.04562</span>validation_0-logloss:<span class="hljs-number">0.49553</span>validation_1-error:<span class="hljs-number">0.04862</span>validation_1-logloss:<span class="hljs-number">0.49615</span>[<span class="hljs-number">3</span>]validation_0-error:<span class="hljs-number">0.04102</span>validation_0-logloss:<span class="hljs-number">0.44924</span>validation_1-error:<span class="hljs-number">0.04299</span>validation_1-logloss:<span class="hljs-number">0.44970</span>[<span class="hljs-number">4</span>]validation_0-error:<span class="hljs-number">0.04562</span>validation_0-logloss:<span class="hljs-number">0.40965</span>validation_1-error:<span class="hljs-number">0.04862</span>validation_1-logloss:<span class="hljs-number">0.41051</span>[<span class="hljs-number">5</span>]validation_0-error:<span class="hljs-number">0.04562</span>validation_0-logloss:<span class="hljs-number">0.37502</span>validation_1-error:<span class="hljs-number">0.04862</span>validation_1-logloss:<span class="hljs-number">0.37527</span>[<span class="hljs-number">6</span>]validation_0-error:<span class="hljs-number">0.04102</span>validation_0-logloss:<span class="hljs-number">0.34374</span>validation_1-error:<span class="hljs-number">0.04299</span>validation_1-logloss:<span class="hljs-number">0.34409</span>[<span class="hljs-number">7</span>]validation_0-error:<span class="hljs-number">0.04102</span>validation_0-logloss:<span class="hljs-number">0.31648</span>validation_1-error:<span class="hljs-number">0.04299</span>validation_1-logloss:<span class="hljs-number">0.31680</span>[<span class="hljs-number">8</span>]validation_0-error:<span class="hljs-number">0.04102</span>validation_0-logloss:<span class="hljs-number">0.29229</span>validation_1-error:<span class="hljs-number">0.04299</span>validation_1-logloss:<span class="hljs-number">0.29217</span>[<span class="hljs-number">9</span>]validation_0-error:<span class="hljs-number">0.04102</span>validation_0-logloss:<span class="hljs-number">0.27028</span>validation_1-error:<span class="hljs-number">0.04299</span>validation_1-logloss:<span class="hljs-number">0.27031</span>[<span class="hljs-number">10</span>]validation_0-error:<span class="hljs-number">0.04102</span>validation_0-logloss:<span class="hljs-number">0.25084</span>validation_1-error:<span class="hljs-number">0.04299</span>validation_1-logloss:<span class="hljs-number">0.25075</span>[<span class="hljs-number">11</span>]validation_0-error:<span class="hljs-number">0.02303</span>validation_0-logloss:<span class="hljs-number">0.23349</span>validation_1-error:<span class="hljs-number">0.02405</span>validation_1-logloss:<span class="hljs-number">0.23322</span>[<span class="hljs-number">12</span>]validation_0-error:<span class="hljs-number">0.02895</span>validation_0-logloss:<span class="hljs-number">0.21413</span>validation_1-error:<span class="hljs-number">0.02968</span>validation_1-logloss:<span class="hljs-number">0.21411</span>[<span class="hljs-number">13</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.19726</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.19747</span>[<span class="hljs-number">14</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.18254</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.18296</span>[<span class="hljs-number">15</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.16969</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.17029</span>[<span class="hljs-number">16</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.15845</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.15923</span>[<span class="hljs-number">17</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.14999</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.15106</span>[<span class="hljs-number">18</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.14108</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.14227</span>[<span class="hljs-number">19</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.13417</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.13544</span>[<span class="hljs-number">20</span>]validation_0-error:<span class="hljs-number">0.01645</span>validation_0-logloss:<span class="hljs-number">0.12691</span>validation_1-error:<span class="hljs-number">0.01945</span>validation_1-logloss:<span class="hljs-number">0.12827</span>[<span class="hljs-number">21</span>]validation_0-error:<span class="hljs-number">0.02500</span>validation_0-logloss:<span class="hljs-number">0.12055</span>validation_1-error:<span class="hljs-number">0.02661</span>validation_1-logloss:<span class="hljs-number">0.12199</span>[<span class="hljs-number">22</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.11535</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.11683</span>[<span class="hljs-number">23</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.11015</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.11169</span>[<span class="hljs-number">24</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.10586</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.10725</span>[<span class="hljs-number">25</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.10196</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.10337</span>[<span class="hljs-number">26</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.09799</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.09945</span>[<span class="hljs-number">27</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.09453</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.09620</span>[<span class="hljs-number">28</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.09112</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.09283</span>[<span class="hljs-number">29</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.08809</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.08991</span>[<span class="hljs-number">30</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.08521</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.08693</span>[<span class="hljs-number">31</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.08188</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.08324</span>[<span class="hljs-number">32</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.07883</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.08027</span>[<span class="hljs-number">33</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.07606</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.07722</span>[<span class="hljs-number">34</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.07349</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.07491</span>[<span class="hljs-number">35</span>]validation_0-error:<span class="hljs-number">0.02062</span>validation_0-logloss:<span class="hljs-number">0.07078</span>validation_1-error:<span class="hljs-number">0.02354</span>validation_1-logloss:<span class="hljs-number">0.07213</span>[<span class="hljs-number">36</span>]validation_0-error:<span class="hljs-number">0.01470</span>validation_0-logloss:<span class="hljs-number">0.06844</span>validation_1-error:<span class="hljs-number">0.01791</span>validation_1-logloss:<span class="hljs-number">0.06985</span>[<span class="hljs-number">37</span>]validation_0-error:<span class="hljs-number">0.01009</span>validation_0-logloss:<span class="hljs-number">0.06620</span>validation_1-error:<span class="hljs-number">0.01023</span>validation_1-logloss:<span class="hljs-number">0.06742</span>[<span class="hljs-number">38</span>]validation_0-error:<span class="hljs-number">0.01470</span>validation_0-logloss:<span class="hljs-number">0.06400</span>validation_1-error:<span class="hljs-number">0.01791</span>validation_1-logloss:<span class="hljs-number">0.06544</span>[<span class="hljs-number">39</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.06188</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.06349</span>[<span class="hljs-number">40</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.05988</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.06132</span>[<span class="hljs-number">41</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.05798</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.05936</span>[<span class="hljs-number">42</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.05621</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.05774</span>[<span class="hljs-number">43</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.05441</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.05600</span>[<span class="hljs-number">44</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.05274</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.05426</span>[<span class="hljs-number">45</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.05121</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.05266</span>[<span class="hljs-number">46</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04972</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.05131</span>[<span class="hljs-number">47</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04820</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04985</span>[<span class="hljs-number">48</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04680</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04838</span>[<span class="hljs-number">49</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04552</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04715</span>[<span class="hljs-number">50</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04423</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04583</span>[<span class="hljs-number">51</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04302</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04456</span>[<span class="hljs-number">52</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04190</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04358</span>[<span class="hljs-number">53</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.04072</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04234</span>[<span class="hljs-number">54</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03967</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04134</span>[<span class="hljs-number">55</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03866</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.04027</span>[<span class="hljs-number">56</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03766</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03940</span>[<span class="hljs-number">57</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03663</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03849</span>[<span class="hljs-number">58</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03569</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03751</span>[<span class="hljs-number">59</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03482</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03658</span>[<span class="hljs-number">60</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03393</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03581</span>[<span class="hljs-number">61</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03272</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03450</span>[<span class="hljs-number">62</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03192</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03367</span>[<span class="hljs-number">63</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03116</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03295</span>[<span class="hljs-number">64</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.03041</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03216</span>[<span class="hljs-number">65</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02968</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03140</span>[<span class="hljs-number">66</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02901</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03079</span>[<span class="hljs-number">67</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02834</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.03017</span>[<span class="hljs-number">68</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02771</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02948</span>[<span class="hljs-number">69</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02708</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02896</span>[<span class="hljs-number">70</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02646</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02834</span>[<span class="hljs-number">71</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02589</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02773</span>[<span class="hljs-number">72</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02533</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02712</span>[<span class="hljs-number">73</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02479</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02663</span>[<span class="hljs-number">74</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02427</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02600</span>[<span class="hljs-number">75</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02376</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02553</span>[<span class="hljs-number">76</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02327</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02512</span>[<span class="hljs-number">77</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02278</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02461</span>[<span class="hljs-number">78</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02233</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02421</span>[<span class="hljs-number">79</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02186</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02378</span>[<span class="hljs-number">80</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02143</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02330</span>[<span class="hljs-number">81</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02090</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02271</span>[<span class="hljs-number">82</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02050</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02239</span>[<span class="hljs-number">83</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.02009</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02206</span>[<span class="hljs-number">84</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01969</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02159</span>[<span class="hljs-number">85</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01931</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02126</span>[<span class="hljs-number">86</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01895</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02088</span>[<span class="hljs-number">87</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01837</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.02021</span>[<span class="hljs-number">88</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01804</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01992</span>[<span class="hljs-number">89</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01772</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01956</span>[<span class="hljs-number">90</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01741</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01929</span>[<span class="hljs-number">91</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01710</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01897</span>[<span class="hljs-number">92</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01660</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01839</span>[<span class="hljs-number">93</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01602</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01748</span>[<span class="hljs-number">94</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01576</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01721</span>[<span class="hljs-number">95</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01547</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01692</span>[<span class="hljs-number">96</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01520</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01672</span>[<span class="hljs-number">97</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01492</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01640</span>[<span class="hljs-number">98</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01444</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01570</span>[<span class="hljs-number">99</span>]validation_0-error:<span class="hljs-number">0.00153</span>validation_0-logloss:<span class="hljs-number">0.01422</span>validation_1-error:<span class="hljs-number">0.00307</span>validation_1-logloss:<span class="hljs-number">0.01543</span>XGBClassifier(base_score=<span class="hljs-number">0.5</span>, booster=<span class="hljs-string">'gbtree'</span>, colsample_bylevel=<span class="hljs-number">1</span>,              colsample_bynode=<span class="hljs-number">1</span>, colsample_bytree=<span class="hljs-number">1</span>, gamma=<span class="hljs-number">0</span>, gpu_id=<span class="hljs-number">-1</span>,              importance_type=<span class="hljs-string">'gain'</span>, <span class="hljs-built_in">int</span>eraction_constraints=<span class="hljs-string">''</span>,              learning_rate=<span class="hljs-number">0.1</span>, max_delta_step=<span class="hljs-number">0</span>, max_depth=<span class="hljs-number">2</span>,              min_child_weight=<span class="hljs-number">1</span>, missing=nan, monotone_constraints=<span class="hljs-string">'()'</span>,              n_estimators=<span class="hljs-number">100</span>, n_jobs=<span class="hljs-number">0</span>, num_parallel_tree=<span class="hljs-number">1</span>,              objective=<span class="hljs-string">'binary:logistic'</span>, random_state=<span class="hljs-number">0</span>, reg_alpha=<span class="hljs-number">0</span>,              reg_lambda=<span class="hljs-number">1</span>, scale_pos_weight=<span class="hljs-number">1</span>, silent=True, subsample=<span class="hljs-number">1</span>,              tree_method=<span class="hljs-string">'exact'</span>, validate_parameters=<span class="hljs-number">1</span>, verbosity=None)</code></pre><p>可视化</p><pre><code class="hljs python"><span class="hljs-comment"># retrieve performance metrics</span>results = bst.evals_result()<span class="hljs-comment">#print(results)</span>epochs = len(results[<span class="hljs-string">'validation_0'</span>][<span class="hljs-string">'error'</span>])x_axis = range(<span class="hljs-number">0</span>, epochs)<span class="hljs-comment"># plot log loss</span>fig, ax = plt.subplots()ax.plot(x_axis, results[<span class="hljs-string">'validation_0'</span>][<span class="hljs-string">'logloss'</span>], label=<span class="hljs-string">'Train'</span>)ax.plot(x_axis, results[<span class="hljs-string">'validation_1'</span>][<span class="hljs-string">'logloss'</span>], label=<span class="hljs-string">'Test'</span>)ax.legend()plt.ylabel(<span class="hljs-string">'Log Loss'</span>)plt.title(<span class="hljs-string">'XGBoost Log Loss'</span>)plt.show()<span class="hljs-comment"># plot classification error</span>fig, ax = plt.subplots()ax.plot(x_axis, results[<span class="hljs-string">'validation_0'</span>][<span class="hljs-string">'error'</span>], label=<span class="hljs-string">'Train'</span>)ax.plot(x_axis, results[<span class="hljs-string">'validation_1'</span>][<span class="hljs-string">'error'</span>], label=<span class="hljs-string">'Test'</span>)ax.legend() <span class="hljs-comment"># 显示标签label</span>plt.ylabel(<span class="hljs-string">'Classification Error'</span>)plt.title(<span class="hljs-string">'XGBoost Classification Error'</span>)plt.show()</code></pre><center class="half">    <img src="/article/2bebfb2a/输出4.png" srcset="/img/loading.gif" width="350" hight="300">    <img src="/article/2bebfb2a/输出5.png" srcset="/img/loading.gif" width="350" hight="300"></center><h2 id="Stacking-堆叠"><a href="#Stacking-堆叠" class="headerlink" title="Stacking(堆叠)"></a>Stacking(堆叠)</h2><h3 id="Stacking原理"><a href="#Stacking原理" class="headerlink" title="Stacking原理"></a>Stacking原理</h3><p><img src="/article/2bebfb2a/image-20200713231126836.png" srcset="/img/loading.gif" alt="image-20200713231126836"></p><h3 id="Stacking代码"><a href="#Stacking代码" class="headerlink" title="Stacking代码"></a>Stacking代码</h3><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> GaussianNB<span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<span class="hljs-keyword">from</span> mlxtend.classifier <span class="hljs-keyword">import</span> StackingClassifier<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npdata = np.loadtxt(<span class="hljs-string">'data/wine.data'</span>, delimiter=<span class="hljs-string">','</span>)X = data[:, <span class="hljs-number">1</span>:]y = data[:, <span class="hljs-number">0</span>:<span class="hljs-number">1</span>]X_train, X_test, y_train, y_test = train_test_split(X, y.ravel(), train_size=<span class="hljs-number">0.8</span>, random_state=<span class="hljs-number">0</span>)<span class="hljs-comment"># 定义基分类器</span>clf1 = KNeighborsClassifier(n_neighbors=<span class="hljs-number">5</span>)clf2 = RandomForestClassifier(random_state=<span class="hljs-number">1</span>)clf3 = GaussianNB()<span class="hljs-comment"># 定义最终使用的逻辑回归分类器</span>lr = LogisticRegression()<span class="hljs-comment"># 使用stacking分类器</span>sclf = StackingClassifier(classifiers=[clf1, clf2, clf3],                          meta_classifier=lr,use_probas=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 对每一个模型分别进行评价</span><span class="hljs-keyword">for</span> model <span class="hljs-keyword">in</span> [clf1,clf2,clf3,lr,sclf]:    model.fit(X_train,y_train)    y_test_hat = model.predict(X_test)    print(model.__class__.__name__,<span class="hljs-string">',test accuarcy:'</span>,accuracy_score(y_test,y_test_hat))</code></pre><p>输出：</p><pre><code class="hljs yaml"><span class="hljs-string">KNeighborsClassifier</span> <span class="hljs-string">,test</span> <span class="hljs-attr">accuarcy:</span> <span class="hljs-number">0.8055555555555556</span><span class="hljs-string">RandomForestClassifier</span> <span class="hljs-string">,test</span> <span class="hljs-attr">accuarcy:</span> <span class="hljs-number">0.9444444444444444</span><span class="hljs-string">GaussianNB</span> <span class="hljs-string">,test</span> <span class="hljs-attr">accuarcy:</span> <span class="hljs-number">0.9166666666666666</span><span class="hljs-string">LogisticRegression</span> <span class="hljs-string">,test</span> <span class="hljs-attr">accuarcy:</span> <span class="hljs-number">0.9444444444444444</span><span class="hljs-string">StackingClassifier</span> <span class="hljs-string">,test</span> <span class="hljs-attr">accuarcy:</span> <span class="hljs-number">0.9722222222222222</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集成学习-Ensemble-Learning-introduction&quot;&gt;&lt;a href=&quot;#集成学习-Ensemble-Learning-introduction&quot; class=&quot;headerlink&quot; title=&quot;集成学习(Ensemble Learning
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sulimin-nb.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://sulimin-nb.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>leetcode315</title>
    <link href="https://sulimin-nb.github.io/article/ad1c84b5.html"/>
    <id>https://sulimin-nb.github.io/article/ad1c84b5.html</id>
    <published>2020-07-11T15:13:43.000Z</published>
    <updated>2020-07-14T15:48:54.141Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">The article is available after a week or enter the password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5f139da38f0cecc037efad976e33928f59942b7204d5614e026249798ae433da"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article is available after a week.
    
    </summary>
    
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/categories/leetcode/"/>
    
      <category term="树状数组,归并排序" scheme="https://sulimin-nb.github.io/categories/leetcode/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="每日一题" scheme="https://sulimin-nb.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
      <category term="leetcode" scheme="https://sulimin-nb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-主成分分析</title>
    <link href="https://sulimin-nb.github.io/article/1998c4ca.html"/>
    <id>https://sulimin-nb.github.io/article/1998c4ca.html</id>
    <published>2020-07-10T16:06:33.000Z</published>
    <updated>2020-07-14T12:24:23.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PCA简介"><a href="#PCA简介" class="headerlink" title="PCA简介"></a>PCA简介</h2><ul><li><p>是一种统计方法，通过正交变换将一组可能存在相关性的变量转换为一组线性不相关的变量，转换后的这组变量叫主成分。</p></li><li><p>算法本质是找一些投影方向，使得数据在这些投影方向上方差(投影过后的点到原点的平方和)最大。（投影距离小）</p><center><img src="/article/1998c4ca/image-20200711003413935.png" srcset="/img/loading.gif" width="600"></center><center><img src="/article/1998c4ca/image-20200711003420835.png" srcset="/img/loading.gif" width="600"></center><center><img src="/article/1998c4ca/image-20200711003436312.png" srcset="/img/loading.gif" width="600"></center><p>线性回归：点到直线的误差值(红线)最小。<br>PCA：投影距离(垂线方向：黑线)最小。</p></li></ul><p><img src="/article/1998c4ca/image-20200711004725908.png" srcset="/img/loading.gif" alt="image-20200711004725908"></p><ul><li><p>应用领域：</p><ul><li>降维</li><li>高维数据集的探索与可视化</li><li>数据压缩</li><li>数据预处理</li></ul></li></ul><h2 id="基于协方差矩阵的特征值分解算法-Eigenvalue-Decomposition-Algorithm-based-on-Covariance-Matrix"><a href="#基于协方差矩阵的特征值分解算法-Eigenvalue-Decomposition-Algorithm-based-on-Covariance-Matrix" class="headerlink" title="基于协方差矩阵的特征值分解算法(Eigenvalue Decomposition Algorithm based on Covariance Matrix)"></a>基于协方差矩阵的特征值分解算法(Eigenvalue Decomposition Algorithm based on Covariance Matrix)</h2><p>1、均值归一化。计算各个特征均值，然后令$x_j=x_j-u_j$。如果特征在不同数量级上，还需要将其除以标准差，即$x_j=\frac{x_j-u_j}{\sigma_j}$<br>2、计算协方差矩阵(covariance matrx)$\sum=\frac{1}{m-1}\sum_{i=1}^{m}{X.T*X}$（X为mxn矩阵，m为样本量，n为特征维度）<br>3、计算协方差矩阵$\sum$的特征向量(eigenvactors)：eigenvalues, eigenvectors = np.linalg.eig(sigma)<br>4、取特征向量u的前k维，得到nxk维度的矩阵，用$U_{reduce}$表示，则降维后的数据为    </p><script type="math/tex; mode=display">\begin{aligned}z^{(i)}= & U^{T}_{reduce} \times x^{i} \quad 针对一条数据(即一个向量) \\Z = & X \times U_{reduce} \quad 针对所有数据(即一个矩阵)\end{aligned}</script><p><strong>代码(将二维数据降维为一维数据)：</strong><br>一、导入数据</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loaddata</span><span class="hljs-params">()</span>:</span>    data = np.loadtxt(<span class="hljs-string">'data/pca_data.csv'</span>,delimiter=<span class="hljs-string">','</span>)    <span class="hljs-keyword">return</span> dataX = loaddata()plt.scatter(X[:,<span class="hljs-number">0</span>],X[:,<span class="hljs-number">1</span>])plt.show()</code></pre><p><img src="/article/1998c4ca/输出1.png" srcset="/img/loading.gif" alt="输出1"></p><p>二、特征值归一化及PCA降维</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">featureNormalize</span><span class="hljs-params">(X)</span>:</span>    mu = np.mean(X,axis=<span class="hljs-number">0</span>).reshape(<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>)    sigma = np.std(X,axis=<span class="hljs-number">0</span>,ddof=<span class="hljs-number">1</span>).reshape(<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>)    X = (X-mu)/sigma    <span class="hljs-keyword">return</span> X,mu,sigma<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pca</span><span class="hljs-params">(X, K)</span>:</span>    m = len(X)    sigma = np.dot(X.T, X)/(m<span class="hljs-number">-1</span>)    <span class="hljs-comment"># 返回的特征向量需是从大到小排序后的，取前k列。</span>    eigenvalues, eigenvectors = np.linalg.eig(sigma)    index = np.argsort(-eigenvalues) <span class="hljs-comment">#特征值从大到小排序</span>    eigenvectors = eigenvectors[:,index] <span class="hljs-comment">#特征向量对应的值</span>    u_reduce = eigenvectors[:,<span class="hljs-number">0</span>:K]    <span class="hljs-keyword">return</span> np.dot(X,u_reduce),eigenvectorsX,mu,sigma = featureNormalize(X)Z,eigenvectors=pca(X,<span class="hljs-number">1</span>)print(Z)</code></pre><p>输出：</p><pre><code class="hljs tex">[[ 1.48127391] [-0.91291229] [ 1.21208656] [ 1.62734009] [ 1.26042409] [-0.96700223] [ 1.25605967] [-2.31794969] [-0.02968998] [-0.77386123] [-0.62532902] [-0.54724542] [-0.08878025] [-0.520569  ] [ 1.548434  ] [-1.89684585] [-0.87788459] [ 0.94646472] [-2.30653955] [-0.4731351 ] [-2.19518524] [ 0.38509662] [-1.76688508] [ 0.0512347 ] [ 1.64838858] [ 0.50302869] [-1.2246766 ] [-1.16020771] [ 0.83375215] [-0.00686207] [-0.22565101] [-1.49788781] [ 1.3252858 ] [-0.58656923] [ 0.67225099] [-1.33938187] [ 1.67053477] [-1.37836539] [ 2.53419743] [-0.27570789] [-0.96695982] [ 0.8792732 ] [ 1.28362916] [-0.97972108] [ 1.79450473] [-0.26923019] [ 3.16088618] [ 1.20080033] [ 0.36423084] [-1.42814204]]</code></pre><p>三、画图（<span style="color:red">recover到了两维上？？</span>）</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recover</span><span class="hljs-params">(Z, U, K)</span>:</span>    U_reduce = U[:,<span class="hljs-number">0</span>:K]    X_rec = np.dot(Z,np.transpose(U_reduce))    <span class="hljs-keyword">return</span> X_rec<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plotData</span><span class="hljs-params">(X_origin, X_rec)</span>:</span>    plt.scatter(X_origin[:,<span class="hljs-number">0</span>], X_origin[:,<span class="hljs-number">1</span>])    plt.scatter(X_rec[:,<span class="hljs-number">0</span>],X_rec[:,<span class="hljs-number">1</span>],c=<span class="hljs-string">'red'</span>)    plt.show()</code></pre><p><img src="/article/1998c4ca/输出2.png" srcset="/img/loading.gif" alt="输出2"></p><h2 id="基于数据矩阵的奇异值分解算法-Singular-Value-Decomposition-Algorithm-based-on-Data-Matrix"><a href="#基于数据矩阵的奇异值分解算法-Singular-Value-Decomposition-Algorithm-based-on-Data-Matrix" class="headerlink" title="基于数据矩阵的奇异值分解算法(Singular Value Decomposition Algorithm based on Data Matrix)"></a>基于数据矩阵的奇异值分解算法(Singular Value Decomposition Algorithm based on Data Matrix)</h2><p>1、均值归一化。计算各个特征均值，然后令$x_j=x_j-u_j$。如果特征在不同数量级上，还需要将其除以标准差，即$x_j=\frac{x_j-u_j}{\sigma_j}$<br>2、对数据矩阵进行SVD分解：$u,s,v^T = np.linalg.svd(X,full_matrices=0)$<br>3、取特征向量$v^T$的前k维，得到kxn维度的矩阵，用$U_{reduce}$表示，则降维后的数据为    </p><script type="math/tex; mode=display">\begin{aligned}z^{(i)}= & v \times x^{i} \quad 针对一条数据(即一个向量) \\Z = & X \times (v^T)^T \quad 针对所有数据(即一个矩阵)\end{aligned}</script><p><strong>解释：</strong><br>奇异值分解如下式所示：</p><script type="math/tex; mode=display">X^{m \times n} = u^{m \times m} {\sum}^{m \times n} (v^T)^{n \times n} \tag{1}</script><p>其中$\sum$特征值矩阵是非常稀疏的，取其特征值前top r列，上式转换为:</p><script type="math/tex; mode=display">X^{m \times n} \approx u^{m \times r} {\sum}^{r \times r} (v^T)^{r \times n} \tag{2}</script><p>(1)式在第2个步骤中分解为$X^{m \times n} \approx u^{m \times n} {\sum}^{n \times n} (v^T)^{n \times n}$，然后根据实际需要，取前r行即可。</p><p><strong>代码(将二维数据降维为一维数据)：</strong></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loaddata</span><span class="hljs-params">()</span>:</span>    data = np.loadtxt(<span class="hljs-string">'data/pca_data.csv'</span>,delimiter=<span class="hljs-string">','</span>)    <span class="hljs-keyword">return</span> dataX = loaddata() <span class="hljs-comment"># 和上一个代码一样的数据，就不展示了</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">featureNormalize</span><span class="hljs-params">(X)</span>:</span>    mu = np.mean(X,axis=<span class="hljs-number">0</span>).reshape(<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>)    sigma = np.std(X,axis=<span class="hljs-number">0</span>,ddof=<span class="hljs-number">1</span>).reshape(<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>)    X = (X-mu)/sigma    <span class="hljs-keyword">return</span> X,mu,sigma<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pca</span><span class="hljs-params">(X,K)</span>:</span>    u,s,vT = np.linalg.svd(X, full_matrices=<span class="hljs-number">0</span>)    <span class="hljs-keyword">return</span> X.dot(vT.T[:,<span class="hljs-number">0</span>:K]),u,s,vTX,mu,sigma = featureNormalize(X)Z,u,s,vT = pca(X,<span class="hljs-number">1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recoverData</span><span class="hljs-params">(Z, vT, K)</span>:</span>    V_reduce = vT[:,<span class="hljs-number">0</span>:K]    X_rec = np.dot(Z,np.transpose(V_reduce))    <span class="hljs-keyword">return</span> X_rec<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plotData</span><span class="hljs-params">(X_orgin,X_rec)</span>:</span>    plt.scatter(X_orgin[:,<span class="hljs-number">0</span>],X_orgin[:,<span class="hljs-number">1</span>])    plt.scatter(X_rec[:, <span class="hljs-number">0</span>], X_rec[:, <span class="hljs-number">1</span>],c=<span class="hljs-string">'red'</span>)    plt.show()X_rec = recoverData(Z,vT,<span class="hljs-number">1</span>)plotData(X,X_rec)</code></pre><p><img src="/article/1998c4ca/输出3.png" srcset="/img/loading.gif" alt="输出3"></p><h2 id="Sklearn实现PCA"><a href="#Sklearn实现PCA" class="headerlink" title="Sklearn实现PCA"></a>Sklearn实现PCA</h2><p>1、如何选取主成分个数(How to choose the num of Principal Component)<br>主成分分析主要是减少投影的平均均方误差，即<br>（1）</p><script type="math/tex; mode=display">\frac{ \frac{1}{m} \sum^{m}_{i=1}{||x^{(i)} - x^{(i)}_{project}||^2} }{ \frac{1}{m} \sum^{m}_{i=1}{||x^{(i)}||^2}}</script><p>值越小越好(例如：等于0.01，表示原数据99%的信息都保留下来)，但此种计算方法耗时大。<br>（2）</p><script type="math/tex; mode=display">\frac{ \sum^{k}_{i=1} S_{ii} }{ \sum^{m}_{i=1} S_{ii} }</script><p>$S_{ii}$是特征值矩阵对角线元素，该值越大越好(如等于0.99，表示元数据99%的信息都保留下来)，此种计算方法耗时小。<br>2、Sklearn实现PCA</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<span class="hljs-keyword">import</span> scipy.io<span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loaddata</span><span class="hljs-params">()</span>:</span>    data = np.loadtxt(<span class="hljs-string">'data/pca_data.csv'</span>,delimiter=<span class="hljs-string">','</span>)    <span class="hljs-keyword">return</span> data<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plotData</span><span class="hljs-params">(X_orgin,X_rec)</span>:</span>    plt.scatter(X_orgin[:,<span class="hljs-number">0</span>],X_orgin[:,<span class="hljs-number">1</span>])    plt.scatter(X_rec[:, <span class="hljs-number">0</span>], X_rec[:, <span class="hljs-number">1</span>],c=<span class="hljs-string">'red'</span>)    plt.show()X = loaddata()model = PCA(n_components=<span class="hljs-number">1</span>) <span class="hljs-comment">#定义PCA</span>Z = model.fit_transform(X) <span class="hljs-comment">#生成降维后数据</span>print(<span class="hljs-string">"主成分个数="</span>,model.n_components)print(<span class="hljs-string">"贡献比="</span>,model.explained_variance_ratio_)print(<span class="hljs-string">"特征的方差="</span>,model.explained_variance_)X_rec = model.inverse_transform(Z) <span class="hljs-comment">#还原数据</span>plotData(X,X_rec)</code></pre><p>输出：</p><pre><code class="hljs tex">主成分个数= 1贡献比= [0.87062385]特征的方差= [2.10987818]</code></pre><p><img src="/article/1998c4ca/输出4.png" srcset="/img/loading.gif" alt="输出4"></p><h2 id="照片压缩"><a href="#照片压缩" class="headerlink" title="照片压缩"></a>照片压缩</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlib.image <span class="hljs-keyword">as</span> mpimg<span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<span class="hljs-comment"># 读取照片</span>img=mpimg.imread(<span class="hljs-string">"data/xxx.jpg"</span>)<span class="hljs-comment"># # 显示照片</span><span class="hljs-comment"># plt.imshow(img)</span><span class="hljs-comment"># # 查看照片维度</span><span class="hljs-comment"># print(image.shape) # (800,600,3)</span><span class="hljs-comment"># 把照片转换为二维数组</span>X = img.reshape(<span class="hljs-number">1200</span>,<span class="hljs-number">1200</span>)<span class="hljs-comment"># 数据标准化</span>X = StandardScaler().fit_transform(X) <span class="hljs-comment"># 为了算法快速收敛</span><span class="hljs-comment"># 使用PCA降维</span>model = PCA(n_components=<span class="hljs-number">50</span>)Z = model.fit_transform(X)<span class="hljs-comment"># Z.shape (1200, 50)</span>print(<span class="hljs-string">"贡献比="</span>,np.sum(model.explained_variance_ratio_))<span class="hljs-comment"># 贡献比= 0.9837087238843197</span><span class="hljs-comment"># model.explained_variance_ratio_.shape (50,)</span><span class="hljs-comment"># 数据还原</span>X_rec = model.inverse_transform(Z)X_rec = X_rec.reshape(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>,<span class="hljs-number">3</span>)<span class="hljs-comment"># 显示还原后的照片</span>plt.imshow(X_rec)</code></pre><p>照片还是不放了~大家可以找网上的照片练练手~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PCA简介&quot;&gt;&lt;a href=&quot;#PCA简介&quot; class=&quot;headerlink&quot; title=&quot;PCA简介&quot;&gt;&lt;/a&gt;PCA简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;是一种统计方法，通过正交变换将一组可能存在相关性的变量转换为一组线性不相关的变量，转换后的这组变量
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sulimin-nb.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://sulimin-nb.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
